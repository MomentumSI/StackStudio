<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:components="com.momentumsi.c9.components.*"
			   creationComplete="creationCompleteHandler(event)"
			   close="PopUpManager.removePopUp(this)"
			   width="862" height="432" title="Create New Account" xmlns:services="com.momentumsi.c9.services.*">
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			import com.momentumsi.c9.constants.ImagePath;
			import com.momentumsi.c9.constants.PermissionType;
			import com.momentumsi.c9.events.AccountCreateEvent;
			import com.momentumsi.c9.models.Permission;
			import com.momentumsi.c9.models.User;
			import com.momentumsi.c9.services.IdentityService;
			import com.momentumsi.c9.utils.Helpers;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.mxml.HTTPService;
			
			[Bindable]
			private var newUser:User;
			public var freeTrial:Boolean = false;
			
			protected function cancelButton_clickHandler(event:MouseEvent):void
			{
				PopUpManager.removePopUp(this);
			}
			
			protected function nextButton_clickHandler(event:MouseEvent):void
			{
				if(createAcctStack.selectedChild == stackStudioAccountContent)
				{
					if(stackStudioAccount.validateAccountFields()){
						if(!stackStudioAccount.proEdition.selected){
							createAcctStack.selectedIndex += 2;
						}else{
							createAcctStack.selectedIndex += 1;
						}
					}
				}else if(createAcctStack.selectedChild == subscriptionFormContent){
					if(subscriptionForm.validateSubscriptionFields()){
						createAcctStack.selectedIndex += 1;
					}else{
						Alert.show("Make sure all required fields are filled in and the expiration date is greater that today's date.");
					}
				}else{
					createAcctStack.selectedIndex += 1;
				}
			}
			
			protected function finishButton_clickHandler(event:MouseEvent):void
			{
				finishButton.label = "Saving";
				finishButton.enabled = false;
				
				var newAccount:Object = new Object();
				if(stackStudioAccount.proEdition.selected){
					var subscription:Object = new Object();
					
					var billingInfo:Object = new Object();
					billingInfo["first_name"] = subscriptionForm.billingFirstName.text;
					billingInfo["last_name"] = subscriptionForm.billingLastName.text;
					billingInfo["full_number"] = subscriptionForm.creditCardNumber.text;
					billingInfo["expiration_month"] = subscriptionForm.expMonth.selectedItem.value;
					billingInfo["expiration_year"] = subscriptionForm.expYear.selectedItem.data;
					billingInfo["cvv"] = subscriptionForm.cvv.text;
					billingInfo["billing_zip"] = subscriptionForm.billingZip.text;
					subscription["billing_info"] = billingInfo;
					
					if(Number(subscriptionForm.numSeats.text) > 1){
						subscription["seats"] = Number(subscriptionForm.numSeats.text) - 1;
					}
					newAccount["new_subscription"] = subscription;
					
					var customer:Object = new Object();
					customer["first_name"] = subscriptionForm.customerFirstName.text;
					customer["last_name"] = subscriptionForm.customerLastName.text;
					customer["email"] = subscriptionForm.customerEmail.text;
					customer["organization"] = subscriptionForm.organization.text;
					newAccount["customer"] = customer;
					createPaidAcctSvc.send({user_account: newUser.toObject()});
				}else{
					newUser.create();
					newUser.addEventListener(ResultEvent.RESULT, newUserCreated_resultHandler);
				}				
			}
			
			private function newUserCreated_resultHandler(event:ResultEvent):void
			{
				var permission:Permission = new Permission(null, PermissionType.ADMIN, PermissionType.TRANSCEND);
				identityService.addNewPermission(event.result.account.id, permission);
				
				dispatchEvent(new ResultEvent(ResultEvent.RESULT, false, true, event.result));
				var result:Object = event.result;
				var account:Object = result.account;
				var mailerService:HTTPService = new HTTPService();
				mailerService.url = Helpers.getHost() + "/user/" + account.id + "/email_user";
				mailerService.addEventListener(FaultEvent.FAULT, mailer_fault);
				mailerService.send();				
			}
			
			private function mailer_fault(event:FaultEvent):void
			{
				
			}
			
			private function removePopUpHandler(event:ResultEvent):void
			{
				var ownerObj:Object = this.owner;
				if(ownerObj.loginWindow == "LoginPopUp")
				{
					PopUpManager.removePopUp(this);
				}
			}
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				stackStudioAccount.proEdition.addEventListener(Event.CHANGE, signupCheckHandler);
				PopUpManager.centerPopUp(this);
				subscriptionForm.accountDetails = stackStudioAccount;
				stackStudioAccount.owner = this.owner;
				
				if(freeTrial)
				{
					cookieTrailHGroup.removeElement(subscriptionCookieVGroup);
					cookieTrailHGroup.removeElement(summaryCookieVGroup);
					createAcctStack.removeElement(subscriptionFormContent);
					createAcctStack.removeElement(accountSummaryContent);
					nextButton.visible = false;
					backButton.visible = false
					nextButton.includeInLayout = false;
					backButton.includeInLayout = false;
					stackStudioAccount.newAccountForm.removeElement(stackStudioAccount.proEditionSignupHGroup);
					finishButton.enabled = true;
				}
			}
			
			private function signupCheckHandler(event:Event):void
			{
				if(stackStudioAccount.proEdition.selected)
				{
					finishButton.enabled = false;
					nextButton.enabled = true;
				}else{
					finishButton.enabled =true;
					nextButton.enabled = false;
				}
			}
			
			protected function createPaidAcctSvc_faultHandler(event:FaultEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:HTTPService id="createPaidAcctSvc"
					   url="{Helpers.getHost()}/users_controller/create_new_account"
					   method="POST"
					   result="newUserCreated_resultHandler(event)"
					   fault="createPaidAcctSvc_faultHandler(event)"/>
		
		<services:IdentityService id="identityService"/>
	</fx:Declarations>
	<s:VGroup width="100%" height="100%">
		<s:Group height="70" width="100%">
			<s:Rect width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="#A7A9Ad"/>
				</s:fill>
			</s:Rect>
			<s:Line x="50" y="14" width="762">
				<s:stroke>
					<s:SolidColorStroke color="#838588" weight="1"/>
				</s:stroke>
			</s:Line>
			<s:Line x="50" y="15" width="762">
				<s:stroke>
					<s:SolidColorStroke color="#D1D3D8" weight="1"/>
				</s:stroke>
			</s:Line>
			<s:HGroup id="cookieTrailHGroup" width="100%" height="60" gap="230" horizontalAlign="center" paddingTop="9">
				<s:VGroup horizontalAlign="center">
					<s:Image source="{ImagePath.TRAIL_KNOB}" width="16" height="16" visible="{createAcctStack.selectedChild == stackStudioAccountContent}"/>
					<mx:Text textAlign="center" x="-9" width="144" disabledColor="white"
							 enabled="{createAcctStack.selectedChild == stackStudioAccountContent}"
							 fontWeight="bold" text="Create StackStudio Account"/>
				</s:VGroup>
				<s:VGroup id="subscriptionCookieVGroup" horizontalAlign="center">
					<s:Image source="{ImagePath.TRAIL_KNOB}" width="16" height="16" visible="{createAcctStack.selectedChild == subscriptionFormContent}"/>
					<mx:Text text="Subscription&#xd; Information" fontWeight="bold" enabled="{createAcctStack.selectedChild == subscriptionFormContent}" disabledColor="white"/>
				</s:VGroup>
				<s:VGroup id="summaryCookieVGroup" horizontalAlign="center">
					<s:Image source="{ImagePath.TRAIL_KNOB}" width="16" height="16" visible="{createAcctStack.selectedChild == accountSummaryContent}"/>
					<mx:Text text="Summary" fontWeight="bold" enabled="{createAcctStack.selectedChild == accountSummaryContent}" disabledColor="white"/>
				</s:VGroup>
			</s:HGroup>
		</s:Group>
		<mx:ViewStack id="createAcctStack" height="100%" width="100%" creationPolicy="all">
			<s:NavigatorContent height="100%" width="100%" id="stackStudioAccountContent">
				<components:AccountCreateBox id="stackStudioAccount" height="100%" width="100%"
											 newUser="@{newUser}"/>
			</s:NavigatorContent>
			<s:NavigatorContent height="100%" width="100%" id="subscriptionFormContent">
				<components:SubscriptionSignupForm id="subscriptionForm" height="100%" width="100%"/>
			</s:NavigatorContent>
			<s:NavigatorContent height="100%" width="100%" id="accountSummaryContent">
				<s:Form>
					<s:FormItem label="Login:">
						<s:Label text="{stackStudioAccount.usernameTI.text}"/>
					</s:FormItem>
					<s:FormItem label="Email:">
						<s:Label text="{stackStudioAccount.emailTI.text}"/>
					</s:FormItem>
					<s:FormItem id="billSummary" label="Today's Total:" visible="{stackStudioAccount.proEdition.selected}" includeInLayout="{billSummary.visible}">
						<mx:Text text="${(Number(subscriptionForm.numSeats.text) * 230)}.00 (then ${(Number(subscriptionForm.numSeats.text) * 230)}.00 at first renewal on {subscriptionForm.date.getMonth() + 2}/{subscriptionForm.date.getDay()}/{subscriptionForm.date.getFullYear()})"/>	
					</s:FormItem>
				</s:Form>
			</s:NavigatorContent>
		</mx:ViewStack>
		<s:HGroup width="100%" paddingLeft="10" paddingRight="10" paddingBottom="10">
			<s:HGroup width="100%" horizontalAlign="left">
				<s:Button id="backButton" enabled="{createAcctStack.selectedIndex != 0}" label="Back" click="createAcctStack.selectedIndex = createAcctStack.selectedIndex - 1"/>
				<s:Button id="nextButton" enabled="{createAcctStack.selectedIndex != (createAcctStack.length - 1)}" label="Next" click="nextButton_clickHandler(event)"/>
				<s:Button id="finishButton" 
						  enabled="{createAcctStack.selectedIndex == createAcctStack.length - 1}"
						  label="Finish"
						  click="finishButton_clickHandler(event)"/>
			</s:HGroup>
			<s:HGroup width="100%" horizontalAlign="right">
				<s:Button id="cancelButton" label="Cancel" click="PopUpManager.removePopUp(this)"/>
			</s:HGroup>
		</s:HGroup>
	</s:VGroup>
</s:TitleWindow>
