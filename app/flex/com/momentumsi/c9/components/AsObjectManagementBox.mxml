<?xml version="1.0" encoding="utf-8"?>
<c9:ObjectManagementDetailsBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:c9="com.momentumsi.c9.components.*">
	
	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.representers.AutoScaleRepresenter;
			import com.momentumsi.c9.services.CloudApiService;
			import com.momentumsi.c9.services.MonitoringService;
			import com.momentumsi.c9.utils.Helpers;
			
			import mx.core.UIComponent;
			import mx.events.IndexChangedEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.StringUtil;
			
			[Bindable]
			private var asData:AutoScaleRepresenter;
			[Bindable]
			public var accountId:int;
			[Bindable]
			private var azDisplay:String;
			[Bindable]
			private var instanceDisplay:String;
			[Bindable]
			private var lbDisplay:String;		
			
			override public function set resourceData(value:Object):void
			{
				asData = new AutoScaleRepresenter(value);
				asDetails.selectedIndex = 0;
				super.resourceData = asData;
			}
			
			protected function terminate_clickHandler(event:MouseEvent):void
			{
				var destroyPopUp:DestroyResourceObjectManagement = DestroyResourceObjectManagement(PopUpManager.createPopUp(UIComponent(this.parentApplication), DestroyResourceObjectManagement, true));
				destroyPopUp.cloudAccountId = cloudAccount.id;
				destroyPopUp.region = region;
				destroyPopUp.resourceType = CloudApiService.AS_SERVICE;
				destroyPopUp.resourceDisplayId = asData.name;
				destroyPopUp.resourceId = asData.name;
				destroyPopUp.childId = asData.launchConfigurationName;
			}
			
			protected function spinDown_clickHandler(event:MouseEvent):void
			{
				var destroyPopUp:DestroyResourceObjectManagement = DestroyResourceObjectManagement(PopUpManager.createPopUp(UIComponent(this.parentApplication), DestroyResourceObjectManagement, true));
				destroyPopUp.cloudAccountId = cloudAccount.id;
				destroyPopUp.region = region;
				destroyPopUp.resourceType = "asSpinDown";
				destroyPopUp.resourceDisplayId = asData.name;
				destroyPopUp.resourceId = asData.name;
			}
			
			protected function asDetails_changeHandler(event:IndexChangedEvent):void
			{
				if(asDetails.selectedChild == monitoringContent)
				{
					monitorBox.objectManagement = true;
					monitorBox.objectManagementResource = asData;
					monitorBox.objectManagementResourceType = MonitoringService.AS_DEFAULT;
					monitorBox.getDefaultMonitorsCall(MonitoringService.AS_DEFAULT);
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
	</fx:Declarations>
	
	<s:HGroup paddingLeft="10" gap="20">
		<c9:TextButton id="spinDown"
					   text="Spin Down Group"
					   click="spinDown_clickHandler(event)"/>
		<c9:TextButton id="deleteGroupButton"
					   text="Delete Group"
					   click="terminate_clickHandler(event)"
					   enabled="{asData.instancesCollection.length == 0}"/>
	</s:HGroup>
	<s:BorderContainer height="100%" width="100%" alpha="1" borderVisible="false">
		<mx:TabNavigator id="asDetails" width="100%" height="100%" change="asDetails_changeHandler(event)">
			<s:NavigatorContent label="Details" width="100%" height="100%">
				<s:BorderContainer borderVisible="false"  id="details" height="100%" width="100%">
					<s:Scroller width="100%" height="100%">
						<s:viewport>
							<s:HGroup>
								<s:Form>
									<s:layout>
										<s:FormLayout gap="-7"/>
									</s:layout>
									<s:FormItem label="Group Name:">
										<mx:Text text="{asData.name}"/>
									</s:FormItem>
									<s:FormItem label="Launch Configuration Name:">
										<mx:Text text="{asData.launchConfigurationName}"/>
									</s:FormItem>
									<s:FormItem label="Desired Capacity:">
										<mx:Text text="{asData.desiredCapacity}"/>
									</s:FormItem>
									<s:FormItem label="Min Size:">
										<mx:Text text="{asData.minSize}"/>
									</s:FormItem>
									<s:FormItem label="Max Size:">
										<mx:Text text="{asData.maxSize}"/>
									</s:FormItem>
									<s:FormItem label="Health Check Type:">
										<mx:Text text="{asData.healthCheckType}"/>
									</s:FormItem>
									<s:FormItem label="Health Check Grace Period:">
										<mx:Text text="{asData.healthCheckGracePeriod}"/>
									</s:FormItem>
									<s:FormItem label="Date Created:">
										<mx:Text text="{asData.createdAt}"/>
									</s:FormItem>
								</s:Form>
								<s:Form width="100%">
									<s:layout>
										<s:FormLayout gap="-7"/>
									</s:layout>
									<s:FormItem label="Availability Zones:">
										<mx:Text text="{asData.availabilityZones}"/>
									</s:FormItem>
									<s:FormItem label="Instances:">
										<mx:Text text="{asData.instances}"/>
									</s:FormItem>
									<s:FormItem label="Load Balancers:">
										<mx:Text text="{asData.loadBalancers}"/>
									</s:FormItem>
									<s:FormItem label="Default Cooldown:">
										<mx:Text text="{asData.defaultCooldown}"/>
									</s:FormItem>
									<s:FormItem label="Group ARN:" width="100%">
										<mx:Text text="{asData.groupArn}" width="100%"/>
									</s:FormItem>
								</s:Form>
							</s:HGroup>
						</s:viewport>
					</s:Scroller>
				</s:BorderContainer>
			</s:NavigatorContent>
			<s:NavigatorContent id="monitoringContent" label="Monitoring" width="100%" height="100%">
				<c9:MonitoringBox id="monitorBox" cloudAccountId="{cloudAccount.id}" region="{region}"/>
			</s:NavigatorContent>
		</mx:TabNavigator>
	</s:BorderContainer>
</c9:ObjectManagementDetailsBox>