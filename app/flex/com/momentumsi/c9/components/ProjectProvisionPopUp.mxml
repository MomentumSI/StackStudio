<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" width="800" height="600"
			   title="Provision Manager"
			   creationComplete="creationCompleteHandler(event)"
			   close="closeHandler(event)"
			   move="Helpers.doMove(this);"
			   xmlns:components="com.momentumsi.c9.components.*" 
			   xmlns:services="com.momentumsi.c9.services.*">
	<fx:Script>
		<![CDATA[
			import com.maccherone.json.JSON;
			import com.momentumsi.c9.constants.AlertMessage;
			import com.momentumsi.c9.constants.ResourceType;
			import com.momentumsi.c9.events.ProjectEvent;
			import com.momentumsi.c9.events.cloudFromation.CreateCFStackFaultEvent;
			import com.momentumsi.c9.events.cloudFromation.CreateCFStackResultEvent;
			import com.momentumsi.c9.events.cloudFromation.UpdateCFStackResultEvent;
			import com.momentumsi.c9.models.Element;
			import com.momentumsi.c9.models.Project;
			import com.momentumsi.c9.models.ProvisionedVersion;
			import com.momentumsi.c9.models.User;
			import com.momentumsi.c9.models.resources.EmbeddedStack;
			import com.momentumsi.c9.services.ProjectService;
			import com.momentumsi.c9.utils.Helpers;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.mxml.HTTPService;
									
			[Bindable]
			public var project:Project;
			[Bindable]
			public var region:String;
			public var user:User;
			public var template:String;
			public var version:String;
			public var environment:String;
			private var numEmbCurrVerReceived:int = 0;
			private var embeddedProjectsList:ArrayCollection = new ArrayCollection();
			public var projectSvc:ProjectService = new ProjectService();
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				if(project.currentProvisionedVersion != null)
				{
					stackNameTI.text = project.currentProvisionedVersion.stackName;
					stackNameTI.enabled = false;
				}else{
					stackNameTI.text = project.project_name + environment + version.replace(/\./g,"");
				}
				PopUpManager.centerPopUp(this);
				templateInputs.projectName = project.project_name;
				templateInputs.getAdvancedOptionsNotifications();
				
				gatherEmbeddedProjects();
			}
			
			private function gatherEmbeddedProjects():void
			{
				if(project.currentVersion.elements.length > 0)
				{
					for each(var resource:Element in project.currentVersion.elements)
					{
						if(resource.elementType == ResourceType.EMBEDDED_STACK)
						{
							var embeddedStack:EmbeddedStack = new EmbeddedStack(resource);
							var projectName:String = embeddedStack.getStackStudioProjectName()
							var embeddedProject:Project = user.findProjectByName(projectName);
							embeddedProject.addEventListener(ProjectEvent.VERSION_SET, getProjectVersion_resultHandler);
							embeddedProject.getProjectVersion(embeddedProject.mostRecentVersion);
							if(embeddedStack.templateURL != null)
							{
								if(embeddedStack.isStackStudioProject())
								{
									var bucketName:String = embeddedStack.getBucketName();
									embeddedProjectsList.addItem({projectName: projectName, bucketName: bucketName, project: embeddedProject, resource: embeddedStack});
								}
							}
						}
					}
				}
			}
			
			private function getProjectVersion_resultHandler(event:ProjectEvent):void
			{
				numEmbCurrVerReceived++;
			}
			
			private function closeHandler(event:CloseEvent):void
			{
				PopUpManager.removePopUp(this);
			}
			
			public function provisionButton_clickHandler():void
			{	
				provisionButton.enabled = false;
				provisionButton.label = "Provisioning";
				if(embeddedProjectsList.length == numEmbCurrVerReceived)
				{
					checkForEmbeddedStackAndHandle();
				}else
				{
					//Loop in half second if not all embedded projects are ready
					setTimeout(provisionButton_clickHandler, 500);
				}
			}
			
			private function checkForEmbeddedStackAndHandle():void
			{
				if(embeddedProjectsList.length > 0)
				{
					var templatesToUploadArray:Array = new Array();
					for each(var emb:Object in embeddedProjectsList)
					{
						var params:Object = new Object();
						params["project_name"] = emb.projectName;
						params["bucket_name"] = emb.bucketName;
						params["project_template"] = emb.project.currentVersion.buildTemplate();
						templatesToUploadArray.push(params);
					}
					var projectsJsonEncoded:String = JSON.encode(templatesToUploadArray);
					createAndUploadEmbeddedProjects.setPost();
					createAndUploadEmbeddedProjects.send({projects_array: projectsJsonEncoded});
				}else
				{
					launchCFStack();
				}
			}
			
			protected function CreateAndUploadEmbeddedProjects_resultHandler(event:ResultEvent):void
			{
				launchCFStack();
			}
			
			private function launchCFStack():void
			{
				if(Helpers.validateAlphanumeric(stackNameTI.text) == false)
				{
					Alert.show(AlertMessage.NOTALPHANUMERIC_STACK_NAME, AlertMessage.INVALID);
					stackNameTI.setFocus();
					return;
				}
				var params:ArrayCollection = new ArrayCollection();
				if(this.templateInputs.parametersInputForm != null)
				{
					params = this.templateInputs.filledInputs();
				}
				
				if(params != null)
				{
					var paramKeys:Array = new Array();
					var paramValues:Array = new Array();
					for each(var param:Object in params)
					{
						paramKeys.push(param['parameterKey']);
						paramValues.push(param['parameterValue']);
					}
					
					if(project.currentProvisionedVersion == null)
					{
						cfService.createStack(stackNameTI.text, template, paramKeys, paramValues, templateInputs.notificationTopic, templateInputs.creationTimeout, templateInputs.disableRollback);
					}else{
						cfService.updateStack(stackNameTI.text, template, paramKeys, paramValues);
					}
				}else{
					Alert.show("All fields must be filled out");
					resetProvisionButton();
				}
			}

			protected function cancel_clickHandler(event:MouseEvent):void
			{
				PopUpManager.removePopUp(this);
			}
			
			protected function cfService_createCFStackResultHandler(event:CreateCFStackResultEvent):void
			{
				projectSvc.project = project;
				projectSvc.projectId = project.project_id;
				projectSvc.createProvisionedVersion(stackNameTI.text, version, environment);
				PopUpManager.removePopUp(this);
			}
			
			protected function resetProvisionButton(event:FaultEvent=null):void
			{
				provisionButton.enabled = true;
				provisionButton.label = "Provision";
			}
			
			protected function cfService_updateCFStackResultHandler(event:UpdateCFStackResultEvent):void
			{
				project.dispatchEvent(new Event(ProvisionedVersion.INSTANCES_UPDATED));
				PopUpManager.removePopUp(this);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<services:CloudFormationService id="cfService"
										cloudAccountId="{project.cloud_account.id}"
										region="{region}"
										createCFStackResult="cfService_createCFStackResultHandler(event)"
										updateCFStackResult="cfService_updateCFStackResultHandler(event)"
										createCFStackFault="resetProvisionButton(event)"
										updateCFStackFault="resetProvisionButton(event)"/>
		
		<services:CloudApiService id="createAndUploadEmbeddedProjects"
								  action="create_and_upload_embedded_projects"
								  cloudAccountId="{project.cloud_account.id}"
								  region="{region}"
								  serviceType="S3"
								  result="CreateAndUploadEmbeddedProjects_resultHandler(event)"/>	
	</fx:Declarations>
	<s:VGroup height="93%" width="100%">
		<s:HGroup paddingLeft="30">
			<s:FormItem id="stackNameFI"
						label="Stack Name:">
				<s:TextInput id="stackNameTI" width="444"/>
			</s:FormItem>
		</s:HGroup>
		<mx:ViewStack height="100%" width="100%" id="provisionManagerStack" creationPolicy="all" backgroundAlpha="0">
			<s:NavigatorContent height="100%" width="100%" id="templateInputsContent">
				<components:ProjectProvisionInputs id="templateInputs"
												   width="100%" height="100%"
												   cloudAccount="{project.cloud_account}"
												   region="{region}"/>
			</s:NavigatorContent>
		</mx:ViewStack>
	</s:VGroup>
	<s:Button id="provisionButton"
			  x="10" y="536" 
			  label="Provision"
			  click="provisionButton_clickHandler()"/>
	<s:Button x="719" y="536" 
			  label="Cancel" 
			  click="cancel_clickHandler(event)"/>
</s:TitleWindow>
