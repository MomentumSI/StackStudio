<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:c9="com.momentumsi.c9.components.*"
		 xmlns:diagrammer="fr.kapit.diagrammer.*" 
		 xmlns:visualizer="fr.kapit.visualizer.*"
		 width="400" height="300"
		 xmlns:components="fr.kapit.diagrammer.artifacts.components.*" xmlns:local="*">
	
	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.itemRenderers.NodeTooltipRenderer;
			import com.momentumsi.c9.components.rds.RdsBox;
			import com.momentumsi.c9.utils.Helpers;
			
			import flash.external.ExternalInterface;
			
			import flashx.textLayout.events.UpdateCompleteEvent;
			
			import fr.kapit.diagrammer.Diagrammer;
			import fr.kapit.diagrammer.actions.LinkAction;
			import fr.kapit.diagrammer.actions.ResizeAction;
			import fr.kapit.diagrammer.actions.data.LinkActionData;
			import fr.kapit.diagrammer.base.sprite.DiagramLink;
			import fr.kapit.diagrammer.base.uicomponent.DiagramSprite;
			import fr.kapit.diagrammer.controls.DiagramLinkController;
			import fr.kapit.diagrammer.events.DiagrammerEvent;
			import fr.kapit.diagrammer.events.DiagrammerRequestEvent;
			import fr.kapit.layouts.constants.EdgeDrawType;
			import fr.kapit.layouts.model.GraphItem;
			import fr.kapit.layouts.model.Node;
			import fr.kapit.visualizer.actions.MultiSelectionAction;
			import fr.kapit.visualizer.actions.PanAction;
			import fr.kapit.visualizer.actions.SelectionAction;
			import fr.kapit.visualizer.actions.ZoomAction;
			import fr.kapit.visualizer.actions.data.SelectionActionData;
			import fr.kapit.visualizer.actions.data.ZoomActionData;
			import fr.kapit.visualizer.base.IGroup;
			import fr.kapit.visualizer.base.ISprite;
			import fr.kapit.visualizer.base.uicomponent.GenericSprite;
			import fr.kapit.visualizer.decorators.sprite.*;
			import fr.kapit.visualizer.events.VisualizerEvent;
			import fr.kapit.visualizer.styles.LinkStyle;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.IUIComponent;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.DividerEvent;
			import mx.events.FlexEvent;
			import mx.events.StateChangeEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.mxml.HTTPService;
			
			import spark.components.Image;
			
			[Bindable]
			public var accountId:int;
			[Bindable]
			private var ec2ForSandboxItems:String = "";

			public function addNodeToWorkspace(x:int, y:int, cloudObject:XML):void
			{
				var p:Point = new Point(x, y);
				var node:DiagramSprite = DiagramSprite(sandboxVisual.addNodeElement(cloudObject, null, null, p));
				node.isSizeFixed = true;
				node.isFixed = false;
				if(cloudObject.name() == 'load-balancer')
				{
					node.prohibitLinkingTo = true;
				}
			}
			
			public function nodeRendererFunction(data:Object):ProgressNodeRenderer
			{
				var cloudObject:XML = XML(data);
				var renderer:ProgressNodeRenderer = new ProgressNodeRenderer();
				var state:String;
				if(cloudObject.name() == 'provisioned-rds-db-instance' || cloudObject.name() == 'provisioned-rds-read-replica')
				{
					renderer.label.text = data['name'];
					state = data.child('state');
					switch(state)
					{
						case "Running":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewDBRun.png";
							renderer.loader.visible = false;
							break;
						case "Launching":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewDBLaunch.png";
							break;
						case "Shutting-down":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewDBStop.png";
							break;
						case "Failed Launch":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewDBLaunchFailed.png";
							renderer.loader.visible = false;
							break;
						case "Terminated":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewDBTerminate.png";
							renderer.loader.visible = false;
							break;
						case "Failed shut-down":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewDBTerminateFailed.png";
							renderer.loader.visible = false;
							break;
					}
				}else if(data.name() == 'provisioned-load-balancer')
				{
					renderer.label.text = data['name'];
					state = data.child('state');
					switch(state)
					{
						case "Running":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewLBRun.png";
							renderer.loader.visible = false;
							break;
						case "Launching":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewLBLaunch.png";
							break;
						case "Shutting-down":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewLBStop.png";
							break;
						case "Failed Launch":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewLBLaunchFailed.png";
							renderer.loader.visible = false;
							break;
						case "Terminated":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewLBTerminate.png";
							renderer.loader.visible = false;
							break;
						case "Failed shut-down":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewLBTerminateFailed.png";
							renderer.loader.visible = false;
							break;
					}
				}else if(data.name() == 'provisioned-sqs-message')
				{
					renderer.label.text = data['name'];
					renderer.activityBar.visible = false;
					state = data.child('state');
					switch(state)
					{
						case "Running":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewMessageRun.png";
							renderer.loader.visible = false;
							break;
						case "Launching":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewMessageLaunch.png";
							break;
						case "Shutting-down":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewMessageStop.png";
							break;
						case "Failed Launch":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewMessageLaunchFailed.png";
							renderer.loader.visible = false;
							break;
						case "Terminated":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewMessageTerminate.png";
							renderer.loader.visible = false;
							break;
						case "Failed shut-down":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewMessageTerminateFailed.png";
							renderer.loader.visible = false;
							break;
					}
				}else if(cloudObject.name() == 'provisioned-elastic-beanstalk-app')
				{
					renderer.label.text = data['name'];
					renderer.activityBar.visible = false;
					state = data.child('state');
					switch(state)
					{
						case "Running":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewBeanstalkRun.png";
							renderer.loader.visible = false;
							break;
						case "Launching":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewBeanstalkLaunch.png";
							break;
						case "Shutting-down":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewBeanstalkStop.png";
							break;
						case "Failed Launch":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewBeanstalkLaunchFailed.png";
							renderer.loader.visible = false;
							break;
						case "Terminated":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewBeanstalkTerminate.png";
							renderer.loader.visible = false;
							break;
						case "Failed shut-down":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewBeanstalkTerminateFailed.png";
							renderer.loader.visible = false;
							break;
					}
				}else if(cloudObject.name() == 'provisioned-s3')
				{
					renderer.label.text = data['name'];
					renderer.activityBar.visible = false;
					state = data.child('state');
					switch(state)
					{
						case "Running":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewSimpleStorageRun.png";
							renderer.loader.visible = false;
							break;
						case "Launching":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewSimpleStorageLaunch.png";
							break;
						case "Shutting-down":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewSimpleStorageStop.png";
							break;
						case "Failed Launch":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewSimpleStorageLaunchFailed.png";
							renderer.loader.visible = false;
							break;
						case "Terminated":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewSimpleStorageTerminate.png";
							renderer.loader.visible = false;
							break;
						case "Failed shut-down":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewSimpleStorageTerminateFailed.png";
							renderer.loader.visible = false;
							break;
					}
				}else if(cloudObject.name() == 'provisioned-ebs-volume')
				{
					renderer.label.text = data['name'];
					renderer.activityBar.visible = false;
					state = data.child('state');
					switch(state)
					{
						case "Running":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewVolumeRun.png";
							renderer.loader.visible = false;
							break;
						case "Launching":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewVolumeLaunch.png";
							break;
						case "Shutting-down":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewVolumeStop.png";
							break;
						case "Failed Launch":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewVolumeLaunchFailed.png";
							renderer.loader.visible = false;
							break;
						case "Terminated":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewVolumeTerminate.png";
							renderer.loader.visible = false;
							break;
						case "Failed shut-down":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewVolumeTerminateFailed.png";
							renderer.loader.visible = false;
							break;
					}
				}else if(data.name() == 'provisioned-auto-scale-group')
				{
					renderer.label.text = data['name'];
					renderer.activityBar.visible = false;
					renderer.loader.visible = false;
					
					state = data.child('state');
					if(state == "Terminated")
					{
						renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewServerTerminate.png";
					}else{
						switch(data.child('scale-type').toString())
						{
							case 'autoRecovery':
								renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/Autorestart.png";
								break;
							case 'fixedArray':
								renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/Autoscale.png";
								break;
							case 'autoScale':
								renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/Autoscale.png";
								break;
						}
						if(data.child('scale-type').toString() == "none" || data.child('scale-type').toString() == "")
						{
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/Autoscale.png";
						}
					}
				}else if(data.name() == 'provisioned-ec2-instance')
				{
					renderer.label.text = data['name'];
					renderer.activityBar.visible = false;
					state = data.child('state');
					switch(state)
					{
						case "Running":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewServerRun.png";
							renderer.loader.visible = false;
							break;
						case "Launching":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewServerLaunch.png";
							break;
						case "Shutting-down":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewServerStop.png";
							break;
						case "Failed Launch":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewServerLaunchFailed.png";
							renderer.loader.visible = false;
							break;
						case "Terminated":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewServerTerminate.png";
							renderer.loader.visible = false;
							break;
						case "Failed shut-down":
							renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewServerTerminateFailed.png";
							renderer.loader.visible = false;
							break;
					}
				}else if(data == "New Load Balancer")
				{
					renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewLB.png";
					renderer.label.text = 'New LB';
					renderer.loader.visible = false;
				}else if(data == 'New Relational Database')
				{
					renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewDB.png";
					renderer.label.text = 'New DB';
					renderer.loader.visible = false;
				}else if(data == "New Beanstalk Application")
				{
					renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewBeanstalk.png";
					renderer.label.text = 'New Beanstalk Application';
					renderer.loader.visible = false;
				}else if(data == 'Blank Image')
				{
					renderer.image.source = "/com/momentumsi/c9/assets/logo_ec2_image.PNG";
					renderer.label.text = 'New Image';
					renderer.loader.visible = false;
				}else if(data == 'New Message Queue')
				{
					renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewMessage.png";
					renderer.label.text = 'New Message';
					renderer.loader.visible = false;
				}else if(data == 'New Simple Storage')
				{
					renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewSimpleStorage.png";
					renderer.label.text = 'New Simple Storage';
					renderer.loader.visible = false;
				}else if(data == "New Volume")
				{
					renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewVolume.png";
					renderer.label.text = 'New Volume';
					renderer.loader.visible = false;
				}else if(data == 'New External Object')
				{
					renderer.image.source = "/com/momentumsi/c9/assets/generic.png";
					renderer.label.text = 'New External Object';
					renderer.loader.visible = false;
				}else if(data == 'Windows Template')
				{
					renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewBasicServer.png";
					renderer.label.text = "New Windows Image";
					renderer.loader.visible = false;
				}else if(data == 'Compute Service')
				{
					renderer.image.source = "/com/momentumsi/c9/assets/IconPNGs/NewBasicServer.png";
					renderer.label.text = "New Linux Image";
					renderer.loader.visible = false;
				}else if(data == 'Firewall')
				{
					renderer.image.source = "/com/momentumsi/c9/assets/firewall.png";
					renderer.label.text = "Firewall";
					renderer.loader.visible = false;
				}else{
					Alert.show("Unsupported at this time.");
					return null;
				}
				
				//Visible set as false because monitoring is not yet implemented against private services
				renderer.activityBar.visible = false;
				renderer.data = data;
				return renderer;
			}
			
			public function nodeDataExportFunction(data:Object):XML
			{
				var node:XML = XML(data);
				return node;
			}			
			
			protected function sandboxVisual_doubleClickHandler(event:MouseEvent):void
			{
				accountId = Helpers.currentAccount(this);
				var data:Object = event.target.parentDocument.data;
				var node:DiagramSprite = event.target.parentDocument.item;
				if(data is XML)
				{
					if(data.name() == 'rds-db-instance')
					{
						
					}else if(data.name() == 'ec2-instance')
					{
						
					}else if(data.name() == 'load-balancer')
					{
					}else if (data.name() == 'external-object')
					{
						
					}else if (data.name() == 'sqs-message')
					{
						
					}else if (data.name() == 's3')
					{
						
					}else if (data.name() == 'elastic-beanstalk-app')
					{
						
					}else if (data.name() == 'ebs-volume')
					{
						
					}else if (data == 'New Load Balancer')
					{

					}else if(data == 'New Relational Database')
					{
						
					}else if(data == 'New Beanstalk Application')
					{
						
					}else if(data == 'Windows Template' || data == 'Compute Service')
					{

					}else if(data == 'New Message Queue')
					{
						
					}else if(data == 'New Simple Storage')
					{
						
					}else if(data == 'New Volume')
					{
						
					}else if(data == 'New External Object')
					{
						
					}
				}
			}
			/*
			public function getSandboxAccounts():void
			{
				getCurrentUserAccounts.send();
			}
			
			protected function getCurrentUserAccounts_resultHandler(event:ResultEvent):void
			{
				var result:XML = event.result as XML;
				var mainBox:MainBox = Helpers.getMainBox(this);
				var cloudId:String = "";
				var cloudAbbr:String = Helpers.currentCloud(this);
				switch(cloudAbbr)
				{
					case "AWS":
						cloudId = "1";
						break;
					case "EUC":
						cloudId = "2";
						break;
					case "OS":
						cloudId = "3";
						break;
				}
				
				var found:Boolean = false;
				mainBox.ec2AccountCollection.removeAll();
				for each(var account:XML in result.children())
				{
					var accountObject:Object = new Object();
					accountObject.label = account.child('account-name').toString();
					accountObject.ec2Id = account.child('id').toString();
					mainBox.ec2AccountCollection.addItem(accountObject);
					if(cloudId == account.child('cloud-id').toString() && found == false)
					{
						mainBox.sandboxCloudAccount.selectedIndex = mainBox.ec2AccountCollection.length - 1;
						found = true;
					}
				}
				if(mainBox.ec2AccountCollection.length > 0)
				{
					getSandboxItems();
				}
			}
			
			public function getSandboxItems():void
			{
				sandboxVisual.removeAll();
				var mainBox:MainBox = Helpers.getMainBox(this);
				ec2ForSandboxItems = mainBox.sandboxCloudAccount.selectedItem.ec2Id;
				if(ec2ForSandboxItems != "")
				{
					getSandboxItemsSvc.send();
				}
			}

			protected function getSandboxItems_resultHandler(event:ResultEvent):void
			{
				var result:XML = event.result as XML;
				var x:Number = 50;
				var y:Number = 25;
				var index:Number = 1;
				for each(var cloudObjectArray:XML in result.children())
				{
					for each(var cloudObject:XML in cloudObjectArray.children())
					{
						var p:Point = new Point(x, y);
						var newNode:DiagramSprite = sandboxVisual.addNodeElement(cloudObject, null, null, p) as DiagramSprite;
						newNode.isSizeFixed = true;
						if((index%8) == 0)
						{
							x = x + 100;
							y = 25;
						}else
						{
							y = y + 100;
						}
						index++;
					}
				}
			}
			*/
			
			protected function nodeTooltipRendererFunction(data:Object):DisplayObject
			{
				var tooltipRenderer:NodeTooltipRenderer = new NodeTooltipRenderer();
				if(data.name() == 'provisioned-rds-db-instance')
				{
					tooltipRenderer.tooltipContent ="Relational Database" + "\n" + 
						"DB: " + data.child('rds-engine') + " " + data.child('rds-db-engine-version') + "\n" +
						"Class: " + data.child('rds-db-instance-class') + "\n" +
						"Storage: " + data.child('rds-allocated-storage') + " GB" + "\n" +
						"Avail. Zone: " + data.child('availability-zone') + "\n" +
						"Endpoint IP: " + data.child('endpoint-address');
				}else if(data.name() == 'provisioned-rds-read-replica')
				{
					tooltipRenderer.tooltipContent ="Relational Database Read Replica" + "\n" + 
						"DB: " + data.child('rds-engine') + " " + data.child('rds-db-engine-version') + "\n" +
						"Class: " + data.child('rds-db-instance-class') + "\n" +
						"Storage: " + data.child('rds-allocated-storage') + " GB" + "\n" +
						"Avail. Zone: " + data.child('availability-zone');
				}else if(data.name() == 'provisioned-load-balancer')
				{
					tooltipRenderer.tooltipContent ="Load Balancer" + "\n" + 
						"Avail. Zone: " + data.child('availability-zone') + "\n" +
						"IP: " + data.child('dns-name');
				}else if(data.name() == 'provisioned-sqs-message')
				{
					tooltipRenderer.tooltipContent ="Message Queue" + "\n" + 
						"Name: " + data.child('name') + "\n" +
						"Timeout: " + data.child('visibility-timeout') + "\n" +
						"Max Msg Size: " + data.child('max-message-size') + "\n" +
						"Msg Retention: " + data.child('retention-period');
				}else if(data.name() == 'provisioned-elastic-beanstalk-app')
				{
					tooltipRenderer.tooltipContent ="Elastic Beanstalk" + "\n" + 
						"Name: " + data.child('name');
				}else if(data.name() == 'provisioned-s3')
				{
					tooltipRenderer.tooltipContent ="S3 Bucket" + "\n" + 
						"Name: " + data.child('name');
				}else if(data.name() == 'provisioned-ebs-volume')
				{
					tooltipRenderer.tooltipContent ="EBS Volume" + "\n" +  
						"ID: " + data.child('ebs-id') + "\n" +
						"Status: " + data.child('status') + "\n" +
						"Size: " + data.child('size') + " GB";
				}else if(data.name() == 'provisioned-ec2-instance')
				{
					tooltipRenderer.tooltipContent ="EC2 Instance" + "\n" + 
						"Instance Id: " + data.child('instance-id') + "\n" +
						"Avail. Zone: " + data.child('availability-zone') + "\n" +
						"IP: "+ data.child('dns-name') + "\n" +
						"Image Id: " + data.child('machine-id');
				}else if(data.name() == 'provisioned-auto-scale-group')
				{
					if(data.child('scale-type').toString() == 'autoRecovery')
					{
						tooltipRenderer.tooltipContent ="Auto Recovery" + "\n" + 
							"Name: " + data.child('name') + "\n" +
							"Avail. Zone: " + data.child('availability-zone');
					}
					else if(data.child('scale-type').toString() == 'fixedArray')
					{
						tooltipRenderer.tooltipContent ="Fixed Array" + "\n" + 
							"Name: " + data.child('name') + "\n" +
							"Avail. Zone: " + data.child('availability-zone') + "\n" +
							"Size: " + data.child('min-size');
					}
					else if(data.child('scale-type').toString() == 'autoScale')
					{
						tooltipRenderer.tooltipContent ="Auto Scale" + "\n" + 
							"Name: " + data.child('name') + "\n" +
							"Avail. Zone: " + data.child('availability-zone') + "\n" +
							"Min Size: " + data.child('min-size') + "\n" +
							"Max Size: " + data.child('max-size');
					}else
					{
						tooltipRenderer.tooltipContent ="Auto Scale" + "\n" + 
							"Name: " + data.child('name') + "\n" +
							"Desired Capacity: " + data.child('desired-capacity') + "\n" +
							"Min Size: " + data.child('min-size') + "\n" +
							"Max Size: " + data.child('max-size');
					}
				}else if(data.name() == 'external-object')
				{
					tooltipRenderer.tooltipContent ="External Object" + "\n" + 
						"Name: " + data.child('name') + "\n" +
						"Description: " + data.child('description') + "\n" +
						"Ports: " + data.child('object-ports');
				}else
					tooltipRenderer.visible = false;
				return tooltipRenderer;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!--
		<s:HTTPService id="getCurrentUserAccounts"
					   url="{Helpers.getHost()}/user/get_user_accounts"
					   method="GET"
					   resultFormat="e4x"
					   showBusyCursor="true"
					   result="getCurrentUserAccounts_resultHandler(event)"/>
		
		<s:HTTPService id="getSandboxItemsSvc"
					   url="{Helpers.getHost()}/ec2_accounts/get_sandbox_items/{ec2ForSandboxItems}.xml"
					   method="GET"
					   resultFormat="e4x"
				 	   showBusyCursor="true"
					   result="getSandboxItems_resultHandler(event)"/>
		-->
	</fx:Declarations>
	
	<mx:HDividedBox id="workspace" 
					height="100%" 
					width="100%" 
					backgroundColor="gray">
		<s:Group width="100%" height="100%" id="sandboxDiagram">
			<s:Rect width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="white"/>
				</s:fill>
			</s:Rect>
			<s:VGroup height="100%" width="100%">
				<diagrammer:Diagrammer id="sandboxVisual" width="100%" height="100%" 
									   top="30"
									   layout="balloon"
									   doubleClick="sandboxVisual_doubleClickHandler(event)"
									   nodeRendererFunction="{nodeRendererFunction}"
									   nodeRendererDataSource="null"
									   nodeExpandPolicy="fixNode"
									   groupLabelField="label"
									   enablePan="false"
									   nodeExportDataFunction="{nodeDataExportFunction}"
									   nodeTooltipRendererFunction="{nodeTooltipRendererFunction}"/>
			</s:VGroup>
		</s:Group>
		
	</mx:HDividedBox>
	
	
</s:Group>
