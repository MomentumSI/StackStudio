<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 	   xmlns:s="library://ns.adobe.com/flex/spark" 
		 	   xmlns:mx="library://ns.adobe.com/flex/mx" 
		 	   width="500" height="400"
			   title="Manage Project Users"
			   creationComplete="creationCompleteHandler(event)"
			   move="Helpers.doMove(this)"
			   close="closeHandler(event)" xmlns:services="com.momentumsi.c9.services.*">
	
	<fx:Metadata>
		[Event(name="usersSet", type="flash.events.Event")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.events.ProjectEvent;
			import com.momentumsi.c9.models.Account;
			import com.momentumsi.c9.models.Member;
			import com.momentumsi.c9.models.Project;
			import com.momentumsi.c9.models.User;
			import com.momentumsi.c9.utils.Helpers;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]
			public var user:User;
			[Bindable]
			public var project:Project;
			[Bindable]
			public var nonProjectUsersCollection:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var projectUsersCollection:ArrayCollection = new ArrayCollection();
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				PopUpManager.centerPopUp(this);
				if(user != null && user.org_id != null)
				{
					orgService.getOrgDetails(user.org_id);
				}
			}
			
			protected function orgService_resultHandler(event:ResultEvent):void
			{
				refreshUserLists();
			}
			
			protected function refreshUserLists():void
			{
				if(project != null && project.members != null)
				{
					var accounts:Array = new Array();
					if(orgService.result.org.accounts != null)
					{
						accounts = orgService.result.org.accounts;
					}
					nonProjectUsersCollection.removeAll();
					projectUsersCollection.removeAll();
					var member:Member;
					for each(var a:Object in accounts)
					{
						var u:User = User.buildUser(a.account);
						if(u != null)
						{
							member = project.findUserAsMember(u.id);
							if(member == null)
							{
								nonProjectUsersCollection.addItem(u);
							}else
							{
								projectUsersCollection.addItem(u);
							}
						}
					}
				}
			}
			
			protected function addUsersToProject_clickHandler(event:MouseEvent):void
			{
				if(nonProjectUsersList.selectedIndex != -1)
				{
					var member:Member = new Member();
					member.account = User(nonProjectUsersList.selectedItem);
					member.role = "member";
					project.addEventListener(ProjectEvent.PROJECT_RESULT, changeUsers_resultHandler);
					project.addNewMember(member);
				}
			}
			
			protected function changeUsers_resultHandler(event:Event=null):void
			{
				project.removeEventListener(ProjectEvent.PROJECT_RESULT, changeUsers_resultHandler);
				refreshUserLists();
			}
			
			protected function removeUsersFromProject_clickHandler(event:MouseEvent):void
			{
				if(projectUsersList.selectedIndex != -1)
				{
					if(User(projectUsersList.selectedItem).id == user.id)
					{
						Alert.show("You may not remove yourself from the project at this time.");
					}else
					{
						var selectedUser:User = User(projectUsersList.selectedItem);
						var selectedMember:Member = project.findUserAsMember(selectedUser.id);
						project.addEventListener(ProjectEvent.PROJECT_RESULT, changeUsers_resultHandler);
						project.deleteMember(selectedMember.id);
					}
				}
			}

			
			protected function closeHandler(event:CloseEvent=null):void
			{
				dispatchEvent(new Event("usersSet"));
				PopUpManager.removePopUp(this);
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<services:OrgService id="orgService"
							 result="orgService_resultHandler(event)"/>
	</fx:Declarations>
	
	<s:VGroup width="100%" height="90%" paddingTop="10" paddingLeft="20" paddingRight="20" paddingBottom="10">
		<s:HGroup width="100%" height="100%">
			<s:VGroup width="100%" height="100%">
				<mx:Text text="Non Project Users" fontWeight="bold"/>
				<s:BorderContainer cornerRadius="4" height="100%" width="100%">
					<s:Rect width="100%" height="100%">
						<s:fill>
							<s:SolidColor>
								<s:color>0x330066</s:color>
							</s:SolidColor>
						</s:fill>
					</s:Rect>
					<s:List id="nonProjectUsersList"
						 	labelField="login"
						 	dataProvider="{nonProjectUsersCollection}"
							styleName="transparentList"
							height="100%" width="100%" 
							color="white"/>
				</s:BorderContainer>
			</s:VGroup>
			<s:VGroup height="100%" verticalAlign="middle">
				<s:Button id="addUsersToProject" label="&gt;&gt;" width="38" click="addUsersToProject_clickHandler(event)" toolTip="Add user to project."/>
				<s:Button id="removeUsersFromProject" label="&lt;&lt;" width="38" click="removeUsersFromProject_clickHandler(event)" toolTip="Remove user from project."/>
			</s:VGroup>
			<s:VGroup width="100%" height="100%">
				<mx:Text text="Project Users" fontWeight="bold"/>
				<s:BorderContainer cornerRadius="4" height="100%" width="100%">
					<s:Rect width="100%" height="100%">
						<s:fill>
							<s:SolidColor>
								<s:color>0x330066</s:color>
							</s:SolidColor>
						</s:fill>
					</s:Rect>
					<s:List id="projectUsersList"
							labelField="login"
							dataProvider="{projectUsersCollection}"
							styleName="transparentList"
							height="100%" width="100%" 
							color="white"/>
				</s:BorderContainer>
			</s:VGroup>
		</s:HGroup>
	</s:VGroup>
	<s:Button id="closeButton" x="215" y="337" label="Close" click="closeHandler()"/>
</s:TitleWindow>
