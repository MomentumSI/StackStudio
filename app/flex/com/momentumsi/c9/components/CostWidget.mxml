<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer   xmlns:fx="http://ns.adobe.com/mxml/2009" 
					 xmlns:s="library://ns.adobe.com/flex/spark" 
					 xmlns:mx="library://ns.adobe.com/flex/mx"
					 width="100%" height="100%"
					 creationComplete="creationCompleteHandler(event)" 
					 xmlns:services="com.momentumsi.c9.services.*">
	<s:backgroundFill>
		<s:SolidColor color="{Color.PURPLE}"/>
	</s:backgroundFill>
	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.constants.Color;
			import com.momentumsi.c9.constants.ResourceType;
			import com.momentumsi.c9.models.CloudAccount;
			import com.momentumsi.c9.models.Element;
			import com.momentumsi.c9.models.ProjectVersion;
			import com.momentumsi.c9.models.resources.Ec2Instance;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			[Bindable]
			private var estimatedTotalCost:Number = 0;
			[Bindable]
			private var resourceList:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var cloudAccount:CloudAccount;
			[Bindable]
			public var projectVersion:ProjectVersion;
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				if(cloudAccount != null)
				{
					costService.getCloudPrices(cloudAccount.cloud_id);
				}
			}
			
			protected function costService_pricesLoadedHandler(event:Event):void
			{
				refreshCostWidget();
				if(projectVersion != null)
				{
					projectVersion.addEventListener(ProjectVersion.REFRESH, projectVersionRefreshHandler);	
				}
			}
			
			private function projectVersionRefreshHandler(event:Event):void
			{
				refreshCostWidget();
			}
			
			public function refreshCostWidget():void
			{
				if(projectVersion == null)
				{
					return;
				}
				resourceList.removeAll();
				for each(var element:Element in projectVersion.elements)
				{
					switch(element.elementType)
					{
						case ResourceType.EC2_INSTANCE:
							resourceList.addItem(costService.generateEc2PriceObject(element));
							if(element.properties["Properties"].hasOwnProperty("Monitoring") && element.properties["Properties"]["Monitoring"] == "true")
							{
								resourceList.addItem(costService.generateEc2MonitorPriceObject(element));
							}
							break;
						case ResourceType.CACHE_CLUSTER:
							resourceList.addItem(costService.generateElcPriceObject(element));
							break;
						case ResourceType.DB_INSTANCE:
							resourceList.addItem(costService.generateRdsPriceObject(element));
							resourceList.addItem(costService.generateRdsStoragePriceObject(element));
							break;
						case ResourceType.LOAD_BALANCER:
							resourceList.addItem(costService.generateElbPriceObject(element));
							break;
						case ResourceType.CW_ALARM:
							resourceList.addItem(costService.generateAlarmPriceObject(element));
							break;
						case ResourceType.EBS_VOLUME:
							resourceList.addItem(costService.generateEbsPriceObject(element));
							if(element.properties["Properties"].hasOwnProperty("Iops"))
							{
								resourceList.addItem(costService.generateEbsIopsPriceObject(element));
							}
							break;
						case ResourceType.S3_BUCKET:
							resourceList.addItem(costService.generateS3PriceObject(element));
							break;
						case ResourceType.BEANSTALK_APP:
							break;
						case ResourceType.AS_GROUP:
							var lcName:String;
							if(element.properties.Properties.LaunchConfigurationName is String)
							{
								lcName = element.properties.Properties.LaunchConfigurationName;
							}else{
								lcName = element.properties.Properties.LaunchConfigurationName.Ref;
							}
							var launchConfig:Element = projectVersion.getElementByName(lcName)
							resourceList.addItem(costService.generateAsPriceObject(element, launchConfig));
							if(launchConfig.properties["Properties"].hasOwnProperty("InstanceMonitoring"))
							{
								if(element.properties["Properties"]["InstanceMonitoring"] == "true")
								{
									resourceList.addItem(costService.generateAsMonitorPriceObject(element, launchConfig));
								}
							}else
							{
								resourceList.addItem(costService.generateAsMonitorPriceObject(element, launchConfig));
							}
							break;
					}
				}
				
				sumMonthlyCost();
			}
			
			protected function sumMonthlyCost():void
			{
				estimatedTotalCost = 0;
				for each(var priceObject:Object in resourceList)
				{
					if(priceObject.hasOwnProperty('monthlyCost'))
					{
						estimatedTotalCost = estimatedTotalCost + priceObject.monthlyCost;
					}
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<services:CostService id="costService"
							  cloudAccountId="{cloudAccount.id}"
							  projectVersion="{projectVersion}"
							  pricesLoaded="costService_pricesLoadedHandler(event)"/>
	</fx:Declarations>
	<s:VGroup height="100%" width="100%">
		<s:DataGrid id="resources" width="100%" height="100%" selectionMode="none" dataProvider="{resourceList}" fontSize="10">
			<s:columns>
				<s:ArrayList id="resourceGridColumns">
					<s:GridColumn headerText="Resource" dataField="resource"/>
					<s:GridColumn headerText="Value" dataField="value"/>
					<s:GridColumn headerText="Fee" dataField="fee"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
		<s:HGroup width="100%" paddingTop="5" paddingBottom="5">
			<mx:Text text="Est. Stack cost per" color="white" width="66.6%"/>
			<s:Line height="100%">
				<s:stroke>
					<s:SolidColorStroke color="white" weight="1"/>
				</s:stroke>
			</s:Line>
			<mx:Text text="USD" color="white" width="33.3%"/>
		</s:HGroup>
		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke color="white" weight="1"/>
			</s:stroke>
		</s:Line>
		<s:HGroup width="100%" paddingBottom="5">
			<mx:Text text="Month" color="white" width="66.6%"/>
			<s:Line height="100%">
				<s:stroke>
					<s:SolidColorStroke color="white" weight="1"/>
				</s:stroke>
			</s:Line>
			<mx:Text text="${estimatedTotalCost.toFixed(2)}" color="white" width="33.3%"/>
		</s:HGroup>
	</s:VGroup>
</s:BorderContainer>
