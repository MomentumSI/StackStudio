<?xml version="1.0" encoding="utf-8"?>
<mx:ViewStack xmlns:fx="http://ns.adobe.com/mxml/2009" 
			  xmlns:s="library://ns.adobe.com/flex/spark" 
			  xmlns:mx="library://ns.adobe.com/flex/mx"
			  xmlns:c9="com.momentumsi.c9.components.*"
			  selectedIndex="1"
			  width="100%" height="100%"
			  backgroundColor="#A7A9AD"
			  backgroundSize="100%" xmlns:ns="http://code.google.com/p/flexlib/" xmlns:services="com.momentumsi.c9.services.*">

    <fx:Metadata>
        [Event(
            name="accountCreate",
            type="com.momentumsi.c9.events.AccountCreateEvent")]
        [Event(
            name="login",
            type="com.momentumsi.c9.events.LoginEvent")]
    </fx:Metadata>

	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.constants.AlertMessage;
			import com.momentumsi.c9.events.ProjectEvent;
			import com.momentumsi.c9.models.Member;
			import com.momentumsi.c9.models.Project;
			import com.momentumsi.c9.models.User;
			import com.momentumsi.c9.services.ProjectService;
			import com.momentumsi.c9.utils.Helpers;
			
			import flash.utils.setTimeout;
			
			import flexlib.controls.tabBarClasses.SuperTab;
			import flexlib.events.SuperTabEvent;
			
			import mx.collections.ArrayCollection;
			import mx.containers.Box;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.ChildExistenceChangedEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			public var selectedWorkspace:MainBox;
			public var headerBoxReference:HeaderBox;
			public var openedProjects:ArrayCollection = new ArrayCollection();
			public var newProject:NewProject;
			public var openProject:ProjectsOpenPopUp;
			public var removeAndDelete:Boolean = false;
			public var loadingFromStackPlace:Boolean = false;
			
			private var topologyContent:Box;
			[Bindable]
			public var user:User;
			[Bindable]
			private var initialTabCount:int;
			
			protected function globalTabs_creationCompleteHandler(event:FlexEvent):void
			{
				if(landingBox != null)
				{
					if(landingBox.loginBox.newAccountBox != null){
						PopUpManager.removePopUp(landingBox.loginBox.newAccountBox);
					}
				}
				initialTabCount = globalTabs.length;
				for(var i:int = 0; i < initialTabCount; i++)
				{
					globalTabs.setClosePolicyForTab(i, SuperTab.CLOSE_NEVER);
				}	
			}
			
			public function closeProjectTab(projectId:String=null):void
			{
				//If project is open, close project				
				if(globalTabs.length > 2)
				{
					var projectTab:ProjectTab;
					if(projectId != null)
					{
						for(var index:int = initialTabCount; index < globalTabs.length; index++)
						{
							projectTab = globalTabs.getItemAt(index) as ProjectTab;
							projectTab.workbenchSpace.runningView.cancelRequests();
							if(projectTab.project.project_id == projectId)
							{
								globalTabs.removeElementAt(index);
								return;
							}							
						}
							
					}else{
						projectTab = globalTabs.getItemAt(globalTabs.selectedIndex) as ProjectTab;
						projectTab.workbenchSpace.runningView.cancelRequests();
						globalTabs.removeElementAt(globalTabs.selectedIndex);
					}						
				}
				
				if(globalTabs.length == 2){
					globalTabs.selectedChild = welcomeDashboardContent;
					headerBoxReference = parentApplication.headerBox;
				}
			}
			
			protected function globalTabs_tabCloseHandler(event:SuperTabEvent):void
			{
				var projectTab:ProjectTab = globalTabs.getItemAt(event.tabIndex) as ProjectTab;
				projectTab.workbenchSpace.runningView.cancelRequests();
			}
			
			public function newProjectToGlobalTabs(project:Project):void
			{
				user.project_memberships.addItem(project);
				var newProjectTab:ProjectTab = new ProjectTab();
				newProjectTab.user = user;
				newProjectTab.project = project;
				globalTabs.addElement(newProjectTab);
			}
			
			public function addProjectToGlobalTabs(project:Project):Boolean
			{
				var children:Array = globalTabs.getChildren();
				var selectProjectTab:ProjectTab = null;
				var found:Boolean = false;
				for each(var tab:* in children)
				{
					if(tab is ProjectTab && tab.project.project_id == project.project_id)
					{
						found = true;
						selectProjectTab = tab;
					}
				}
				
				if(found)
				{
					globalTabs.selectedChild = selectProjectTab;
					return false;
				}else
				{
					project.addEventListener(ProjectEvent.PROJECT_RESULT, project_openHandler);
					project.open(user.id);
					return true;
				}
			}
			
			private function project_openHandler(event:ProjectEvent):void
			{
				if(event.project != null)
				{
					event.project.removeEventListener(ProjectEvent.PROJECT_RESULT, project_openHandler);
					var newProjectTab:ProjectTab = new ProjectTab();
					newProjectTab.user = user;
					newProjectTab.project = event.project;
					globalTabs.addElement(newProjectTab);
				}
			}
			
			public function deleteProjectCheck(project:Project):void
			{
				if(project.userIsProjectAdmin(user.id))
				{
					closeProjectTab(project.project_id);
					var projectService:ProjectService = new ProjectService();
					projectService.projectId = project.project_id;
					projectService.deleteProject();
					for(var i:int = 0; i < user.project_memberships.length; i++)
					{
						if(Project(user.project_memberships[i]).project_id == project.project_id)
						{
							user.project_memberships.removeItemAt(i);
						}
					}
				}else
				{
					Alert.show(AlertMessage.PERMISSION_DENIED);
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
	</fx:Declarations>
	
	<s:NavigatorContent id="landingBoxContent" width="100%" height="100%" visible="false" includeInLayout="false">
	    <s:HGroup height="100%" width="100%" verticalAlign="middle" horizontalAlign="center" visible="false" includeInLayout="false">
				<c9:LandingBox id="landingBox" visible="false" includeInLayout="false"/>
		</s:HGroup>
	</s:NavigatorContent>
	<ns:SuperTabNavigator id="globalTabs" height="100%" width="100%" creationPolicy="all" creationComplete="globalTabs_creationCompleteHandler(event)" tabClose="globalTabs_tabCloseHandler(event)">
		<mx:Box label="Dashboard" id="welcomeDashboardContent" creationPolicy="all" width="100%" height="100%" enabled="{!this.parentApplication.headerBox.readOnly}">
			<s:BorderContainer borderVisible="false" height="100%" width="100%">
				<s:Rect width="100%" height="100%">
					<s:fill>
						<s:SolidColor>
							<s:color>0xFFFFFF</s:color>
						</s:SolidColor>
					</s:fill>
				</s:Rect>
				<c9:WelcomeDashboard id="welcomeDashboard" 
									 readOnly="{this.parentApplication.headerBox.readOnly}"
									 user="{user}"/>
			</s:BorderContainer>
		</mx:Box>
		<mx:Box id="objectManagementContent" creationPolicy="all"
				label="Cloud Management" height="100%" width="100%" 
				enabled="{!this.parentApplication.headerBox.readOnly}">
			<c9:ObjectManagementTab id="objectManagement" 
									  readOnly="{this.parentApplication.headerBox.readOnly}"
									  user="@{user}"/>
		</mx:Box>
	</ns:SuperTabNavigator>
</mx:ViewStack>