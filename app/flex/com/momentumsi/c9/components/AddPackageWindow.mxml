<?xml version="1.0" encoding="utf-8"?>
<components:CustomTitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
							  xmlns:s="library://ns.adobe.com/flex/spark"
							  xmlns:mx="library://ns.adobe.com/flex/mx"
							  xmlns:components="com.momentumsi.c9.components.*"
							  width="574" height="324"
							  title="Add Package">

	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.models.resources.CFInit;
			import com.momentumsi.c9.models.resources.cfInit.Package;
			
			import mx.collections.ArrayCollection;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.events.IndexChangeEvent;
			
			private var packageItem:Package = new Package();
			[Bindable]
			public var existingPackages:ArrayCollection;
			[Bindable]
			private var selectedManagerExistingPackages:ArrayCollection = new ArrayCollection();
			
			protected function cancelButton_clickHandler(event:MouseEvent):void
			{
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}
			
			protected function saveButton_clickHandler(event:MouseEvent):void
			{
				packageItem.packageManager = packageManagerDDL.selectedItem.label;
				//Remove all spaces from versions text input
				var versionsString:String = versionsTI.text.replace(/\s/g, "");
				var versionsArray:Array = versionsTI.text.split(",");
				if(versionsString != "")
				{
					packageItem.versions = new ArrayCollection(versionsArray); 
				}else{
					packageItem.versions = new ArrayCollection;
				}
				packageItem.selected = true;
				if(existingPackageRB.selected)
				{
					//Update package by replacing with new object
					packageItem.install = (existingPackagesDDL.selectedItem as Package).install;
					var itemIndex:int = existingPackages.getItemIndex(existingPackagesDDL.selectedItem);
					existingPackages.setItemAt(packageItem, itemIndex);
				}else{
					//Add new pacakge to collection
					packageItem.install = newPackageTI.text;
					existingPackages.addItem(packageItem);
				}
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}
			
			//Only display pacakges from the selected package manager
			protected function packageManagerDDL_changeHandler(event:IndexChangeEvent):void
			{
				var type:String = packageManagerDDL.selectedItem.label;
				selectedManagerExistingPackages.removeAll();
				for each(var item:Package in existingPackages)
				{
					if(item.packageManager == type)
					{
						selectedManagerExistingPackages.addItem(item);
					}
				}
				if(selectedManagerExistingPackages.length == 0)
				{
					existingPackagesDDL.prompt = "None"
				}else{
					existingPackagesDDL.prompt = "Select Package"
				}
			}
			
			protected function existingPackagesDDL_changeHandler(event:IndexChangeEvent):void
			{
				var selectedPackage:Package = existingPackagesDDL.selectedItem as Package;
				var versions:Array = selectedPackage.versions.source;
				versionsTI.text = versions.join(", ");
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Form id="newPackageForm"
			defaultButton="{saveButton}"
			x="10" y="10" 
			width="517">
		<s:Label id="formDescriptionLabel" width="494" text="Start by selectig the package manager you wish to add to.  Then, select from an existing package if you are only adding new versions, or enter a new package name to add."/>
		<s:FormItem label="Manager:">
			<s:DropDownList id="packageManagerDDL" width="136"
							change="packageManagerDDL_changeHandler(event)"
							dataProvider="{CFInit.PACKAGES}" labelField="label"
							prompt="Select Manager">
			</s:DropDownList>
		</s:FormItem>
		<s:FormItem id="packageFI"
					label="Package:"
					enabled="{packageManagerDDL.selectedItem != null}">
			<s:HGroup>
				<s:RadioButton id="newPackageRB"
							   selected="true"
							   label="New:"/>
				<s:TextInput id="newPackageTI" 
							 width="278"
							 enabled="{newPackageRB.selected}"
							 prompt="new package name"/>
				<components:HelperIcon toolTip="Add a new package to be installed during the bootstrap process.  New packages are not guaranteed to be installed because they are not validated until the bootstrap occurs."/>
			</s:HGroup>
			<s:HGroup id="existingPackagesHG"
					  enabled="{selectedManagerExistingPackages.length > 0}">
				<s:RadioButton id="existingPackageRB"
							   label="Existing:"/>
				<s:DropDownList id="existingPackagesDDL" 
								width="259"
								labelField="install"
								enabled="{existingPackageRB.selected}"
								change="existingPackagesDDL_changeHandler(event)"
								dataProvider="{selectedManagerExistingPackages}"/>
				<components:HelperIcon toolTip="Select an existing install package to edit the list of versions to use."/>
			</s:HGroup>
		</s:FormItem>
		<s:FormItem id="versionsFI"
					label="Versions:"
					enabled="{packageManagerDDL.selectedItem != null}">
			<s:helpContent>
				<s:VGroup>
					<s:Label id="versionsFIHelpContent"
							 text="Must be a comma separated list."></s:Label>
				</s:VGroup>
			</s:helpContent>
			<s:TextInput id="versionsTI" 
						 prompt="optional"
						 width="224"/>
		</s:FormItem>
	</s:Form>
	<s:HGroup x="0" y="261" width="100%" horizontalAlign="right" paddingLeft="10" paddingRight="10"
			  textAlign="left" variableColumnWidth="false" verticalAlign="middle">
		<s:Button id="saveButton" label="Save" click="saveButton_clickHandler(event)"/>
		<s:Button id="cancelButton" label="Cancel" click="cancelButton_clickHandler(event)"/>
	</s:HGroup>
</components:CustomTitleWindow>
