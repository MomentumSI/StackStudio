<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:c9="com.momentumsi.c9.components.*"
		 xmlns:stackstudio="services.stackstudio.*"
		 width="100%" height="100%"
		 creationComplete="creationCompleteHandler(event)"
		 xmlns:models="com.momentumsi.c9.models.*">
	<fx:Metadata>
		[Event(name="projectCreate", type="com.momentumsi.c9.events.ProjectEvent")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.constants.AlertMessage;
			import com.momentumsi.c9.constants.Color;
			import com.momentumsi.c9.constants.ImagePath;
			import com.momentumsi.c9.constants.Region;
			import com.momentumsi.c9.events.ProjectEvent;
			import com.momentumsi.c9.models.CloudAccount;
			import com.momentumsi.c9.models.Project;
			import com.momentumsi.c9.models.User;
			import com.momentumsi.c9.services.ProjectService;
			import com.momentumsi.c9.utils.Helpers;
			
			import mx.controls.Alert;
			import mx.controls.Text;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.MoveEvent;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.rpc.AsyncToken;
			import mx.rpc.CallResponder;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.DataGrid;			
			
			// A reference to the TextInput control in which to put the result.
			public var projectTitle:Text;
			
			private var app:Object = FlexGlobals.topLevelApplication;
			
			[Bindable]
			private var host:String;
			[Bindable]
			private var projectId:int;
			private var projectName:String;
			private var projectOwnerId:int;
			private var accountId:int;
			[Bindable]
			private var userId:int;
			[Bindable]
			private var firstEnvironmentName:String = "";
			private var userProjectList:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var readOnlyProjectCreate:Boolean = false;
			public var newProjectWindow:NewProjectWindow;
			private var parentCaller:Object;

			[Bindable]
			public var user:User;
			[Bindable]
			public var newProject:Project = new Project();
			[Bindable]
			public var cfSupportedClouds:ArrayCollection = new ArrayCollection([{label: "Amazon", value: CloudAccount.AMAZON},
																				{label: "OpenStack", value: CloudAccount.OPENSTACK},
																				{label: "Eucalyptus", value: CloudAccount.EUCALYPTUS}]);
			[Bindable]
			private var selectableCloudAccounts:ArrayCollection = new ArrayCollection();
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				trace(readOnlyProjectCreate);
				if(!readOnlyProjectCreate)
				{
					user = parentApplication.user;
				}
				if(newProject.project_id != null)
				{
					cloudSelection.enabled = false;
					regionSelection.enabled = false;
					accountSelection.enabled = false;
					var found:Boolean = false;
					for each(var c:Object in cfSupportedClouds)
					{
						if(!found && c.value == newProject.cloud_account.cloud_provider)
						{
							found = true;
							cloudSelection.selectedItem = c;
							setRegionAndAccountsForCloud();
						}
					}
					found = false;
					for each(var r:Object in regionSelection.dataProvider)
					{
						if(!found && r.value == newProject.region)
						{
							found = true;
							regionSelection.selectedItem = r;
						}
					}
					found = false;
					for each(var cAccount:CloudAccount in selectableCloudAccounts)
					{
						if(!found && cAccount.id == newProject.cloud_account.id)
						{
							found = true;
							accountSelection.selectedItem = cAccount;
						}
					}
					if(newProject.type == Project.EMBEDDABLE)
					{
						embeddableCheckBox.selected = true;
					}
				}else
				{
					cloudSelection.selectedIndex = 0;
					setRegionAndAccountsForCloud();
				}
			}
			
			// Event handler for the OK button.
			public function createProject(callFrom:Object = null):void
			{
				if(accountSelection.selectedIndex != -1)
				{
					var found:Boolean = false;
					for each(var p:Object in user.project_memberships)
					{
						if(p.project_name == titleInput.text)
						{
							found = true;
						}
					}
					
					if(found)
					{
						newProjectWindow.disableButtons(false);
						Alert.show(AlertMessage.PROJECT_NOT_UNIQUE);
					}else
					{
						if(newProject == null)
						{
							newProject = new Project();
						}
						newProject.project_name = titleInput.text;
						newProject.description = description.text;
						newProject.owner=user;
						newProject.cloud_account=CloudAccount(accountSelection.selectedItem);
						if(regionSelection.selectedIndex != -1)
						{
							newProject.region = regionSelection.selectedItem.value;
						}
						if(embeddableCheckBox.selected)
						{
							newProject.type = Project.EMBEDDABLE;
						}else{
							newProject.type = Project.STANDARD;
						}
							
						if(newProject.currentVersion != null && newProject.project_id == null)
						{
							newProject.createFromShallowCopy();
						}else{
							newProject.addEventListener(ProjectEvent.PROJECT_RESULT, createProjResult);
							newProject.save();
						}
					}
				}else
				{
					newProjectWindow.disableButtons(false);
					Alert.show(AlertMessage.SELECT_ACCOUNT);
				}
			}
			
			private function createProjResult(event:ProjectEvent):void
			{
				newProject.removeEventListener(ProjectEvent.PROJECT_RESULT, createProjResult);
				dispatchEvent(new ProjectEvent(ProjectEvent.PROJECT_RESULT, newProject));
			}
			
			protected function assignOwnerRightsSvc_resultHandler(event:ResultEvent):void
			{
				var environmentRoles:XMLList = Helpers.xmlChildrenFromEvent(event);
				
			}
			
			protected function assignOwnerRightsSvc_faultHandler(event:FaultEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function createNewAccountButton_clickHandler(event:MouseEvent):void
			{
				var accountManagementWindow:CloudAccountManagement = new CloudAccountManagement();
				accountManagementWindow.user = user;
				accountManagementWindow.addEventListener(CloseEvent.CLOSE, cloudAccountsUpdated);
				PopUpManager.addPopUp(accountManagementWindow, UIComponent(parentApplication), true);
			}
			
			private function cloudAccountsUpdated(event:CloseEvent):void
			{
				var cloudAcctMgmtWindow:CloudAccountManagement = event.currentTarget as CloudAccountManagement;
				user = cloudAcctMgmtWindow.user;
				PopUpManager.removePopUp(cloudAcctMgmtWindow);
			}
			
			protected function cloudSelection_changeHandler(event:ListEvent):void
			{
				setRegionAndAccountsForCloud();
			}
			
			protected function setRegionAndAccountsForCloud():void
			{
				switch(cloudSelection.selectedItem.value)
				{
					case CloudAccount.AMAZON:
						cloudLogo.source = ImagePath.AMAZON16;
						regionSelection.dataProvider = Region.AMAZON;
						regionSelection.prompt = "Select a region";
						regionSelection.selectedIndex = 0;
						regionSelection.enabled = true;
						break;
					case CloudAccount.OPENSTACK:
						cloudLogo.source = ImagePath.OPENSTACK16;
						regionSelection.dataProvider = new ArrayCollection();
						regionSelection.prompt = "Unavailable";
						regionSelection.selectedIndex = -1;
						regionSelection.enabled = false;
						break;
					case CloudAccount.EUCALYPTUS:
						cloudLogo.source = ImagePath.EUCALYPTUS16;
						regionSelection.dataProvider = new ArrayCollection();
						regionSelection.prompt = "Unavailable";
						regionSelection.selectedIndex = -1;
						regionSelection.enabled = false;
						break;
				}
				
				selectableCloudAccounts.removeAll();
				for each(var cAccount:CloudAccount in user.cloud_accounts)
				{
					if(cAccount.cloud_provider == cloudSelection.selectedItem.value)
					{
						selectableCloudAccounts.addItem(cAccount);
					}
				}
				if(selectableCloudAccounts.length > 0)
				{
					accountSelection.selectedIndex = 0;
				}else
				{
					accountSelection.selectedIndex = -1;
				}
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:ArrayCollection id="accounts"/>
		<c9:LoginPopUp id="loginPopUp"/>
		
		<c9:CloudAccountManagement id="newAccountWindow" user="{user}"/>
		
		<s:HTTPService id="assignOwnerRightsSvc"
					   url="{host}/environment_roles/assign_owner_rights"
					   method="POST"
					   resultFormat="e4x"
					   showBusyCursor="true"
					   result="assignOwnerRightsSvc_resultHandler(event)"
					   fault="assignOwnerRightsSvc_faultHandler(event)"/>

	</fx:Declarations>
	
	<!--<mx:TabNavigator creationPolicy="all" width="100%" height="100%" id="newProjectWindowTabNavigator">
		<s:NavigatorContent label="New Project" id="projectContent" width="100%">-->
			<s:VGroup height="100%" width="100%" gap="10" horizontalAlign="center" paddingTop="10" paddingLeft="20" paddingRight="20" paddingBottom="10">
				<s:HGroup width="100%" gap="200">
					<s:HGroup>
						<mx:Text text="Name:" width="100" textAlign="right" fontWeight="bold"/>
						<s:TextInput id="titleInput" text="{newProject.project_name}" width="200"/>
					</s:HGroup>
					<s:HGroup>
						<mx:Text text="Embeddable:" fontWeight="bold"/>
						<s:CheckBox id="embeddableCheckBox"/>
						<s:Image width="16" height="16" source="{ImagePath.HELPER_ICON}" toolTip="Allows project to be used as embedded stack in another project."/>
					</s:HGroup>	
				</s:HGroup>
				<s:HGroup width="100%">
					<mx:Text text="Description:" width="100" textAlign="right" fontWeight="bold"/>
					<s:TextArea id="description" text="{newProject.description}" width="100%" height="40"/>
				</s:HGroup>
				<s:VGroup width="100%">
					<s:HGroup width="100%" horizontalAlign="center" gap="130" fontWeight="bold">
						<mx:Text text="Cloud"/>
						<mx:Text text="Region"/>
						<mx:Text text="Account"/>
					</s:HGroup>
					<s:BorderContainer width="100%" height="40">
						<s:Rect width="100%" height="100%">
							<s:fill>
								<s:SolidColor>
									<s:color>{Color.MEDIUM_GRAY}</s:color>
								</s:SolidColor>
							</s:fill>
						</s:Rect>
						<s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
							<s:Image id="cloudLogo" width="16" height="16" source="{ImagePath.AMAZON16}"/>
							<mx:ComboBox id="cloudSelection" width="150" dataProvider="{cfSupportedClouds}" change="cloudSelection_changeHandler(event)"/>
							<mx:ComboBox id="regionSelection" width="200" dataProvider="{Region.AMAZON}"/>
							<mx:ComboBox id="accountSelection" width="150" dataProvider="{selectableCloudAccounts}" prompt="Select an account"/>
						</s:HGroup>
					</s:BorderContainer>
					<s:HGroup width="100%" horizontalAlign="center" paddingTop="20">
						<s:CheckBox id="topStackServices" label="Include TopStack Services?" fontWeight="bold" selected="true" enabled="false"/>
					</s:HGroup>
				</s:VGroup>
				<!--
				<s:FormItem label="Cloud Account:">
					<s:DataGrid id="cloudAccountDataGrid" width="100%" minHeight="0"
								maxHeight="100" dataProvider="{selectableCloudAccounts}"
								requestedMaxRowCount="3" requestedMinRowCount="3"
								requestedRowCount="3" selectionMode="singleRow">
						<s:columns>
							<s:ArrayList id="accountColumns">
								<s:GridColumn headerText="Account Name" dataField="name" width="120"/>
								<s:GridColumn headerText="Cloud" dataField="cloud_name" width="150"/>
								<s:GridColumn headerText="Description" dataField="description"/>
							</s:ArrayList>
						</s:columns>
					</s:DataGrid>
					<s:Button label="Create New Account" id="createNewAccountButton" click="createNewAccountButton_clickHandler(event)" enabled="true"/>
				</s:FormItem>
				<s:FormItem label="Region:">
					<mx:ComboBox id="regionSelection" dataProvider="{Region.AMAZON}" width="200"/>
				</s:FormItem>
				-->
				<!--
				<s:FormItem label="Version Control&#013;System:" enabled="false">
					<s:HGroup>
						<s:RadioButton id="VcsNone" label="None" groupName="radiogroup1" selected="true"/>
						<s:VGroup>
							<s:RadioButton id="VcsCvs" label="CVS" groupName="radiogroup1"/>
							<s:RadioButton id="VcsGit" label="Git" groupName="radiogroup1"/>
						</s:VGroup>
						<s:VGroup>
							<s:RadioButton id="VcsMerc" label="Mercurial" width="75" groupName="radiogroup1"/>
							<s:RadioButton id="VcsSvn" label="Subversion" groupName="radiogroup1"/>
						</s:VGroup>
					</s:HGroup>
				</s:FormItem>
				<s:FormItem label="Continuous Build&#013;System:" enabled="false">
					<s:HGroup>
						<s:RadioButton id="CbsNone" label="None" groupName="radiogroup3" selected="true"/>
						<s:RadioButton id="CbsHudson" label="Hudson" groupName="radiogroup3"/>
						<s:RadioButton id="CbsCruis" label="Cruise Control" groupName="radiogroup3"/>
					</s:HGroup>
				</s:FormItem>
				-->
			</s:VGroup>
		<!--</s:NavigatorContent>
		<s:NavigatorContent label="Environment Pipeline" id="environmentContent">
			<c9:EnvironmentPipelineManagement id="envPipeline" width="100%" height="60%"/>
		</s:NavigatorContent>
	</mx:TabNavigator>-->
</s:Group>
