<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   close="PopUpManager.removePopUp(this)"
			   move="Helpers.doMove(this)"
			   creationComplete="creationCompleteHandler(event)"
			   title="Create Read Replica DB Instance"
			   width="606" height="350" xmlns:services="com.momentumsi.c9.services.*">
	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.events.rds.CreateReadReplicaFaultEvent;
			import com.momentumsi.c9.events.rds.CreateReadReplicaResultEvent;
			import com.momentumsi.c9.models.CloudAccount;
			import com.momentumsi.c9.representers.DbInstanceRepresenter;
			import com.momentumsi.c9.utils.Helpers;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]
			private var instanceClassList:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var rdsResource:DbInstanceRepresenter;
			[Bindable]
			public var cloudAccount:CloudAccount;
			[Bindable]
			public var region:String;
						
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				switch(cloudAccount.cloud_provider)
				{
					case CloudAccount.EUCALYPTUS:
						instanceClassList = rdsService.eucaClasses;
						break;
					case CloudAccount.AMAZON:
						instanceClassList = rdsService.instanceClasses;
						break;
					case CloudAccount.ESSEX_OPENSTACK:
					case CloudAccount.OPENSTACK:
						instanceClassList = rdsService.openstackClasses;
						break;	
				}
				
				PopUpManager.centerPopUp(this);
				var obj:Object;
				for each(obj in instanceClassList)
				{
					if(obj.instanceClass == rdsResource.instanceType)
					{
						instanceClass.selectedIndex = instanceClassList.getItemIndex(obj);
					}
				}
				autoUpgradeRadioButtons.selectedValue = rdsResource.autoMinorVersionUpgrade;
				dbPort.text = rdsResource.endpointPort.toString();
				
				var count:int = rdsResource.readReplicasCollection.length;
				count++;
				dbId.text = rdsResource.id + "-read-replica-" + count;
			}
			
			protected function createButton_clickHandler(event:MouseEvent):void
			{
				createButton.label = "Creating";
				createButton.enabled = false;
				var readReplica:Object = new Object();
				readReplica["replica_id"] = dbId.text;
				readReplica["DBInstanceClass"] = instanceClass.selectedLabel;
				readReplica["Port"] = dbPort.text;
				if(cloudAccount.cloud_provider == CloudAccount.AMAZON)
				{
					readReplica["AutoMinorVersionUpgrade"] = autoUpgradeYes.selected.toString();
				}
				rdsService.createReadReplica(readReplica);
			}
			
			protected function rdsService_readReplicaCreatedHandler(event:CreateReadReplicaResultEvent):void
			{
				Helpers.getObjectManagement(this).refreshResourceList();
				PopUpManager.removePopUp(this);
			}
			
			protected function rdsService_readReplicaFailedHandler(event:CreateReadReplicaFaultEvent):void
			{
				Alert.show("Error creating read replica.");
				createButton.label = "Create";
				createButton.enabled = true;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<services:RdsService id="rdsService"
							 dbIdentifier="{rdsResource.id}"
							 cloudAccountId="{cloudAccount.id}"
							 readReplicaCreated="rdsService_readReplicaCreatedHandler(event)"
							 readReplicaFailed="rdsService_readReplicaFailedHandler(event)"/>
		
		<s:RadioButtonGroup id="autoUpgradeRadioButtons"/>
		
	</fx:Declarations>
	<s:VGroup width="100%" >
		<mx:Text text="{'You are creating a replica DB Instance from a source DB Instance. This new DB Instance will' +
			'\nhave source DB Instance\'s DB Security Groups and DB Parameter Groups.'}"/>
		<s:Form>
			<s:layout>
				<s:FormLayout gap="-7"/>
			</s:layout>
			<s:FormItem label="Read Replica Source:">
				<mx:Text text="{rdsResource.id}"/>
			</s:FormItem>
			<s:FormItem label="DB Instance Identifier:*">
				<s:TextInput id="dbId" width="321"/>
			</s:FormItem>
			<s:FormItem label="DB Instance Class:">
				<mx:ComboBox id="instanceClass"
							 labelField="instanceClass"
							 width="118" color="black" 
							 dataProvider="{instanceClassList}"/>
			</s:FormItem>
			<s:FormItem label="Auto Minor Version Upgrade:"
						visible="{cloudAccount.cloud_provider == CloudAccount.AMAZON}"
						includeInLayout="{cloudAccount.cloud_provider == CloudAccount.AMAZON}">
				<s:HGroup visible="{cloudAccount.cloud_provider == CloudAccount.AMAZON}"
						  includeInLayout="{cloudAccount.cloud_provider == CloudAccount.AMAZON}">
					<s:RadioButton group="{autoUpgradeRadioButtons}" id="autoUpgradeYes" label="Yes" value="{true}"/>
					<s:RadioButton group="{autoUpgradeRadioButtons}" label="No" value="{false}"/>
				</s:HGroup>
			</s:FormItem>
			<s:FormItem label="Database Port:">
				<s:TextInput id="dbPort" width="75"/>
			</s:FormItem>
			<s:FormItem label="Availability Zone:" visible="false" includeInLayout="false">
				<mx:ComboBox id="zone" width="118" color="black" selectedIndex="0" enabled="false">
					<mx:dataProvider>
						<s:ArrayCollection id="zonesList"/>
					</mx:dataProvider>
				</mx:ComboBox>
			</s:FormItem>
		</s:Form>
	</s:VGroup>
	<s:Line y="74" width="551" horizontalCenter="0" xFrom="5" xTo="150" yFrom="180" yTo="180">
		<s:stroke>
			<s:SolidColorStroke color="white"/>
		</s:stroke>
	</s:Line>
	<s:Button id="createButton" x="229" y="286" label="Create"
			  click="createButton_clickHandler(event)"/>
	<s:Button x="306" y="286" label="Cancel" click="PopUpManager.removePopUp(this)"/>
</s:TitleWindow>
