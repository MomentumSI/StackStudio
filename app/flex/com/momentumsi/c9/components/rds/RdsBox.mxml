<?xml version="1.0" encoding="utf-8"?>
<c9:DetailsBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 initialize="init(event)"
		 width="100%" height="100%" 
		 xmlns:c9="com.momentumsi.c9.components.*"
		 xmlns:diagrammer="fr.kapit.diagrammer.base.uicomponent.*">

	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.components.MainBox;
			import com.momentumsi.c9.utils.Helpers;
			import com.momentumsi.c9.models.ProvisionedInstance;
			import com.momentumsi.c9.services.MonitoringService;
			
			import fr.kapit.diagrammer.Diagrammer;
			import fr.kapit.diagrammer.base.uicomponent.DiagramSprite;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.DateField;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.formatters.DateTimeFormatter;
			
			[Bindable]
			private var host:String;
			private var app:Object = FlexGlobals.topLevelApplication;
			[Bindable]
			public var projectId:int;
			[Bindable]
			private var accountId:int;
			[Bindable]
			public var dbParameterGroupName:String;
			[Bindable]
			public var RdsInstance:XML;
			private var dbInstancesRefreshTimer:Timer = new Timer(30000, 0);
			[Bindable]
			private var failedDB:XML;
			[Bindable]
			private var thisRdsEvents:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var rdsEvents:ArrayCollection = new ArrayCollection();
			public var rdsDbInstancesRunningCollection:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var rdsCollection:ArrayCollection = new ArrayCollection();
			private var designNode:DiagramSprite;
			private var runningNode:DiagramSprite;

			
			private function init(event:Event):void
			{
				host = app.GetConfiguration( "serviceUrl" ) ;
			}
			
			public function getRdsDbInstances(projectId:int, tagRevision:int):void
			{
				//getDesignRdsInstancesSvc.send({project_id: projectId, tag_revision: tagRevision});
				//getProvisionedRdsInstancesSvc.send({project_id:projectId, tag_revision: tagRevision});
				//this.projectId = projectId;
				//getRdsDbInstancesSvc.send();
			}
			
			public function getCloudRdsInstances(accountId:int):void
			{
				this.accountId = accountId;
				//getCloudRdsInstancesSvc.send();
			}
			
			public function refreshInstances(host:String, projectId:int):void
			{
				this.host = host;
				this.projectId = projectId;
				//getRdsDbInstancesSvc.send();
			}
			
			public function checkReplicaCount():void
			{
				/*
				var count:int = parseInt(RdsInstance.child('rds-replica-count'));
				if(RdsInstance.child('status') == "available")
				{
					if(count < 5)
					{
						createReadReplica.enabled = true;
					}else
					{
						createReadReplica.enabled = false;
					}
				}else
					createReadReplica.enabled = false;
				*/
			}
			
			public function getRdsInstancesToLink(rdsDbNodes:ArrayCollection):void
			{
				var type:String;
				for each (var rdsDbNode:DiagramSprite in rdsDbNodes)
				{
					type = rdsDbNode.data.name();
					switch(type)
					{
						case "provisioned-rds-db-instance":
							var getProvisionedInstancesSvc:HTTPService = new HTTPService();
							getProvisionedInstancesSvc.method = "GET";
							getProvisionedInstancesSvc.resultFormat = "e4x";
							getProvisionedInstancesSvc.addEventListener(ResultEvent.RESULT, getProvisionedRdsInstancesSvc_resultHandler);
							getProvisionedInstancesSvc.addEventListener(FaultEvent.FAULT, getInstancesSvc_faultHandler);
							getProvisionedInstancesSvc.url = Helpers.getHost() + "/provisioned_rds_db_instances/get_instances/" + rdsDbNode.data.child('id') + ".xml";
							runningNode = rdsDbNode;
							getProvisionedInstancesSvc.send();
							break;
						case "rds-db-instance":
							var getInstancesSvc:HTTPService = new HTTPService();
							getInstancesSvc.method = "GET";
							getInstancesSvc.resultFormat = "e4x";
							getInstancesSvc.addEventListener(ResultEvent.RESULT, getRdsInstancesSvc_resultHandler);
							getInstancesSvc.addEventListener(FaultEvent.FAULT, getInstancesSvc_faultHandler);
							getInstancesSvc.url = Helpers.getHost() + "/rds_db_instances/get_instances/" + rdsDbNode.data.child('id') + ".xml";
							designNode = rdsDbNode;
							getInstancesSvc.send();
							break;
						
					}
				}				
			}
			
			private function getRdsInstancesSvc_resultHandler(event:ResultEvent):void
			{
				var result:XMLList = Helpers.xmlChildrenFromEvent(event);
				var designDiagram:Diagrammer = Helpers.getDesignDiagram(this);
				for each(var instance:XML in result)
				{
					for each(var workspaceNode:DiagramSprite in designDiagram.nodesMap)
					{
						if(workspaceNode.data == instance)
						{
							designDiagram.addLinkElement(null, designNode, workspaceNode);
						}
					}
				}
			}
			
			private function getProvisionedRdsInstancesSvc_resultHandler(event:ResultEvent):void
			{
				var result:XMLList = Helpers.xmlChildrenFromEvent(event);
				var runningDiagram:Diagrammer = Helpers.getRunningDiagram(this);
				for each(var instance:XML in result)
				{
					for each(var workspaceNode:DiagramSprite in runningDiagram.nodesMap)
					{
						if(workspaceNode.data == instance)
						{
							runningDiagram.addLinkElement(null, runningNode, workspaceNode);
						}
					}
				}
			}
			
			private function getInstancesSvc_faultHandler(event:FaultEvent):void
			{
				
			}

			public function deleteRdsHandler(RdsInstance:XML):void
			{
				var selectedRdsObject:Object;
				for each(var rdsObject:Object in rdsDbInstancesRunningCollection)
				{
					if(rdsObject['id'] == RdsInstance.child('id'))
					{
						selectedRdsObject = rdsObject;
					}
				}
				host = app.GetConfiguration( "serviceUrl" ) ;
				var deletePopUp:RdsDeleteRequest = RdsDeleteRequest(PopUpManager.createPopUp( UIComponent(this.parentApplication), RdsDeleteRequest , true));
				deletePopUp.rdsInstance = selectedRdsObject;
				deletePopUp.rdsDbInstancesRunningCollection = rdsDbInstancesRunningCollection;
			}

			/*
			public function getEventsList():void
			{
				thisRdsEvents.removeAll();
				for each (var item:Object in rdsEvents)
				{
					if(item.id == RdsInstance.child('rds-db-instance-identifier'))
					{
						thisRdsEvents.addItem(item);
					}
				}
			}
			*/
			
			protected function describeEvents():void
			{
				if(RdsInstance != "")
				{
					getRdsEventsSvc.send();
				}
			}
			
			protected function getRdsEventsSvc_resultHandler(event:ResultEvent):void
			{
				var result:XML = event.result as XML;
				thisRdsEvents.removeAll();
				for each(var eventInstance:XML in result.children())
				{
					thisRdsEvents.addItem({details: eventInstance.child('message'), type: "INFO", time: eventInstance.child('date')})
				}
			}
			
			
			protected function createReadReplica_clickHandler(event:MouseEvent):void
			{
				/* var readReplicaPopUp:RdsCreateReadReplicaPopUp = RdsCreateReadReplicaPopUp(PopUpManager.createPopUp( UIComponent(this.parentApplication), RdsCreateReadReplicaPopUp , true));
				readReplicaPopUp.dbInstance = this.RdsInstance;	 */			
			}
			
			protected function snapshotButton_clickHandler(event:MouseEvent):void
			{
				var snapshotPopup:RdsSnapshotRequest = RdsSnapshotRequest(PopUpManager.createPopUp( UIComponent(this.parentApplication), RdsSnapshotRequest , true));
				snapshotPopup.rdsInstance = RdsInstance;				
			}
			
			protected function modifyButton_clickHandler(event:MouseEvent):void
			{
				var modifyPopUp:RdsModifyPopUp = RdsModifyPopUp(PopUpManager.createPopUp( UIComponent(this.parentApplication), RdsModifyPopUp , true));
				modifyPopUp.dbInstance = this.RdsInstance;				
			}
			
			protected function rebootButton_clickHandler(event:MouseEvent):void
			{
				/* var rebootPopUp:RdsRebootPopUp = RdsRebootPopUp(PopUpManager.createPopUp( UIComponent(this.parentApplication), RdsRebootPopUp , true));
				rebootPopUp.dbInstance = this.RdsInstance; */
			}
			
			protected function restoreButton_clickHandler(event:MouseEvent):void
			{
				var restore:RdsRestoreDbPopUp = RdsRestoreDbPopUp(PopUpManager.createPopUp( UIComponent(this.parentApplication), RdsRestoreDbPopUp , true));
				restore.dbInstance = this.RdsInstance;
			}
			
			private function format():void
			{
				/*
				var restoreTimeString:String = RdsInstance.child('latest-restorable-time');
				var createTimeString:String = RdsInstance.child('created-at');
				
				if(restoreTimeString != "")
				{
					restoreTime.text = dateFormatter.format(Helpers.formatDate(resourceObject.latest_restorable_time));
				}
				if(createTimeString != "")
				{
					createdTime.text = dateFormatter.format(Helpers.formatDate(createTimeString));
				}
				*/
			}

			protected function rdsDetails_changeHandler(event:IndexChangedEvent):void
			{
				if(rdsDetails.selectedIndex == 1)
				{
					monitoringBox.resource = node;
					monitoringBox.getDefaultMonitorsCall(MonitoringService.RDS_DEFAULT);
				}else if(rdsDetails.selectedIndex == 2)
				{
					describeEvents();
				}
			}
			
			protected function deleteButton_clickHandler(event:MouseEvent):void
			{
				deleteRdsDbInstanceSvc.send();
			}
			
			protected function deleteRdsDbInstanceSvc_resultHandler(event:ResultEvent):void
			{
				var result:XML = event.result as XML;
				//node.data = result;
			}
			
			protected function faultHandler(event:FaultEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			[Bindable]
			private var _rdsObject:Object = new Object();
			override public function set resourceObject(value:Object):void
			{
				_rdsObject = value;
				format();
			}

			
		]]>
	</fx:Script>

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->

		
		<s:HTTPService id="getRdsEventsSvc"
					   url="{host}/provisioned_rds_db_instances/describe_events/{RdsInstance.child('id')}.xml"
					   resultFormat="e4x"
					   method="GET"
					   showBusyCursor="true"
					   result="getRdsEventsSvc_resultHandler(event)"
					   fault="faultHandler(event)"/>
		
		<s:HTTPService id="removeDbInstanceSvc"
					   url="{host}/rds_db_instances/{failedDB.child('id')}.xml"
					   method="POST"
					   showBusyCursor="true"/>
		
		
		<s:HTTPService id="deleteRdsDbInstanceSvc"
					   url="{host}/provisioned_rds_db_instances/delete_from_cloud/{RdsInstance.child('id')}.xml"
					   resultFormat="e4x"
					   method="GET"
					   showBusyCursor="true"
					   result="deleteRdsDbInstanceSvc_resultHandler(event)"
					   fault="faultHandler(event)"/>
		
		<s:DateTimeFormatter id="dateFormatter" dateTimePattern="MM/dd/yyyy hh:mm:ss a"/>
		
	</fx:Declarations>
	<s:HGroup id="rdsButtonBar" height="25" paddingLeft="10">
		<!--<s:Button id="createReadReplica" label="Create Read Replica" click="createReadReplica_clickHandler(event)"/>-->
		<!--<s:Button id="modifyButton" label="Modify" click="modifyButton_clickHandler(event)" enabled="{dbStatus.text == 'available'}"/>-->
		<s:Button id="deleteButton" label="Delete" visible="false" includeInLayout="{deleteButton.visible}" click="deleteButton_clickHandler(event)"/>
		<!--
		<s:Button id="rebootButton" label="Reboot" click="rebootButton_clickHandler(event)" enabled="{dbStatus.text == 'available'}"/>
		<s:Button id="snapshotButton" label="Take Snapshot" click="snapshotButton_clickHandler(event)" enabled="true"/>
		<s:Button id="restoreButton" label="Restore To Point In Time" click="restoreButton_clickHandler(event)" enabled="true"/>
		-->
	</s:HGroup>
	<s:BorderContainer height="100%" width="100%" alpha="1" borderVisible="false">
		<c9:DetailsBoxTabNavigator id="rdsDetails" change="rdsDetails_changeHandler(event)">
			<s:NavigatorContent label="Description" width="100%" height="100%">
				<s:BorderContainer borderVisible="true"  id="description" height="100%" width="100%">
					<s:Scroller width="100%" height="100%">
						<s:viewport>
							<s:HGroup width="100%">
								<s:Form width="100%">
									<s:layout>
										<s:FormLayout gap="-7"/>
									</s:layout>
									<s:FormItem label="DB Instance Name:">
										<mx:Text text="{node.resourceId}"/>
									</s:FormItem>
									<s:FormItem label="Auto Minor Ver. Upgrade:">
										<mx:Text text="{_rdsObject.auto_minor_version_upgrade}"/>
									</s:FormItem>
									<s:FormItem label="DB Status:">
										<mx:Text id="dbStatus" text="{_rdsObject.status}"/>
									</s:FormItem>
									<s:FormItem label="Endpoint:" width="100%">
										<mx:Text id="endpointAddress" text="{_rdsObject.endpoint_address}" width="100%"/>
									</s:FormItem>
									<s:FormItem label="Zone:">
										<mx:Text text="{_rdsObject.availability_zone}"/>
									</s:FormItem>
									<s:FormItem label="DB Storage:">
										<mx:Text text="{_rdsObject.allocated_storage}"/>
									</s:FormItem>
									<s:FormItem label="Created Time:">
										<mx:Text id="createdTime"/>
									</s:FormItem>
									<s:FormItem label="Backup Retention Period:">
										<mx:Text text="{_rdsObject.backup_retention_period}"/>
									</s:FormItem>
									<s:FormItem label="Backup Window:">
										<mx:Text text="{_rdsObject.preferred_backup_window}"/>
									</s:FormItem>
									<s:FormItem label="Pending Modifications:">
										<mx:Text text=""/>
									</s:FormItem>
									<s:FormItem label="Read Replica(s):">
										<mx:Text text="{RdsInstance.child('rds-read-replicas')}"/>
									</s:FormItem>
								</s:Form>
								<s:Form width="100%">
									<s:layout>
										<s:FormLayout gap="-7"/>
									</s:layout>
									<s:FormItem label="DB Engine:">
										<mx:Text text="{RdsInstance.child('rds-engine')}"/>
									</s:FormItem>
									<s:FormItem label="License Model:">
										<mx:Text text="{RdsInstance.child('')}"/>
									</s:FormItem>
									<s:FormItem label="DB Security Groups:">
										<mx:Text text="{RdsInstance.child('rds-security-group')}"/>
									</s:FormItem>
									<s:FormItem label="DB Instance Class:">
										<mx:Text text="{RdsInstance.child('rds-db-instance-class')}"/>
									</s:FormItem>
									<s:FormItem label="Port:">
										<mx:Text text="{RdsInstance.child('rds-port')}"/>
									</s:FormItem>
									<s:FormItem label="Multiple AZ Deployment:">
										<mx:Text text="{RdsInstance.child('multiple-availability-zones')}"/>
									</s:FormItem>
									<s:FormItem label="DB Name:">
										<mx:Text text="{RdsInstance.child('rds-db-name')}"/>
									</s:FormItem>
									<s:FormItem label="Lastest Restorable Time:">
										<mx:Text id="restoreTime"/>
									</s:FormItem>
									<s:FormItem label="DB Parameter Group:">
										<mx:Text text="{RdsInstance.child('rds-parameter-group')}"/>
									</s:FormItem>
									<s:FormItem label="Maintenance Window:">
										<mx:Text text="{RdsInstance.child('rds-preferred-maintenance-window').toString().toUpperCase()}"/>
									</s:FormItem>
								</s:Form>
							</s:HGroup>
						</s:viewport>
					</s:Scroller>
				</s:BorderContainer>
			</s:NavigatorContent>
			<s:NavigatorContent label="Monitoring" width="100%" height="100%">
				<s:BorderContainer borderVisible="true" id="monitoring" height="100%" width="100%">
					<c9:MonitoringBox id="monitoringBox" width="100%" height="100%" cloudAccountId="{cloudAccountId}"/>
				</s:BorderContainer>
			</s:NavigatorContent>
			<s:NavigatorContent label="Recent Events" width="100%" height="100%">
				<s:BorderContainer borderVisible="true" id="recentEvents" height="100%" width="100%">
					<mx:DataGrid id="rdsEventsGrid" width="100%" height="100%" dataProvider="{thisRdsEvents}">
						<mx:columns>
							<mx:DataGridColumn headerText="Event Details" dataField="details" width="220"/>
							<mx:DataGridColumn headerText="Event Type" dataField="type" width="100"/>
							<mx:DataGridColumn headerText="Event Time" dataField="time"/>
						</mx:columns>
					</mx:DataGrid>
				</s:BorderContainer>
			</s:NavigatorContent>
		</c9:DetailsBoxTabNavigator>
	</s:BorderContainer>
</c9:DetailsBox>
