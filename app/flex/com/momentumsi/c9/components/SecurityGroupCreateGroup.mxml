<?xml version="1.0" encoding="utf-8"?>
<wizard:WizardWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   title="Security Group Wizard"
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   xmlns:components="com.momentumsi.c9.components.*" 
			   width="600" height="625"
			   xmlns:wizard="com.momentumsi.c9.components.wizard.*">
	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.constants.ImagePath;
			import com.momentumsi.c9.constants.ResourceType;
			import com.momentumsi.c9.utils.Helpers;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			[Bindable]
			private var projectId:int;
			public var securityGroupObject:Object;
			[Bindable]
			private var host:String;
			[Bindable]
			private var secGroupRules:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var securityGroupXML:XML;
			private var secGroupName:String;
			
			override public function applyConfigurations():void
			{
				if(element.id == null)
				{
					return;
				}
				
				secGroupName = element.name;
				
				groupName.text = secGroupName;
				description.text = element.properties['Properties']['GroupDescription'];
				var secGroupIngresses:Array = element.properties['Properties']['SecurityGroupIngress'];
				for(var index:int; index < secGroupIngresses.length; index++)
				{
					secGroupRules.addItem(secGroupIngresses[index]);
				}
				
			}
			
			protected function createGroupButton_clickHandler(event:MouseEvent):void
			{
				createGroupButton.label = "Saving";
				createGroupButton.enabled = false;
				//Validate required fields
				if(Helpers.validateAlphanumeric(groupName.text))
				{
					groupNameAlert.visible = false;
				}else
				{
					createGroupButton.label = "Create";
					createGroupButton.enabled = true;
					groupNameAlert.visible = true;
					return;
				}
				
				if(description.text.replace(" ", "") != "")
				{
					descriptionAlert.visible = false;
				}else
				{
					createGroupButton.label = "Create";
					createGroupButton.enabled = true;
					descriptionAlert.visible = true;
					return;
				}
				
				securityGroupObject = new Object();
				securityGroupAttributes['Type'] = ResourceType.EC2_SECURITY_GROUP;
				securityGroupAttributes['Properties'] = new Object();
				securityGroupAttributes['Properties']['GroupDescription'] = description.text;
				
				var ingressArray:Array = [];
				for each(var ingress:Object in secGroupRules)
				{
					ingressArray.push(ingress);
					securityGroupAttributes['Properties']['SecurityGroupIngress'] = ingressArray;
					
				}
				saveElement(groupName.text, securityGroupAttributes);
				//createVariants(groupName.text, statesToApply.ignoredEnvironments);
			}
			
			protected function addRuleButton_clickHandler(event:MouseEvent):void
			{
				var fromPort:String;
				var toPort:String;
				if(defaultRules.selectedIndex == 0 || defaultRules.selectedIndex == 1)
				{
					fromPort = "80";
					toPort = "80";
				}else{
					fromPort = defaultRules.selectedItem.fromPort;
					toPort = defaultRules.selectedItem.toPort; 
				}
				var newRule:Object = {FromPort: fromPort, ToPort: toPort, IpProtocol: defaultRules.selectedItem.protocol, CidrIp: source.text};
				var contains:Boolean = false;
				for each(var rule:Object in secGroupRules)
				{
					if(rule['FromPort'] == newRule['FromPort'] && rule['ToPort'] == rule['ToPort'] && rule['IpProtocol'] == newRule['IpProtocol'] && rule['CidrIps'] == newRule['CidrIps'])
					{
						contains = true;
					}
				}
				if(contains)
				{
					Alert.show("Rules already exists.");
				}else{
					//newRules.addItem(newRule);
					secGroupRules.addItem(newRule);	
				}
			}
			
			protected function removeRule_clickHandler(event:MouseEvent):void
			{
				if(securityGroupRules.selectedIndex != -1)
				{
					secGroupRules.removeItemAt(securityGroupRules.selectedIndex);
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<fx:Object id="securityGroupAttributes"/>
	</fx:Declarations>
	
	<s:VGroup height="90%" width="100%">
		<s:Group width="100%" height="60">
			<s:Rect width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="#FFFFFF"/>
				</s:fill>
			</s:Rect>
			<s:HGroup width="100%" height="60" verticalAlign="middle" paddingTop="10" paddingBottom="10" paddingLeft="20"  gap="15">
				<s:Image source="{ImagePath.NEW_SECURITY_GROUP}"/>		
				<s:Label text="Security Group" fontWeight="bold" fontSize="24"/>		
			</s:HGroup>
		</s:Group>
		<s:VGroup width="100%" paddingRight="5">
			<s:Form textAlign="right">
				<s:FormItem label="Name:">
					<s:HGroup>
						<s:TextInput id="groupName" width="150" textAlign="left"/>
						<mx:Text id="groupNameAlert" text="This field must be alphanumeric." color="red" visible="false"/>
					</s:HGroup>
				</s:FormItem>
				<s:FormItem width="390" label="Description:">
					<s:HGroup>
						<s:TextInput id="description" width="300" textAlign="left"/>	
						<mx:Text id="descriptionAlert" text="Required field." color="red" visible="false"/>
					</s:HGroup>
				</s:FormItem>
				<s:FormItem label="VPC:">
					<mx:ComboBox textAlign="left">
						<mx:dataProvider>
							<s:ArrayCollection>
								<fx:Object label="No VPC"/>
							</s:ArrayCollection>
						</mx:dataProvider>
					</mx:ComboBox>
				</s:FormItem>
			</s:Form>
			<s:VGroup paddingLeft="20" paddingRight="20" width="100%">	
				<s:BorderContainer width="100%">
					<s:Form width="100%">
						<s:layout>
							<s:FormLayout gap="-11"/>
						</s:layout>
						<mx:Text text="Security Group Ingress:"/>
						<s:FormItem width="443" label="New Rule:">
							<s:HGroup width="100%">
								<mx:ComboBox id="defaultRules" width="226" labelField="label">
									<mx:dataProvider>
										<s:ArrayCollection>
											<fx:Object label="Custom TCP" cidIps="0.0.0.0/0"/>
											<fx:Object label="Custom ICMP" cidrIps="0.0.0.0/0"/>
											<fx:Object label="ALL TCP" fromPort="0" toPort="65535" protocol="tcp" cidrIps="0.0.0.0/0"/>
											<fx:Object label="ALL ICMP" fromPort="-1" toPort="-1" protocol="icmp" cidrIps="0.0.0.0/0"/>
											<fx:Object label="SSH" fromPort="22" toPort="22" protocol="tcp" cidrIps="0.0.0.0/0"/>
											<fx:Object label="MYSQL" fromPort="3000" toPort="3000" protocol="tcp" cidrIps="0.0.0.0/0"/>
											<fx:Object label="HTTP" fromPort="80" toPort="80" protocol="tcp" cidrIps="0.0.0.0/0"/>
											<fx:Object label="HTTPS" fromPort="443" toPort="443" protocol="TCP" cidrIps="0.0.0.0/0"/>
										</s:ArrayCollection>
									</mx:dataProvider>
								</mx:ComboBox>
								<s:HGroup width="100%" horizontalAlign="right">
									<s:Button label="Add Rule" id="addRuleButton" click="addRuleButton_clickHandler(event)"/>
								</s:HGroup>
							</s:HGroup>	
						</s:FormItem>
						<s:FormItem label="Source:">
							<s:HGroup>
								<s:TextInput id="source" text="{defaultRules.selectedItem.cidrIps}" width="226"/>
								<s:Image width="16" height="16"
										 source="{ImagePath.HELPER_ICON}"
										 toolTip="(e.g. 192.168.2.0/24 or 1234568790/default(userId/group name))"/>
							</s:HGroup>
						</s:FormItem>
						<s:FormItem label="Port range:" visible="{defaultRules.selectedIndex == 0 || defaultRules.selectedIndex == 1}">
							<s:HGroup>
								<s:TextInput id="portRange" width="226"/>
								<s:Image width="16" height="16"
										 source="{ImagePath.HELPER_ICON}"
										 toolTip="(e.g. 80 or 49152-65535)"/>
							</s:HGroup>
						</s:FormItem>
					</s:Form>
				</s:BorderContainer>
				<s:DataGrid id="securityGroupRules" width="100%" maxHeight="145" minHeight="0"
							dataProvider="{secGroupRules}">
					<s:columns>
						<s:ArrayList>
							<s:GridColumn headerText="From Port" dataField="FromPort" itemRenderer="com.momentumsi.c9.itemRenderers.SelectableLabelRenderer"/>
							<s:GridColumn headerText="To Port" dataField="ToPort" itemRenderer="com.momentumsi.c9.itemRenderers.SelectableLabelRenderer"/>
							<s:GridColumn headerText="Protocol" dataField="IpProtocol" itemRenderer="com.momentumsi.c9.itemRenderers.SelectableLabelRenderer"/>
							<s:GridColumn headerText="CIDR IPs" dataField="CidrIp" itemRenderer="com.momentumsi.c9.itemRenderers.SelectableLabelRenderer"/>
						</s:ArrayList>
					</s:columns>
				</s:DataGrid>
				<s:HGroup width="100%" horizontalAlign="right" paddingRight="25">
					<s:Button label="Remove Rule" click="removeRule_clickHandler(event)"/>
				</s:HGroup>
			</s:VGroup>
		</s:VGroup>
	</s:VGroup>
	<s:Button x="303" y="561" label="Cancel" click="PopUpManager.removePopUp(this)"/>
	<s:Button id="createGroupButton" x="226" y="561" label="Create"
			  click="createGroupButton_clickHandler(event)"/>
</wizard:WizardWindow>