<?xml version="1.0" encoding="utf-8"?>
<c9:ObjectManagementDetailsBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:c9="com.momentumsi.c9.components.*" xmlns:services="com.momentumsi.c9.services.*">
	
	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.events.beanstalk.CreateEnvironmentResultEvent;
			import com.momentumsi.c9.events.beanstalk.DescribeBeanstalkEventsResultEvent;
			import com.momentumsi.c9.events.beanstalk.DescribeEnvironmentsResultEvent;
			import com.momentumsi.c9.representers.BeanstalkApplicationRepresenter;
			import com.momentumsi.c9.representers.BeanstalkEnvironmentRepresenter;
			import com.momentumsi.c9.services.CloudApiService;
			import com.momentumsi.c9.services.MonitoringService;
			import com.momentumsi.c9.utils.Helpers;
			
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]
			private var beanData:BeanstalkApplicationRepresenter;
			[Bindable]
			private var environmentData:BeanstalkEnvironmentRepresenter; 
			[Bindable]
			public var accountId:int;
			private var newEnvWindow:BeanstalkApplicationWizard;
			private var selectedEnvIndex:int;
			
			override public function set resourceData(value:Object):void
			{
				beanData = new BeanstalkApplicationRepresenter(value);
				beanDetails.selectedIndex = 0;
				super.resourceData = beanData;
			}
			
			protected function environments_valueCommitHandler(event:FlexEvent):void
			{
				if(environments.selectedIndex != -1)
				{
					environmentData = new BeanstalkEnvironmentRepresenter(environments.selectedItem);
				}
			}
			
			protected function deleteApplication_clickHandler(event:MouseEvent):void
			{
				var destroyPopUp:DestroyResourceObjectManagement = DestroyResourceObjectManagement(PopUpManager.createPopUp(UIComponent(this.parentApplication), DestroyResourceObjectManagement, true));
				destroyPopUp.cloudAccountId = cloudAccount.id;
				destroyPopUp.region = region;
				destroyPopUp.resourceType = CloudApiService.BEANSTALK_SERVICE;
				destroyPopUp.resourceDisplayId = beanData.name;
				destroyPopUp.resourceId = beanData.name;
			}

			protected function monitorView_clickHandler(event:MouseEvent):void
			{
				if(monitorToggle.text == "Show")
				{
					var autoscale:Object = new Object();
					if(environments.selectedItem.resources.hasOwnProperty("AutoScalingGroups") && environments.selectedItem.resources.AutoScalingGroups.length > 0)
					{
						autoscale.name = environments.selectedItem.resources.AutoScalingGroups[0].Name;
						autoscale.state = "running";
					}
					
					monitorToggle.text = "Hide";
					envSeparation.addChildAt(monitoringContent, 1);
					environmentContent.percentWidth = 40;
					monitorBox.objectManagement = true;
					monitorBox.objectManagementResource = autoscale;
					monitorBox.ec2_account_id = accountId;

					monitorBox.objectManagementResourceType = MonitoringService.AS_DEFAULT;
					monitorBox.getDefaultMonitorsCall(MonitoringService.AS_DEFAULT);
				}else
				{
					monitorToggle.text = "Show";
					if(envSeparation.contains(monitoringContent))
					{
						envSeparation.removeElement(monitoringContent);
					}
				}
			}
			
			protected function refreshApplicationEventsButton_clickHandler(event:MouseEvent):void
			{
				var options:Object = new Object();
				options["ApplicationName"] = beanData.name;
				beanstalkService.describeEvents(options);
			}
			
			protected function beanstalkService_describeBeanstalkEventsResultHandler(event:DescribeBeanstalkEventsResultEvent):void
			{
				beanData.events = new ArrayCollection(event.result as Array);
			}
			
			protected function launchNewEnvButton_clickHandler(event:MouseEvent):void
			{
				newEnvWindow = new BeanstalkApplicationWizard();
				newEnvWindow.newEnvironmentLaunch = true;
				newEnvWindow.objectManagementCreate = true;
				newEnvWindow.applicationRepresenter = beanData;
				newEnvWindow.cloudAccount = cloudAccount;
				newEnvWindow.title = "Launch New Environment";
				newEnvWindow.addEventListener(CreateEnvironmentResultEvent.RESULT, createEnvironment_ResultHandler);
				PopUpManager.addPopUp(newEnvWindow, UIComponent(parentApplication), true);
			}
			
			private function createEnvironment_ResultHandler(event:CreateEnvironmentResultEvent):void
			{
				beanData.environmentsCollection.addItem(event.result);
				environments.selectedIndex = beanData.environmentsCollection.length -1;
				PopUpManager.removePopUp(newEnvWindow);
			}
			
			protected function refreshEnvironmentsButton_clickHandler(event:MouseEvent):void
			{
				refreshEnvironmentsButton.text = "Refreshing Environments";
				refreshEnvironmentsButton.enabled = false;
				
				selectedEnvIndex = environments.selectedIndex;
				
				var filters:Object = new Object();
				filters["ApplicationName"] = beanData.name;
				beanstalkService.describeEnvironments(filters);
			}
			
			protected function beanstalkService_describeEnvironmentsResultHandler(event:DescribeEnvironmentsResultEvent):void
			{
				beanData.environmentsCollection = new ArrayCollection(event.result as Array);
				environments.selectedIndex = selectedEnvIndex;
				
				refreshEnvironmentsButton.text = "Refresh Environments";
				refreshEnvironmentsButton.enabled = true;
			}
			
			protected function deleteEnvironmentButton_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>		
		<s:NavigatorContent id="monitoringContent" label="Monitoring" width="100%" height="100%">
			<c9:MonitoringBox id="monitorBox" cloudAccountId="{cloudAccount.id}" region="{region}"/>
		</s:NavigatorContent>
		
		<services:BeanstalkService id="beanstalkService"
								   cloudAccountId="{cloudAccount.id}"
								   describeBeanstalkEventsResult="beanstalkService_describeBeanstalkEventsResultHandler(event)"
								   describeEnvironmentsResult="beanstalkService_describeEnvironmentsResultHandler(event)"/>
	</fx:Declarations>
	
	<s:HGroup paddingLeft="10" gap="20">
		<c9:TextButton id="deleteButton"
					   text="Delete Application" 
					   click="deleteApplication_clickHandler(event)"/>
		
		<c9:TextButton id="launchNewEnvButton"
					   text="Launch New Environment"
					   click="launchNewEnvButton_clickHandler(event)"/>
		
		<c9:TextButton id="refreshApplicationEventsButton"
					   text="Refresh Events"
					   click="refreshApplicationEventsButton_clickHandler(event)"/>
	</s:HGroup>
	<s:BorderContainer height="100%" width="100%" alpha="1" borderVisible="false">
		<mx:TabNavigator id="beanDetails" width="100%" height="100%">
			<s:NavigatorContent label="Details" width="100%" height="100%">
				<s:BorderContainer borderVisible="false"  id="details" height="100%" width="100%">
					<s:Scroller width="100%" height="100%">
						<s:viewport>
							<s:HGroup>
								<s:Form>
									<s:layout>
										<s:FormLayout gap="-7"/>
									</s:layout>
									<s:FormItem label="Name:">
										<mx:Text text="{beanData.name}"/>
									</s:FormItem>
									<s:FormItem label="Description:">
										<mx:Text text="{beanData.description}"/>
									</s:FormItem>
								</s:Form>
							</s:HGroup>
						</s:viewport>
					</s:Scroller>
				</s:BorderContainer>
			</s:NavigatorContent>
			<s:NavigatorContent id="envContent" height="100%" width="100%" label="Environments">
				<mx:HDividedBox id="envSeparation" width="100%" height="100%">
					<s:BorderContainer id="environmentContent" borderVisible="false" height="100%" width="100%">
						<s:Scroller width="100%" height="100%">
							<s:viewport>
								<s:VGroup height="100%" width="100%">
									<s:HGroup width="100%" paddingLeft="20" paddingBottom="2" paddingTop="2">
										<mx:ComboBox id="environments"
													 labelField="name" 
													 width="400"
													 valueCommit="environments_valueCommitHandler(event)"
													 dataProvider="{beanData.environmentsCollection}"/>
										<c9:TextButton id="refreshEnvironmentsButton"
													   text="Refresh Environments"
													   click="refreshEnvironmentsButton_clickHandler(event)"/>
										<c9:TextButton id="deleteEnvironmentButton"
													   text="Delete Environment"
													   click="deleteEnvironmentButton_clickHandler(event)"/>
									</s:HGroup>
									<s:Form id="envForm"
											visible="{beanData.environmentsCollection.length > 0}"
											includeInLayout="{beanData.environmentsCollection.length > 0}">
										<s:FormItem label="Description:">
											<s:Label text="{environmentData.description}"/>
										</s:FormItem>
										<s:FormItem label="URL:">
											<mx:LinkButton label="{environmentData.endpointUrl}"
														   color="blue"
														   click="navigateToURL(new URLRequest('http://' + environmentData.endpointUrl))"/>
										</s:FormItem>
										<s:FormItem label="Monitoring:">
											<mx:Text id="monitorToggle" 
													 text="Show" 
													 color="blue"
													 textDecoration="underline"
													 click="monitorView_clickHandler(event)" 
													 useHandCursor="true" 
													 buttonMode="true"
													 mouseChildren="false"/>
										</s:FormItem>
										<s:FormItem label="Version Label:">
											<s:Label text="{environmentData.versionLabel}"/>
										</s:FormItem>
										<s:FormItem label="Container Type:">
											<s:Label text="{environmentData.containerType}"/>
										</s:FormItem>
										<s:FormItem label="Environment ID:">
											<s:Label text="{environmentData.environmentId}"/>
										</s:FormItem>
										<s:FormItem label="Load Balancer Name:">
											<mx:Text text="{environmentData.loadBalancer}"/>
										</s:FormItem>
										<s:FormItem label="Updated Date:">
											<s:Label text="{environmentData.updatedAt}"/>
										</s:FormItem>
										<s:FormItem label="Creation Date:">
											<s:Label text="{environmentData.createdAt}"/>
										</s:FormItem>
										<s:FormItem label="State:">
											<s:Label text="{environmentData.status}"/>
										</s:FormItem>
									</s:Form>
								</s:VGroup>
							</s:viewport>
						</s:Scroller>
					</s:BorderContainer>
				</mx:HDividedBox>
			</s:NavigatorContent>
			<s:NavigatorContent label="Events" width="100%" height="100%">
				<s:VGroup width="100%" height="100%" paddingLeft="10" paddingRight="10">
					<s:DataGrid id="eventsDataGrid"
								width="100%"
								height="100%" 
								dataProvider="{beanData.events}">
						<s:columns>
							<s:ArrayList id="eventColumns">
								<s:GridColumn headerText="Time" dataField="date" width="200"/>
								<s:GridColumn headerText="Type" dataField="severity" width="100"/>
								<s:GridColumn headerText="Details" dataField="message"/>
								<s:GridColumn headerText="Environment" dataField="environmentName"/>
								<s:GridColumn headerText="Version" dataField="versionLabel"/>
							</s:ArrayList>
						</s:columns>
					</s:DataGrid>
				</s:VGroup>
			</s:NavigatorContent>
		</mx:TabNavigator>
	</s:BorderContainer>
</c9:ObjectManagementDetailsBox>
