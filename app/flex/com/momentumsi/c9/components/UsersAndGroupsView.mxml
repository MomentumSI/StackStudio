<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="800" height="600"
		 title="Users And Groups"
		 close="PopUpManager.removePopUp(this)"
		 creationComplete="creationCompleteHandler(event)"
		 move="Helpers.doMove(this)" xmlns:services="com.momentumsi.c9.services.*">
	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.constants.PermissionType;
			import com.momentumsi.c9.models.Group;
			import com.momentumsi.c9.models.User;
			import com.momentumsi.c9.services.OrgService;
			import com.momentumsi.c9.utils.Helpers;
			
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			public var user:User;
			[Bindable]
			public var usersCollection:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var groupsCollection:ArrayCollection = new ArrayCollection();
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				PopUpManager.centerPopUp(this);
				groupsList.setStyle("borderVisible", false);
				refreshOrg();
			}
			
			protected function refreshOrg(result:Event=null):void
			{
				if(user != null && user.org_id != null)
				{
					orgRefresh.getOrgDetails(user.org_id);
				}
			}
			
			protected function orgRefresh_resultHandler(event:ResultEvent):void
			{
				var accounts:Array = new Array();
				if(orgRefresh.result.org.accounts != null)
				{
					accounts = orgRefresh.result.org.accounts;
				}
				usersCollection.removeAll();
				for each(var a:Object in accounts)
				{
					var u:User = User.buildUser(a.account);
					usersCollection.addItem(u);
				}
				var groups:Array = new Array();
				if(orgRefresh.result.org.groups != null)
				{
					groups = orgRefresh.result.org.groups;
				}
				groupsCollection.removeAll();
				groupUsersDataGrid.dataProvider = null;
				for each(var g:Object in groups)
				{
					var group:Group = Group.buildGroup(g.group);
					groupsCollection.addItem(group);
				}
			}
			
			protected function deleteUsers_clickHandler(event:MouseEvent):void
			{
				Alert.show("Are you sure you want to delete user " + User(usersDataGrid.selectedItem).login + "?", "Delete User", Alert.YES | Alert.CANCEL, this, deleteAccountHandler);
			}
			
			private function deleteAccountHandler(event:CloseEvent):void
			{
				if(event.detail == Alert.YES)
				{
					if(User(usersDataGrid.selectedItem).id != null)
					{
						identityService.deleteUserAccount(User(usersDataGrid.selectedItem).id);
					}
				}
			}
			
			protected function editUser_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function createUser_clickHandler(event:MouseEvent):void
			{
				var createOrgUser:AddUserToOrg = AddUserToOrg(PopUpManager.createPopUp(UIComponent(this.parentApplication), AddUserToOrg , true));
				createOrgUser.orgUser = user;
			 	createOrgUser.addEventListener("userCreated", refreshOrg);
			}		
			
			protected function createGroup_clickHandler(event:MouseEvent):void
			{
				var createOrgGroup:GroupCreateView = GroupCreateView(PopUpManager.createPopUp(UIComponent(this.parentApplication), GroupCreateView , true));
				createOrgGroup.orgId = user.org_id;
				createOrgGroup.addEventListener("groupCreated", refreshOrg);
			}
			
			protected function deleteGroup_clickHandler(event:MouseEvent):void
			{
				Alert.show("Are you sure you want to delete group " + Group(groupsList.selectedItem).name + "?", "Delete Group", Alert.YES | Alert.CANCEL, this, deleteGroupHandler);
			}
			
			private function deleteGroupHandler(event:CloseEvent):void
			{
				if(event.detail == Alert.YES)
				{
					if(Group(groupsList.selectedItem).id != null)
					{
						orgService.deleteGroup(user.org_id, Group(groupsList.selectedItem).id);
					}
				}
			}
			
			protected function roleLabelFunction(item:User, column:GridColumn):String
			{
				if(item.hasPermission(PermissionType.ADMIN, PermissionType.TRANSCEND))
				{
					return "Admin";
				}else
				{
					return "User";
				}
			}
			
			protected function service_resultHandler(event:ResultEvent):void
			{
				refreshOrg();
			}
			
			protected function groupsList_changeHandler(event:IndexChangeEvent):void
			{
				if(groupsList.selectedIndex != -1)
				{
					groupUsersDataGrid.dataProvider = Group(groupsList.selectedItem).group_memberships;
				}
			}
			
			protected function manageGroupUsers_clickHandler(event:MouseEvent):void
			{
				if(groupsList.selectedIndex != -1)
				{
					var manageGroupUser:GroupManageUsers = GroupManageUsers(PopUpManager.createPopUp(UIComponent(this.parentApplication), GroupManageUsers , true));
					manageGroupUser.user = user;
					manageGroupUser.group = Group(groupsList.selectedItem);
					manageGroupUser.addEventListener("usersSet", refreshOrg);
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<services:OrgService id="orgRefresh"
							 result="orgRefresh_resultHandler(event)"/>
		
		<services:OrgService id="orgService"
							 result="service_resultHandler(event)"/>
		
		<services:IdentityService id="identityService"
								  result="service_resultHandler(event)"/>
	</fx:Declarations>
	
	<s:VGroup width="100%" height="94%" paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10">
		<mx:TabNavigator id="userAndGroupTabs" width="100%" height="100%" creationPolicy="all">
			<s:NavigatorContent id="usersContent" label="Users" width="100%" height="100%">
				<s:VGroup width="100%" height="100%">
					<s:HGroup width="100%" horizontalAlign="center">
						<s:Button id="createUser" label="Create User" width="102" click="createUser_clickHandler(event)"/>
						<!--<s:Button id="editUser" label="Edit User" width="102" click="editUser_clickHandler(event)" enabled="false"/>-->
						<s:Button id="deleteUsers" label="Delete Users" width="102" click="deleteUsers_clickHandler(event)" enabled="{usersDataGrid.selectedIndex!=-1 &amp;&amp; User(usersDataGrid.selectedItem).login != user.login}"/>
					</s:HGroup>
					<s:DataGrid id="usersDataGrid" width="100%" height="100%" dataProvider="{usersCollection}" selectionMode="singleRow">
						<s:columns>
							<s:ArrayCollection id="userGridColumns">
								<s:GridColumn headerText="Login" dataField="login"/>
								<s:GridColumn headerText="First Name" dataField="firstName"/>
								<s:GridColumn headerText="Last Name" dataField="lastName"/>
								<s:GridColumn headerText="Email" dataField="email"/>
								<s:GridColumn headerText="Role" labelFunction="roleLabelFunction"/>
							</s:ArrayCollection>
						</s:columns>
					</s:DataGrid>
				</s:VGroup>
			</s:NavigatorContent>
			<s:NavigatorContent id="groupsContent" label="Groups" width="100%" height="100%">
				<s:HGroup width="100%" height="100%">
					<s:VGroup width="200" height="100%">
						<mx:Text text="Groups" fontWeight="bold"/>
						<s:BorderContainer cornerRadius="4" height="100%" width="100%">
							<s:Rect width="100%" height="100%">
								<s:fill>
									<s:SolidColor>
										<s:color>0x330066</s:color>
									</s:SolidColor>
								</s:fill>
							</s:Rect>
							<s:VGroup width="100%" height="100%" paddingTop="10">
								<s:List id="groupsList" 
										styleName="transparentList"
									 	dataProvider="{groupsCollection}"
									 	labelField="name"
									 	change="groupsList_changeHandler(event)"
										height="100%" width="100%" 
										color="white"/>
								<s:HGroup width="100%" paddingLeft="10" paddingRight="10" paddingBottom="10">
									<s:HGroup width="100%" horizontalAlign="left">
										<s:Button id="createGroup" label="Create" click="createGroup_clickHandler(event)"/>
									</s:HGroup>
									<s:HGroup width="100%" horizontalAlign="right">
										<s:Button id="deleteGroup" label="Delete" click="deleteGroup_clickHandler(event)"/>
									</s:HGroup>
								</s:HGroup>
							</s:VGroup>
						</s:BorderContainer>
					</s:VGroup>
					<s:VGroup width="100%" height="100%">
						<s:HGroup width="100%" gap="20">
							<mx:Text text="Group Users" fontWeight="bold"/>
							<s:Button label="Manage Group Users" click="manageGroupUsers_clickHandler(event)"/>
						</s:HGroup>
						<s:DataGrid id="groupUsersDataGrid" width="100%" height="100%" selectionMode="singleRow">
							<s:columns>
								<s:ArrayCollection id="groupUserGridColumns">
									<s:GridColumn headerText="Login" dataField="group_membership.account.login"/>
									<s:GridColumn headerText="First Name" dataField="group_membership.account.first_name"/>
									<s:GridColumn headerText="Last Name" dataField="group_membership.account.last_name"/>
								</s:ArrayCollection>
							</s:columns>
						</s:DataGrid>
					</s:VGroup>
				</s:HGroup>
			</s:NavigatorContent>
		</mx:TabNavigator>
	</s:VGroup>
	<s:Button x="365" y="536" label="Close" click="PopUpManager.removePopUp(this)"/>
</s:TitleWindow>
