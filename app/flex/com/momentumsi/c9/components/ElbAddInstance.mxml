<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="600" height="550"
		 title="Add Instance"
		 close="PopUpManager.removePopUp(this)"
		 creationComplete="creationCompleteHandler(event)" xmlns:services="com.momentumsi.c9.services.*">
	<fx:Script>
		<![CDATA[
			import com.maccherone.json.*;
			import com.momentumsi.c9.constants.AlertMessage;
			import com.momentumsi.c9.models.CloudAccount;
			import com.momentumsi.c9.representers.ComputeRepresenter;
			import com.momentumsi.c9.representers.LoadBalancerRepresenter;
			import com.momentumsi.c9.utils.Helpers;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.GridSelectionEvent;
			
			[Bindable]
			private var ec2Collection:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var availabilityZonesList:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var cloudAccount:CloudAccount;
			[Bindable]
			public var region:String;
			[Bindable]
			public var elbData:LoadBalancerRepresenter;
			[Bindable]
			private var tempZoneAdd:String = "";
			[Bindable]
			private var tempZone:String = "";
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				PopUpManager.centerPopUp(this);
				availabilityZonesList.removeAll();
				for each(var zone:Object in Helpers.getObjectManagement(this).elbDetails.availabilityZonesHealthList)
				{
					var newZone:Object = {AvailabilityZone: zone.AvailabilityZone, InstanceCount: parseInt(zone.InstanceCount)};
					availabilityZonesList.addItem(newZone);
				}
				
				var requestParams:Object = new Object();
				requestParams["cloud_account_id"] = cloudAccount.id;
				requestParams["load_balancer_ip"] = elbData.dnsName;
				if(cloudAccount.cloud_provider == CloudAccount.EUCALYPTUS)
				{
					requestParams["load_balancer_az"] = elbData.singleZone;
				}
				getAvailableInstances.request = requestParams;
				getAvailableInstances.send();
			}
			
			protected function getAvailableInstances_resultHandler(event:ResultEvent):void
			{
				ec2Collection.removeAll();
				
				var resultColl:ArrayCollection = new ArrayCollection(getAvailableInstances.result as Array); 
				for each(var item:Object in resultColl)
				{
					ec2Collection.addItem(new ComputeRepresenter(item));
				}
				busy.visible = false;
			}
			
			protected function getAvailableInstances_faultHandler(event:FaultEvent):void
			{
				busy.visible = false;
			}
			
			protected function submitButton_clickHandler(event:MouseEvent):void
			{
				if(ec2List.selectedIndex != -1)
				{
					submitButton.enabled = false;
					var requestParams:Object = new Object();
					requestParams["load_balancer_name"] = elbData.name;
					requestParams["instance_id"] = (ec2List.selectedItem as ComputeRepresenter).id;
					requestParams["availability_zone"] = (ec2List.selectedItem as ComputeRepresenter).availabilityZone;
					addInstanceToLoadBalancer.request = requestParams;
					addInstanceToLoadBalancer.send();
				}
			}
			
			protected function cancelButton_clickHandler(event:MouseEvent):void
			{
				PopUpManager.removePopUp(this);
			}
			
			protected function ec2List_selectionChangeHandler():void
			{
				var zone:Object;
				if(tempZoneAdd != "")
				{
					if(tempZone != "")
					{
						for each(zone in availabilityZonesList)
						{
							if(tempZone == zone.AvailabilityZone)
							{
								availabilityZonesList.removeItemAt(availabilityZonesList.getItemIndex(zone));
								tempZone = "";
								break;
							}
						}
					}else
					{
						for each(zone in availabilityZonesList)
						{
							if(tempZoneAdd == zone.AvailabilityZone)
							{
								zone.InstanceCount--;
							}
						}
					}
				}
				
				tempZoneAdd = (ec2List.selectedItem as ComputeRepresenter).availabilityZone;
				var found:Boolean = false;
				for each(zone in availabilityZonesList)
				{
					if(tempZoneAdd == zone.AvailabilityZone)
					{
						found = true;
						zone.InstanceCount++;
					}
				}
				
				if(!found)
				{
					availabilityZonesList.addItem({AvailabilityZone: tempZoneAdd, InstanceCount: 1});
					tempZone = tempZoneAdd;
				}
				
				azDatagrid.dataProvider = null;
				azDatagrid.dataProvider = availabilityZonesList;
			}
			
			protected function addInstanceToLoadBalancer_resultHandler(event:ResultEvent):void
			{
				var objectManagement:ObjectManagementTab = Helpers.getObjectManagement(this);
				objectManagement.elbDetails.refreshLoadBalancer.send({physical_id: elbData.name});
				
				PopUpManager.removePopUp(this);
			}
			
			protected function addInstanceToLoadBalancer_faultHandler(event:FaultEvent):void
			{
				Alert.show(AlertMessage.REGISTER_FAILED);
			}
			
			private function instanceName_labelFunction(item:ComputeRepresenter, column:GridColumn):String
			{
				if(item.name == null || item.name == "")
				{
					return "(" + item.publicIpAddress + ")";
				}else{
					return item.name;
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<services:CloudApiService id="getAvailableInstances"
								  action="get_instances_available_to_load_balancer"
								  cloudAccountId="{cloudAccount.id}"
								  region="{region}"
								  serviceType="ELB"
								  result="getAvailableInstances_resultHandler(event)"
								  fault="getAvailableInstances_faultHandler(event)"/>
		
		<services:CloudApiService id="addInstanceToLoadBalancer"
								  action="register_instances_with_load_balancer"
								  cloudAccountId="{cloudAccount.id}"
								  region="{region}"
								  serviceType="ELB"
								  result="addInstanceToLoadBalancer_resultHandler(event)"
								  fault="addInstanceToLoadBalancer_faultHandler(event)"/>
	</fx:Declarations>
	<s:VGroup width="100%" height="88%" paddingTop="10" paddingLeft="20" paddingRight="20">
		<mx:Text width="100%" text="Select an available instance below to add to your load balancer. If the instance is not from a distributed availability zone, it will be added for you."/>
		<s:HGroup>
			<mx:Text text="Available Instances:" fontWeight="bold"/>
			<mx:Text id="busy" text="Loading..."/>
		</s:HGroup>
		<s:DataGrid id="ec2List" 
					width="100%"
					minHeight="0" maxHeight="192" 
					dataProvider="{ec2Collection}" 
					selectionMode="singleRow"
					selectionChange="ec2List_selectionChangeHandler()">
			<s:columns>
				<s:ArrayList id="ec2GridColumns">
					<s:GridColumn headerText="Instance ID" dataField="id"/>
					<s:GridColumn headerText="Name (Public IP)" dataField="name" labelFunction="instanceName_labelFunction"/>
					<s:GridColumn headerText="Zone" dataField="availabilityZone"/>
					<s:GridColumn headerText="State" dataField="state" itemRenderer="com.momentumsi.c9.components.StatusColumn"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
		<mx:Text text="Availability Zone Distribution:" fontWeight="bold"/>
		<s:DataGrid id="azDatagrid" width="100%" minHeight="0" maxHeight="150" dataProvider="{availabilityZonesList}" selectionMode="none">
			<s:columns>
				<s:ArrayList id="azGridColumns">
					<s:GridColumn headerText="Availability Zone" dataField="AvailabilityZone" width="275"/>
					<s:GridColumn headerText="Instance Count" dataField="InstanceCount" width="275"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
	</s:VGroup>
	<s:Button id="submitButton" x="226" y="486" label="Add" click="submitButton_clickHandler(event)" enabled="{ec2List.selectedIndex != -1}"/>
	<s:Button id="cancelButton" x="303" y="486" label="Cancel" click="cancelButton_clickHandler(event)"/>
</s:TitleWindow>
