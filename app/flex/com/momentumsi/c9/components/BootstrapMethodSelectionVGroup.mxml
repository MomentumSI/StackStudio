<?xml version="1.0" encoding="utf-8"?>
<mx:VDividedBox xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:services="com.momentumsi.c9.services.*"
				xmlns:components="com.momentumsi.c9.components.*"
				xmlns:models="com.momentumsi.c9.models.*"
				width="100%" height="100%"
				creationComplete="tabnavigator1_creationCompleteHandler(event)" paddingBottom="15"
				paddingLeft="15" paddingRight="15">
	
	<fx:Script>
		<![CDATA[
			import com.maccherone.json.JSON;
			import com.momentumsi.c9.constants.ImagePath;
			import com.momentumsi.c9.constants.PlatformConstants;
			import com.momentumsi.c9.constants.ResourceType;
			import com.momentumsi.c9.events.compute.GetRunListFaultEvent;
			import com.momentumsi.c9.events.compute.GetRunListResultEvent;
			import com.momentumsi.c9.models.CloudAccount;
			import com.momentumsi.c9.models.Element;
			import com.momentumsi.c9.models.Node;
			import com.momentumsi.c9.models.resources.CFAuthentication;
			import com.momentumsi.c9.models.resources.CFInit;
			import com.momentumsi.c9.models.resources.ChefCookbook;
			import com.momentumsi.c9.models.resources.ChefRole;
			import com.momentumsi.c9.models.resources.ComputeWizardObjectRepresenter;
			import com.momentumsi.c9.models.resources.IamAccessKey;
			import com.momentumsi.c9.models.resources.PuppetClass;
			import com.momentumsi.c9.models.resources.PuppetModule;
			import com.momentumsi.c9.models.resources.cfInit.File;
			import com.momentumsi.c9.services.ApiService;
			import com.momentumsi.c9.templates.AwsLinuxChefUserdataObject;
			import com.momentumsi.c9.templates.DefaultUserDataObject;
			import com.momentumsi.c9.templates.UbuntuChefUserDataObject;
			import com.momentumsi.c9.templates.UserdataObject;
			import com.momentumsi.c9.utils.Helpers;
			import com.momentumsi.c9.utils.IntrinsicFunctionUtil;
			import com.momentumsi.c9.utils.VectorUtil;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Label;
			import mx.core.IUIComponent;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.DragManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.Panel;
			import spark.events.IndexChangeEvent;
			[Bindable]
			public var cloudAccount:CloudAccount;
			[Bindable]
			public var region:String;
			[Bindable]
			public var selectedInstalls:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var availableInstalls:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var availableChefRoles:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var selectedChefRoles:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var availablePuppetModules:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var selectedPuppetModules:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var instanceProperties:ComputeWizardObjectRepresenter;
			[Bindable]
			private var parser:UserDataParser = new UserDataParser();
			[Bindable]
			private var chefServerUrl:String;
			[Bindable]
			private var chefBucket:String;
			private var chefRunList:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var selectedRecipe:ChefCookbook;
			[Bindable]
			private var selectedRole:ChefRole;
			[Bindable]
			private var selectedModule:PuppetModule;
			[Bindable]
			public var platform:String;
			public var installParameters:ArrayCollection;
			
			protected function dragEnterHandler(event:DragEvent):void
			{
				DragManager.acceptDragDrop(event.currentTarget as IUIComponent);
			}
			
			protected function dragDropHandler(event:DragEvent):void
			{
				var installSections:VGroup = event.currentTarget as VGroup;
				//var dropIndex:int = installSections.getElementIndex(dropPanel);
				installSections.addElement(event.dragInitiator as Panel);
			}
			
			
			protected function tabnavigator1_creationCompleteHandler(event:FlexEvent):void
			{
				if(selectedInstalls.length > 0)
				{
					var object:Object = selectedInstalls.getItemAt(0);
					if(object != null)
					{
						if(object.hasOwnProperty("chef_type"))
						{
							removeIncompatibleRoles();
							selectedChefRoles = selectedInstalls;
							checkAndSetInstalls(availableRolesList, selectedChefRoles, "chef");
						}else{
							selectedPuppetModules = selectedInstalls;
							checkAndSetInstalls(availableModulesList, selectedPuppetModules, "puppet");
						}
					}
					
					checkAndSetUserdata();
				}
				s3Service.describeBuckets();
				installTabs.removeElementAt(1);
				installTabs.removeElementAt(1);

				chefServerUrl = cloudAccount.stackPreferences.chef_server_url;
				chefBucket = cloudAccount.stackPreferences.chef_bucket;
			}
			
			private function removeIncompatibleRoles():void
			{
				var compatibleColl:ArrayCollection = new ArrayCollection();
				if(platform == null || availableChefRoles == null || availableChefRoles.length == 0)
				{
					return;
				}
				for each(var role:ChefRole in availableChefRoles)
				{
					if(role.availablePlatforms.contains(platform.toLocaleLowerCase()))
					{
						compatibleColl.addItem(role);
					}
				}
				
				availableChefRoles = compatibleColl;
			}
			
			private function checkAndSetInstalls(availableList:List, selectedInstalls:ArrayCollection, type:String):void
			{
				if(selectedInstalls.length > 0)
				{
					var tmpColl:ArrayCollection = new ArrayCollection();
					tmpColl.addAll(selectedInstalls);
					//selectedInstalls.removeAll();
					var listCollection:ArrayCollection = new ArrayCollection(availableList.dataProvider.toArray());
					var listItem:Object;
					if(tmpColl.source && tmpColl.source.length > 0)
					{
						var itemIndex:int;
						for each(var obj:Object in tmpColl)
						{
							for each(listItem in listCollection)
							{
								if(listItem.name == obj.name)
								{
									itemIndex = listCollection.getItemIndex(listItem);
									availableList.selectedIndex = itemIndex;
									break;
								}
							}
						}
						//addSelectedRoles(selectedItems, false);
					}
				}
				
				if(type == "chef")
				{
					methodRBGroup.selection = chefRB;
				}else{
					methodRBGroup.selection = puppetRB;
				}
			}
			
			private function checkAndSetUserdata():void
			{
				if(instanceProperties.userdata)
				{
					parser.extractCode(instanceProperties.userdata);	
				}else{
					parser.extractCode();
				}
				for each(var panel:BootstrapPanel in parser.fileSections)
				{
					userdataVG.addElement(panel);
				}
				if(parser.fileSections.length == 0)
				{
					methodRBGroup.selection = noInstallsRB;
				}
			}
			
			private function getBucketContents(event:ListEvent):void
			{
				s3Service.listBucket(String(installScriptBucketsCB.selectedItem.key));
			}
			
			private function installList_labelFunction(item:Object):String
			{
				var keyName:String = item.key;
				return keyName;
			}
			
			
			protected function addButton_clickHandler():void
			{
				var newInstall:BootstrapPanel;
				var newInstallParser:UserDataParser;
				var bucketName:String;
				var scriptName:String;
				var index:int;
				var selectedItem:Object;
				var role:String;
				switch(methodRBGroup.selection)
				{
					case chefRB:
						addSelectedRoles(availableRolesList.selectedItems);
						break;
					case initRB:
						if(selectedInstalls.getItemIndex(availableInstallsList.selectedItem) == -1)
						{
							for each(selectedItem in availableInstallsList.selectedItems)
							{
								newInstallParser = new UserDataParser();
								index = availableInstallsList.dataProvider.getItemIndex(selectedItem);
								selectedInstalls.addItemAt(selectedItem, 0);
								availableInstallsList.dataProvider.removeItemAt(index);
								bucketName = String(installScriptBucketsCB.selectedItem.name);
								scriptName = selectedItem.key;
								newInstallParser.addInstall(bucketName, scriptName, scriptName.split("_")[0]);
								index = userdataVG.numElements;
								if(index == 0)
								{
									index = 1;
								}
								newInstall = newInstallParser.fileSections.getItemAt(0) as BootstrapPanel;
								newInstall.install = selectedItem;
								userdataVG.addElementAt(newInstall, index - 1);
								parser.fileSections.addItemAt(newInstallParser.fileSections.getItemAt(0), index - 1);
								newInstall.getParameters(cloudAccount.id, bucketName, scriptName);
							}
						}
						break;
					case puppetRB:
						break;
				}
			}
			
			private function addSelectedRoles(selectedItems:Vector.<Object>, displayAlert:Boolean=true):void
			{
				//UnaddedRoles array is used to display which roles were selected, but not added
				//because already in selected list
				var unaddedRoles:Array = [];
				
				var selectedItem:Object;
				var role:String;
				for each(selectedItem in selectedItems)
				{
					if(selectedChefRoles.contains(selectedItem))
					{
						unaddedRoles.push(selectedItem.name);
					}else{
						role = "role[" + selectedItem.name + "]";
						chefRunList.addItem(role);
						selectedChefRoles.addItemAt(selectedItem, 0);
					}
				}
				if(unaddedRoles.length > 0 && displayAlert)
				{
					Alert.show("Role(s) [" + unaddedRoles.join(',') + "] already in list.");
				}
			}
			
			protected function removeButton_clickHandler(event:MouseEvent):void
			{
				var selectedItem:Object;
				switch(methodRBGroup.selection)
				{
					case chefRB:
						for each(selectedItem in selectedRolesList.selectedItems)
					{
						selectedChefRoles.removeItemAt(selectedRolesList.dataProvider.getItemIndex(selectedItem));
					}
						break;
					case initRB:
						for each(selectedItem in selectedInstallsList.selectedItems)
					{
						selectedInstalls.removeItemAt(selectedInstallsList.dataProvider.getItemIndex(selectedItem));
						
						availableInstallsList.dataProvider.addItemAt(selectedItem, 0);
						
						var panel:DraggableTextPanel;
						for(var index:int = 0; index < userdataVG.numElements; index++)
						{
							panel = userdataVG.getElementAt(index) as DraggableTextPanel;
							if(panel.install == selectedItem)
							{
								userdataVG.removeElement(panel);							
							}
						}
					}
						break;
					case puppetRB:
						break;
				}
			}
			
			protected function methodRBGroup_changeHandler(event:Event):void
			{
				if(methodRBGroup.selection == noInstallsRB)
				{
					installTabs.enabled = false;
				}else{
					installTabs.enabled = true;
					installTabs.removeElementAt(0);
					if(methodRBGroup.selection == chefRB)
					{
						installTabs.addElementAt(chefContent, 0);
					}else if(methodRBGroup.selection == initRB)
					{
						installTabs.addElementAt(initContent, 0);
					}else if(methodRBGroup.selection == puppetRB)
					{
						installTabs.addElementAt(puppetContent, 0);
					}
					installTabs.selectedIndex = 0;
				}
			}
			
			protected function parametersService_resultHandler(event:ResultEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function availableRolesList_valueCommitHandler(event:FlexEvent):void
			{
				if(availableChefRoles.length == 0)
				{
					return;
				}
				selectedRole = availableRolesList.selectedItem as ChefRole;
				if(selectedRole != null)
				{
					runListCB.dataProvider = selectedRole.cookbooks;
				}
			}
			
			protected function availableModulesList_valueCommitHandler(event:FlexEvent):void
			{
				if(availablePuppetModules.length == 0)
				{
					return;
				}
				selectedModule = availableModulesList.selectedItem as PuppetModule;
				if(selectedModule != null)
				{
					classesListCB.dataProvider = new ArrayCollection([selectedModule.puppetClass]);
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:RadioButtonGroup id="methodRBGroup"
							valueCommit="methodRBGroup_changeHandler(event)"/>
		
		<services:S3Service id="s3Service"
						    cloudAccountId="{cloudAccount.id}"
							region="{region}"/>
		
		<services:CloudApiService id="parametersService"
								  cloudAccountId="{cloudAccount.id}"
								  region="{region}"
								  result="parametersService_resultHandler(event)"/>
	</fx:Declarations>
	<s:FormItem id="installMethodFI"
				height="72"
				label="Method:">
		<s:HGroup id="installMethodRBHG"
				  height="57">
			<s:RadioButton id="initRB" group="{methodRBGroup}"/>
			<s:VGroup>
				<s:Image
					width="38" height="38"
					smoothingQuality="high" smooth="true"
					source="{ImagePath.CLOUD_FORMATION_LOGO}"/>
				<s:Label fontFamily="Arial" fontSize="8" fontWeight="bold"
						 text="Native &#xd;(CF-Init)" textAlign="center" verticalAlign="top"/>
			</s:VGroup>
			<s:RadioButton id="chefRB" 
						   group="{methodRBGroup}"/>
			<s:VGroup width="80" horizontalAlign="center" gap="0">
				<s:Image 
					height="55%" width="55%" 
					scaleMode="letterbox" 
					smoothingQuality="high" smooth="true" 
					source="{ImagePath.CHEF_LOGO}"/>
				
			</s:VGroup>
			<s:RadioButton id="puppetRB" group="{methodRBGroup}"/>
			<s:VGroup horizontalAlign="center">	
				<s:Image 
					source="{ImagePath.PUPPET_LOGO}"
					smoothingQuality="high"
					smooth="true"
					scaleX=".50" scaleY=".50"/>
			</s:VGroup>
			<s:RadioButton id="noInstallsRB"
						   label="None" 
						   fontFamily="Arial" fontWeight="bold"
						   selected="true"
						   group="{methodRBGroup}"/>
		</s:HGroup>
	</s:FormItem>
	<s:BorderContainer id="installMethodContainer" 
					   width="100%" height="100%" 
					   borderVisible="false">
		<mx:TabNavigator id="installTabs" 
						 width="100%" height="100%" 
						 selectedIndex="1"
						 enabled="false">
			<s:NavigatorContent  id="initContent" label="CF-Init" height="100%" width="100%">
				<s:VGroup height="100%" width="100%">
					<s:FormItem label="S3 Bucket Name:">
						<s:HGroup>
							<mx:ComboBox id="installScriptBucketsCB"
										 width="218" 
										 selectedIndex="0"
										 labelField="key"
										 prompt="Select Bucket"
										 change="getBucketContents(event)"								    
										 dataProvider="{s3Service.buckets}">
							</mx:ComboBox>
						</s:HGroup>
					</s:FormItem>
					<s:HGroup width="100%" height="100%">
						<s:List id="availableInstallsList"
								width="100%" height="100%"
								allowMultipleSelection="true"
								dataProvider="{s3Service.bucketContents}"
								labelFunction="installList_labelFunction"/>
						<s:VGroup height="100%" verticalAlign="middle">
							<s:Button label="Add"
									  click="addButton_clickHandler()"
									  enabled="{availableInstallsList.selectedItem != null}"/>
							<s:Button label="Remove" 
									  click="removeButton_clickHandler(event)"
									  enabled="{selectedInstallsList.selectedItem != null}"/>
						</s:VGroup>
						<s:List id="selectedInstallsList"
								allowMultipleSelection="true"
								dataProvider="{selectedInstalls}"
								labelFunction="installList_labelFunction"
								width="100%" height="100%"/>
					</s:HGroup>
				</s:VGroup>
			</s:NavigatorContent>
			<s:NavigatorContent id="chefContent" label="Chef" width="100%" height="100%">
				<s:HGroup width="100%" height="100%">
					<s:VGroup height="100%" horizontalAlign="center">
						<s:Label fontWeight="bold" text="Available&#xd;Roles:" textAlign="center"/>
						<s:List id="availableRolesList"
								dataProvider="{availableChefRoles}"
								labelField="name"
								allowMultipleSelection="false"
								width="20%" height="100%"
								valueCommit="availableRolesList_valueCommitHandler(event)"/>
					</s:VGroup>
					<s:VGroup height="100%" verticalAlign="middle">
						<s:Button label="Add" 
								  click="addButton_clickHandler()"
								  enabled="{availableRolesList.selectedItem != null}"/>
						<s:Button label="Remove"
								  click="removeButton_clickHandler(event)"
								  enabled="{availableRolesList.selectedItem != null}"/>
					</s:VGroup>
					<s:VGroup height="100%" horizontalAlign="center">
						<s:Label fontWeight="bold" text="Selected&#xd;Roles:" textAlign="center"/>
						<s:List id="selectedRolesList"
								dataProvider="{selectedChefRoles}"
								labelField="name"
								allowMultipleSelection="true"
								width="20%"
								height="100%"/>
					</s:VGroup>
					<s:BorderContainer height="100%" width="100%">
						<s:VGroup id="recipeDescriptionVG"
								  paddingLeft="5"
								  width="100%" height="100%" 
								  gap="0">
							<s:FormHeading id="roleFormHeading"
										   label="{selectedRole.name} Details"/>
							<s:BusyIndicator id="loadingRecipeIndicator"
											 height="100%" width="100%"
											 visible="false" includeInLayout="false"/>
							<s:Label id="loadingLabel"
									 visible="{loadingRecipeIndicator.visible}"
									 includeInLayout="{loadingRecipeIndicator.visible}"
									 text="Loading Description..."/>
							<s:Scroller id="roleDetailsContainer"
										visible="{!loadingRecipeIndicator.visible}"
										includeInLayout="{!loadingRecipeIndicator.visible}"
										horizontalScrollPolicy="auto"
										width="100%" height="100%">
								<s:Group width="100%" height="100%">
									<s:Form width="100%"
											height="100%">
										<s:FormItem label="Run List:">
											<mx:ComboBox id="runListCB"
														 labelField="name"/>
										</s:FormItem>
										<s:FormItem label="Version:">
											<s:Label text="{(runListCB.selectedItem as ChefCookbook).version}"/>
										</s:FormItem>
										<s:FormItem width="100%" label="Description">
											<s:TextArea id="recipeLongDescription" width="300"
														editable="false"
														text="{(runListCB.selectedItem as ChefCookbook).longDescription}"/>
										</s:FormItem>
										<s:FormItem label="Platforms">
											<s:Label text="{(runListCB.selectedItem as ChefCookbook).platformsDisplay}"/>
										</s:FormItem>
									</s:Form>
								</s:Group>
							</s:Scroller>
						</s:VGroup>
					</s:BorderContainer>
				</s:HGroup>
			</s:NavigatorContent>
			<s:NavigatorContent id="puppetContent" label="Puppet">
				<s:HGroup width="100%" height="100%">
					<s:VGroup height="100%" horizontalAlign="center">
						<s:Label fontWeight="bold" text="Available&#xd;Modules:" textAlign="center"/>
						<s:List id="availableModulesList"
								dataProvider="{availablePuppetModules}"
								labelField="name"
								allowMultipleSelection="false"
								height="100%" width="20%"
								valueCommit="availableModulesList_valueCommitHandler(event)"/>
					</s:VGroup>
					<s:VGroup height="100%" verticalAlign="middle">
						<s:Button label="Add" 
								  click="addButton_clickHandler()"
								  enabled="{availableModulesList.selectedItem != null}"/>
						<s:Button label="Remove"
								  click="removeButton_clickHandler(event)"
								  enabled="{selectedModulesList.selectedItem != null}"/>
					</s:VGroup>
					<s:VGroup height="100%" horizontalAlign="center">
						<s:Label fontWeight="bold" text="Selected&#xd;Modules:" textAlign="center"/>
						<s:List id="selectedModulesList"
								dataProvider="{selectedPuppetModules}"
								labelField="name"
								allowMultipleSelection="true"
								height="100%" width="20%"/>
					</s:VGroup>
					<s:BorderContainer height="100%" width="100%">
						<s:VGroup id="moduleDescriptionVG"
								  paddingLeft="5"
								  width="100%" height="100%" 
								  gap="0">
							<s:FormHeading id="moduleFormHeading"
										   label="{selectedModule.name} Details"/>
							<s:Scroller id="moduleDetailsContainer"
										horizontalScrollPolicy="auto"
										width="100%" height="100%">
								<s:Group width="100%" height="100%">
									<s:Form width="100%"
											height="100%">
										<s:FormItem label="Classes:">
											<mx:ComboBox id="classesListCB"
														 labelField="name"/>
										</s:FormItem>
										<s:FormItem width="100%" label="Description:">
											<s:TextArea width="300"
														editable="false"
														text="{(classesListCB.selectedItem as PuppetClass).longDescription}"/>
										</s:FormItem>
										<s:FormItem label="Parameters:">
											<s:Label text="{(classesListCB.selectedItem as PuppetClass).argumentsDisplay}"/>
										</s:FormItem>
									</s:Form>
								</s:Group>
							</s:Scroller>
						</s:VGroup>
					</s:BorderContainer>
				</s:HGroup>
			</s:NavigatorContent>
			<s:NavigatorContent label="Bootstrap Commands" height="100%" width="100%">
				<s:Scroller height="100%" width="100%">
					<s:viewport>
						<s:VGroup id="userdataVG"
								  dragEnter="dragEnterHandler(event)"
								  dragDrop="dragDropHandler(event)"
								  width="100%"
								  height="100%"
								  horizontalAlign="center">
						</s:VGroup>
					</s:viewport>
				</s:Scroller>
			</s:NavigatorContent>
		</mx:TabNavigator>
	</s:BorderContainer>
	
	<!--
	<s:Scroller height="100%" width="100%">
		<s:viewport>
			<s:VGroup dragEnter="dragEnterHandler(event)"
					  dragDrop="dragDropHandler(event)"
					  width="100%"
					  height="100%"
					  horizontalAlign="center">
				<s:Panel title="Pre-init"
						 width="80%"
						 height="80"
						 mouseDown="mouseDownHandler(event)"
						 mouseOver="mouseOverHandler(event)">
					<s:TextArea width="100%" height="100%"/>
				</s:Panel>
				<s:Panel title="CF-Init"
						 width="80%"
						 height="80"
						 mouseDown="mouseDownHandler(event)"
						 mouseOver="mouseOverHandler(event)">
					<s:TextArea width="100%" height="100%"/>
				</s:Panel>
				<s:Panel title="User Scripts"
						 width="80%"
						 height="80"
						 mouseDown="mouseDownHandler(event)"
						 mouseOver="mouseOverHandler(event)">
					<s:TextArea width="100%" height="100%"/>
				</s:Panel>
				<s:Panel title="Post Signal"
						 width="80%"
						 height="80"
						 mouseDown="mouseDownHandler(event)"
						 mouseOver="mouseOverHandler(event)">
					<s:TextArea width="100%" height="100%"/>
				</s:Panel>
			</s:VGroup>
		</s:viewport>
	</s:Scroller>
	-->
</mx:VDividedBox>
