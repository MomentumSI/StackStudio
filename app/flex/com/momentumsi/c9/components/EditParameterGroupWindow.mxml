<?xml version="1.0" encoding="utf-8"?>
<components:CustomTitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
							  xmlns:s="library://ns.adobe.com/flex/spark" 
							  xmlns:mx="library://ns.adobe.com/flex/mx"
							  title="Edit {parameterGroup} Parameters"
							  xmlns:components="com.momentumsi.c9.components.*"
							  width="640" height="392"
							  creationComplete="customtitlewindow1_creationCompleteHandler(event)" xmlns:services="com.momentumsi.c9.services.*">
	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.models.resources.ParameterGroupParam;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.GridItemEditorEvent;
			
			[Bindable]
			public var parametersCollection:ArrayCollection;
			[Bindable]
			private var modifiableParameters:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var viewingParameters:ArrayCollection;
			[Bindable]
			public var parameterGroup:String;
			[Bindable]
			public var region:String;
			public var paramGroupType:String;
			
			protected function previousButton_clickHandler(event:MouseEvent):void
			{
				if(checkFormMods()== true){
					return;
				}
				var startIndex:int = modifiableParameters.getItemIndex(viewingParameters.getItemAt(0)) - 1;
				viewingParameters = new ArrayCollection();
				for(var index:int=startIndex; index > startIndex - 10; index--)
				{
					if(index < 0)
					{
						previousButton.enabled = false;
						return;
					}else{
						viewingParameters.addItemAt(modifiableParameters.getItemAt(index), 0);	
					}
				}
			}
			
			protected function nextButton_clickHandler(event:MouseEvent):void
			{
				if(checkFormMods()== true){
					return;
				}
				var startIndex:int = modifiableParameters.getItemIndex(viewingParameters.getItemAt(viewingParameters.length -1)) + 1;
				
				viewingParameters = new ArrayCollection();
				for(var index:int=startIndex; index < startIndex + 10; index++)
				{
					if(index >= modifiableParameters.length)
					{
						nextButton.enabled = false;
						return;
					}else{
						viewingParameters.addItem(modifiableParameters.getItemAt(index));	
					}
				} 
			}
			
			private function checkFormMods():Boolean
			{
				for each(var param:ParameterGroupParam in viewingParameters)
				{
					if(param.isChanged)
					{
						Alert.show("Save changes before moving on.");
						return true;
					}
				}
				return false;
			}
			
			protected function customtitlewindow1_creationCompleteHandler(event:FlexEvent):void
			{
				rdsService.addEventListener(RdsService.DB_PARAM_GROUP_MODIFIED, paramGroupModifiedHandler);
				cacheService.addEventListener(ElcService.CACHE_PARAM_GROUP_MODIFIED, paramGroupModifiedHandler);
				for each(var param:ParameterGroupParam in parametersCollection)
				{
					if(param.isModifiable == "true")
					{
						modifiableParameters.addItem(param);
					}
				}
				viewingParameters = new ArrayCollection();
				for(var index:int=0; index < 10; index++)
				{
					if(index >= modifiableParameters.length)
					{
						previousButton.enabled = false;
						nextButton.enabled = false;
						return;
					}else{
						viewingParameters.addItem(modifiableParameters.getItemAt(index));	
					}
				}
			}
			
			private var currentValue:String;
			protected function parametersDataGrid_gridItemEditorSessionStartHandler(event:GridItemEditorEvent):void
			{
				var param:ParameterGroupParam = parametersDataGrid.selectedItem as ParameterGroupParam;
				currentValue = param.value;
				if(currentValue == null)
				{
					currentValue = "";
				}
			}
			
			protected function parametersDataGrid_gridItemEditorSessionSaveHandler(event:GridItemEditorEvent):void
			{
				var param:ParameterGroupParam = parametersDataGrid.selectedItem as ParameterGroupParam;				
				if(param.value != param.previousValue && param.value != currentValue)
				{
					param.previousValue = currentValue;
					param.isChanged = true;
				}
			}
				
			protected function saveButton_clickHandler(event:MouseEvent):void
			{
				var parameters:Array = [];
				for each(var param:ParameterGroupParam in viewingParameters)
				{
					if(param.isChanged)
					{
						if(paramGroupType == "rds")
						{
							parameters.push({ParameterName: param.name, ParameterValue: param.value, ApplyMethod: "pending-reboot"});
						}else{
							parameters.push({param_name: param.name, param_value: param.value});
						}
					}
				}
				if(paramGroupType == "rds")
				{
					rdsService.modifyDbParameterGroup(parameterGroup, parameters);
				}else{
					cacheService.modifyCacheParameterGroup(parameterGroup, parameters);
				}
			}
			
			protected function paramGroupModifiedHandler(event:Event):void
			{
				Alert.yesLabel = "Continue";
				Alert.noLabel = "Done";
				Alert.show("Parameters have been updated.  Click \"Continue\" to keep editing, or click \"Done\" to close this window.", "Parameters Saved", Alert.YES|Alert.NO, this, alertClickHandler);
				
				// Set the labels back to normal:
				Alert.yesLabel = "Yes";
				Alert.noLabel = "No";
			}
			
			// Event handler for user interaction after successful save of parameters
			private function alertClickHandler(event:CloseEvent):void
			{
				if(event.detail == Alert.NO)
				{
					PopUpManager.removePopUp(this);
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<services:RdsService id="rdsService" region="{region}"/>
		<services:ElcService id="cacheService" region="{region}"/>
	</fx:Declarations>
	<s:Scroller x="10" y="23" width="619" height="284">
		<s:VGroup width="100%" height="100%">
			<s:DataGrid id="parametersDataGrid" 
						width="800" height="100%"
						requestedRowCount="10"
						editable="true"
						dataProvider="{viewingParameters}"
						gridItemEditorSessionStart="parametersDataGrid_gridItemEditorSessionStartHandler(event)"
						gridItemEditorSessionSave="parametersDataGrid_gridItemEditorSessionSaveHandler(event)">
				<s:columns>
					<s:ArrayList id="parameterGridColumns">
						<s:GridColumn headerText="Name" dataField="name" editable="false"/>
						<s:GridColumn headerText="Type" dataField="type" width="100" editable="false"/>
						<s:GridColumn headerText="Value" dataField="value" itemEditor="spark.components.gridClasses.DefaultGridItemEditor"/>
						<s:GridColumn headerText="Allowed Values" dataField="allowedValues" editable="false"/>
					</s:ArrayList>
				</s:columns>
			</s:DataGrid>
		</s:VGroup>
	</s:Scroller>
	<s:Button id="previousButton"
			  x="11" y="328"
			  enabled="{modifiableParameters.getItemIndex(viewingParameters.getItemAt(0)) != 0}"
			  click="previousButton_clickHandler(event)"
			  label="Previous"/>
	<s:Button id="nextButton"
			  x="93" y="328"
			  enabled="{modifiableParameters.getItemIndex(viewingParameters.getItemAt(viewingParameters.length -1)) != modifiableParameters.length - 1}"
			  click="nextButton_clickHandler(event)"
			  label="Next"/>
	<s:Button x="481" y="328" 
			  label="Cancel"
			  click="PopUpManager.removePopUp(this)"/>
	<s:Button id="saveButton"
			  x="559" y="328"			  
			  label="Save"
			  click="saveButton_clickHandler(event)"/>
	<s:Label x="238" y="332" text="{modifiableParameters.getItemIndex(viewingParameters.getItemAt(0)) + 1} to {modifiableParameters.getItemIndex(viewingParameters.getItemAt(viewingParameters.length -1)) + 1} of {modifiableParameters.length} items"/>
</components:CustomTitleWindow>
