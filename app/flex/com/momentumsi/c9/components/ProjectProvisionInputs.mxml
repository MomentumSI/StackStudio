<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%" height="100%"
		 creationComplete="creationCompleteHandler(event)" xmlns:services="com.momentumsi.c9.services.*">
	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.components.sns.SnsCreateTopic;
			import com.momentumsi.c9.models.CloudAccount;
			import com.momentumsi.c9.utils.Helpers;
			
			import mx.collections.ArrayCollection;
			import mx.controls.ComboBox;
			import mx.controls.Text;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.Form;
			import spark.components.FormItem;
			import spark.components.TextInput;
			import spark.components.VGroup;

			[Bindable]
			public var parametersInputForm:Form;
			[Bindable]
			public var projectName:String;
			[Bindable]
			private var notificationsList:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var creationTimeoutList:ArrayCollection = new ArrayCollection([{label: "None", value: 0},
																					{label: "5", value: 5},
																					{label: "10", value: 10},
																					{label: "15", value: 15},
																					{label: "20", value: 20},
																					{label: "30", value: 30},
																					{label: "60", value: 60},
																					{label: "90", value: 90}]);
			private var creationComplete:Boolean = false;
			private var notificationsComplete:Boolean = false;
			
			[Bindable]
			public var cloudAccount:CloudAccount;
			[Bindable]
			public var region:String;
			
			public var notificationTopic:String;
			public var creationTimeout:String;
			public var disableRollback:Boolean = false;
			
			public function addForm():void
			{
				if(parametersInputForm != null)
				{
					parametersVGroup.addElement(parametersInputForm);
					parametersInputForm.percentWidth = 100;
				}
			}
			
			public function filledInputs():ArrayCollection
			{
				var filledOut:Boolean = true;
				
				var paramFields:ArrayCollection = new ArrayCollection();
				var group:VGroup;
				var formItem:FormItem;
				var input:TextInput;
				var selection:ComboBox;
				var paramValue:String;
				//trace(parametersInputForm.getElementAt(0));
				for(var index:int; index < parametersInputForm.numElements; index ++)
				{
					group = parametersInputForm.getElementAt(index) as VGroup;
					formItem = group.getElementAt(0) as FormItem;
					input = formItem.getElementAt(0) as TextInput;
					if(formItem.getElementAt(0) is TextInput){
						input = formItem.getElementAt(0) as TextInput;
						paramValue = input.text; 
					}else if(formItem.getElementAt(0) is ComboBox){
						selection = formItem.getElementAt(0) as ComboBox;
						paramValue = selection.selectedLabel;
					}
					paramFields.addItem({parameterKey: formItem.label.replace(":", ""), parameterValue: paramValue});
				}
				
				for each(var parameter:Object in paramFields)
				{
					if(parameter['parameterValue'] == "")
					{
						filledOut = false;
						return null;
					}
				}
					
				return paramFields;
			}
			
			public function getAdvancedOptionsNotifications():void
			{
				//getSnsNotifications.send({project_name: projectName});
				getResourcesSvc.send();
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				if(notificationsComplete && notification.selectedIndex == -1)
				{
					notification.selectedIndex = 0;
				}
			}
			
			protected function getSnsNotifications_faultHandler(event:FaultEvent):void
			{
				notificationsList.removeAll();
				notificationsList.addItem({TopicName: "No Notification", value: "none"});
			}
			
			protected function newNotification_clickHandler(event:MouseEvent):void
			{
				var snsTopic:SnsCreateTopic = SnsCreateTopic(PopUpManager.createPopUp(UIComponent(this.parentApplication), SnsCreateTopic, true));
				snsTopic.objectManagementCreate = true;
				snsTopic.cloudAccount = cloudAccount;
				snsTopic.region = region;
				snsTopic.createFromProvisionScreen = true;
				snsTopic.provisionInputs = this;
			}
			
			protected function getResourcesSvc_resultHandler(event:ResultEvent):void
			{
				notificationsList = new ArrayCollection(getResourcesSvc.result as Array);
				notificationsList.addItemAt({TopicName: "No Notification", value: "none"}, 0);
				notification.selectedIndex = 0;
			}
			
			protected function notification_valueCommitHandler(event:FlexEvent):void
			{
				if(notification.selectedIndex > 0)
				{
					notificationTopic = notification.selectedItem.TopicArn;
				}
			}
			
			protected function creationTimeout_valueCommitHandler(event:FlexEvent):void
			{
				if(creationTimeoutCB.selectedIndex > 0)
				{
					creationTimeout = creationTimeoutCB.selectedLabel;
				}
			}
			
			protected function rollbackOptions_valueCommitHandler(event:FlexEvent):void
			{
				disableRollback = rollbackNo.selected;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:RadioButtonGroup id="rollbackOptions"
							valueCommit="rollbackOptions_valueCommitHandler(event)"/>
		
		<services:CloudApiService id="getResourcesSvc"
								  action="describe_topics"
								  cloudAccountId="{cloudAccount.id}"
								  region="{region}"
								  serviceType="SNS"
								  result="getResourcesSvc_resultHandler(event)"/>
	</fx:Declarations>
	<s:BorderContainer width="100%" height="100%" borderVisible="false">
		<s:backgroundFill>
			<s:SolidColor alpha="0" color="gray"/>
		</s:backgroundFill>
		<s:Scroller height="100%" width="100%">
			<s:VGroup height="100%" width="100%" paddingLeft="20" paddingRight="20">
				<s:VGroup width="100%" id="parametersVGroup"/>
				<s:VGroup id="advancedOptionsGroup" width="100%">
					<s:Line width="100%">
						<s:stroke>
							<s:SolidColorStroke color="#838588" weight="1"/>
						</s:stroke>
					</s:Line>
					<mx:Text text="Advanced Options"/>
					<s:VGroup id="advancedOptions" width="100%">
						<s:HGroup>
							<s:Form>
								<s:FormItem label="Notification Topic:">
									<s:HGroup>
										<mx:ComboBox id="notification"
													 width="400" 
													 dataProvider="{notificationsList}"
													 valueCommit="notification_valueCommitHandler(event)"
													 labelField="TopicName"
													 prompt="Loading Notifications"/>
										<s:Button id="newNotification" 
												  label="Create New Topic" 
												  click="newNotification_clickHandler(event)"/>
									</s:HGroup>
								</s:FormItem>
								<s:FormItem label="Creation Timeout (minutes):">
									<mx:ComboBox id="creationTimeoutCB" 
												 dataProvider="{creationTimeoutList}"
												 valueCommit="creationTimeout_valueCommitHandler(event)"/>
								</s:FormItem>
								<s:FormItem label="Rollback on failure:">
									<s:HGroup>
										<s:RadioButton id="rollbackYes"
													   label="Yes" 
													   group="{rollbackOptions}"/>
										<s:RadioButton id="rollbackNo"
													   label="No"
													   selected="true"
													   group="{rollbackOptions}"/>
									</s:HGroup>
								</s:FormItem>
							</s:Form>
						</s:HGroup>
					</s:VGroup>
				</s:VGroup>
			</s:VGroup>
		</s:Scroller>
	</s:BorderContainer>
</s:Group>
