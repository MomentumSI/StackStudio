<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:net="flash.net.*"
			   title="Upload New Template"
			   close="PopUpManager.removePopUp(this)"
			   creationComplete="creationCompleteHandler(event)"
			   width="700"
			   height="500" xmlns:wizard="com.momentumsi.c9.components.wizard.*" xmlns:services="com.momentumsi.c9.services.*">
	
	<fx:Metadata>
		
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			import com.momentumsi.c9.constants.AlertMessage;
			import com.momentumsi.c9.constants.ImagePath;
			import com.momentumsi.c9.events.ProjectEvent;
			import com.momentumsi.c9.models.Project;
			import com.momentumsi.c9.models.Stack;
			import com.momentumsi.c9.models.Template;
			import com.momentumsi.c9.models.User;
			import com.momentumsi.c9.services.StackService;
			import com.momentumsi.c9.services.TemplatesService;
			import com.momentumsi.c9.utils.Helpers;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			
			public var user:User;
			private var fileRef:FileReference = new FileReference();
			private var imageLoaded:Boolean = false;
			private var newTemplate:Template = new Template();
			[Bindable]
			public var project:Project;
			[Bindable]
			private var tempProject:Project = new Project();
			[Bindable]
			private var versionCollection:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var categoryCollection:ArrayCollection = new ArrayCollection([	{label: "Application", id: "4f9ffa6a8241ac2cf90000d5"},
																					{label: "Platform", id: "4f9ffa6a8241ac2cf90000d6"},
																					{label: "Sample Code", id: "4f9ffa6a8241ac2cf90000d7"}]);
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				PopUpManager.centerPopUp(this);
				if(project.hasOwnProperty("versions"))
				{
					var number:String;
					versionCollection.removeAll();
					for each(var v:Object in project.versions)
					{
						number = v.number || v.version.number;
						if(number != "Current")
						{
							versionCollection.addItem(v);
						}
					}
				}
			}
			
			protected function submitButton_clickHandler(event:MouseEvent):void
			{
				setPublishAsPublishing(true);

				//Get project version so we can get the raw json, 
				//using tempProject to keep from changing the workspace
				tempProject.project_id = project.project_id;
				tempProject.addEventListener(ProjectEvent.VERSION_SET, getProjectVersionHandler);
				projectService.addEventListener(FaultEvent.FAULT, projectServiceFaultHandler);
				projectService.getProjectVersion(versionSelection.selectedLabel);
			}
			
			protected function getProjectVersionHandler(event:Event=null):void
			{
				//Build parameters needed for create template and stack
				var parameters:Object = {};
				//Template parameters
				parameters["template_name"] = templateName.text;
				parameters["version"] = versionSelection.selectedLabel;
				parameters["raw_json"] = tempProject.currentVersion.buildTemplate();
				//Stack parameters
				parameters["description"] = templateDescription.text;
				parameters["support_details"] = supportDetails.text;
				parameters["license_agreement"] = userAgreement.text;
				if(imageLoaded)
				{
					parameters["image_name"] = fileRef.name;
					parameters["image_data"] = fileRef.data;
				}
				parameters["category_id"] = categorySelection.selectedItem.id;
				
				apiService.send(parameters);
			}
			
			protected function projectServiceFaultHandler(event:Event=null):void
			{
				setPublishAsPublishing(false);
				Alert.show("Failed to load the selected version.");
			}
			
			protected function setPublishAsPublishing(publishing:Boolean):void
			{
				if(publishing)
				{
					submitButton.enabled = false;
					submitButton.label = "Publishing";
				}else
				{
					submitButton.enabled = true;
					submitButton.label = "Publish";
				}
			}
			
			protected function previousButton_clickHandler(event:MouseEvent):void
			{
				if(uploadTemplateWizard.selectedIndex > 0)
				{
					uploadTemplateWizard.selectedIndex--;
				}
			}
			
			protected function nextButton_clickHandler(event:MouseEvent):void
			{
				var alert:Boolean = false;
				
				if(uploadTemplateWizard.selectedChild == templateDetailsContent)
				{
					if(Helpers.StringReplaceAll(templateName.text, " ", "") != "")
					{
						templateNameAlert.visible = false;
					}else
					{
						alert = true;
						templateNameAlert.visible = true;
					}
					
					if(versionSelection.selectedIndex != -1)
					{
						versionSelectionAlert.visible = false;
					}else
					{
						alert = true;
						versionSelectionAlert.visible = true;
					}
				}
				
				if(!alert && uploadTemplateWizard.selectedChild != finalDetailsContent)
				{
					uploadTemplateWizard.selectedIndex++;
				}
			}
			
			protected function versionLabelFunction(item:Object):String
			{
				var number:String = item.number || item.version.number;
				return number;
			}
			
			protected function imageUpload_clickHandler(event:MouseEvent):void
			{
				fileRef.addEventListener(Event.SELECT, uploadSelectHandler);
				try
				{
					var fileFilterArray:Array = new Array();
					fileFilterArray.push(new FileFilter("Images", ".gif;*.jpeg;*.jpg;*.png"))
					var success:Boolean = fileRef.browse(fileFilterArray);
				}
				catch (error:Error)
				{
					Alert.show("Unable to browse for files.");
				}
			}
			
			protected function uploadSelectHandler(event:Event):void
			{
				fileRef.removeEventListener(Event.SELECT, uploadSelectHandler);
				fileRef.addEventListener(Event.COMPLETE, uploadCompleteHandler);
				fileRef.load();
				imageLoaded = true;
			}
			
			protected function uploadCompleteHandler(event:Event):void
			{
				fileRef.removeEventListener(Event.COMPLETE, uploadCompleteHandler);
				logoPreview.source = fileRef.data;
			}

			protected function apiService_resultHandler(event:ResultEvent):void
			{
				PopUpManager.removePopUp(this);
			}
			
			protected function apiService_faultHandler(event:FaultEvent):void
			{
				setPublishAsPublishing(false);
				Alert.show("Error: unable to publish the stack.");
			}
			
		]]>
	</fx:Script>

	<fx:Declarations>
		<services:ProjectService id="projectService"
								 project="{tempProject}"/>
		
		<services:ApiControllerService id="apiService"
									   action="publish_stack"
									   result="apiService_resultHandler(event)"
									   fault="apiService_faultHandler(event)"/>
	</fx:Declarations>
	
	<s:VGroup width="100%" height="90%" gap="0">
		<wizard:CookieTrail id="uploadTemplateCookieTrail"
							wizardStack="{uploadTemplateWizard}"
							gap="400"/>
		<mx:ViewStack id="uploadTemplateWizard"
					  width="100%" height="100%"
					  creationPolicy="all" 
					  paddingTop="10" paddingLeft="20">
			<s:NavigatorContent id="templateDetailsContent" label="Template Details" width="100%" height="100%">
				<s:Form width="100%" height="100%" textAlign="right">
					<s:FormItem label="Name:">
						<s:HGroup>
							<s:TextInput id="templateName" width="250" textAlign="left"/>
							<mx:Text id="templateNameAlert" text="{AlertMessage.INVALID}" color="red" visible="false"/>
						</s:HGroup>
					</s:FormItem>
					<s:FormItem label="Version:">
						<s:HGroup>
							<mx:ComboBox id="versionSelection" width="200" textAlign="left" dataProvider="{versionCollection}" labelFunction="{versionLabelFunction}"/>
							<mx:Text id="versionSelectionAlert" text="{AlertMessage.INVALID}" color="red" visible="false"/>
						</s:HGroup>
					</s:FormItem>
					<s:FormItem label="Description:">
						<s:TextArea id="templateDescription" width="100%" heightInLines="4" textAlign="left"/>
					</s:FormItem>
					<s:FormItem label="Support Details:">
						<s:TextArea id="supportDetails" width="100%" heightInLines="4" textAlign="left"/>
					</s:FormItem>
					<s:FormItem label="Category:">
						<mx:ComboBox id="categorySelection" width="200" textAlign="left" dataProvider="{categoryCollection}" selectedIndex="0"/>
					</s:FormItem>
				</s:Form>
			</s:NavigatorContent>
			<s:NavigatorContent id="finalDetailsContent" label="Final Details" width="100%" height="100%">
				<s:VGroup width="100%" height="100%" paddingTop="10" paddingLeft="20" paddingRight="40" gap="10">
					<mx:Label text="End User License Agreement:" fontWeight="bold"/>
					<s:TextArea id="userAgreement" width="100%" heightInLines="8"/>
					<mx:Label text="Logo:" fontWeight="bold"/>
					<s:HGroup width="100%" height="100%" gap="100">
						<s:Button label="Upload Image" click="imageUpload_clickHandler(event)"/>
						<s:Image id="logoPreview" source="{ImagePath.NO_IMAGE}" smooth="true" width="150" height="150"/>
					</s:HGroup>
				</s:VGroup>
			</s:NavigatorContent>
		</mx:ViewStack>
	</s:VGroup>
	<s:Button id="previousButton" x="10" y="436" label="Previous" width="80" click="previousButton_clickHandler(event)" enabled="{uploadTemplateWizard.selectedIndex > 0}"/>
	<s:Button id="nextButton" x="98" y="436" label="Next" width="80" click="nextButton_clickHandler(event)" enabled="{uploadTemplateWizard.selectedChild != finalDetailsContent}"/>
	<s:Button id="submitButton" x="186" y="436" label="Publish" minWidth="80" click="submitButton_clickHandler(event)" enabled="{uploadTemplateWizard.selectedIndex == uploadTemplateWizard.numChildren-1}"/>
	<s:Button id="cancelButton" x="608" y="436" label="Cancel" width="80" click="PopUpManager.removePopUp(this)"/>
</s:TitleWindow>
