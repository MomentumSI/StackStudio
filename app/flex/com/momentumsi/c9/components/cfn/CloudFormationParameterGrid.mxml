<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  width="100%" height="100%">
	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.components.ParameterWizard;
			import com.momentumsi.c9.constants.AlertMessage;
			import com.momentumsi.c9.constants.PermissionType;
			import com.momentumsi.c9.models.Element;
			import com.momentumsi.c9.models.Member;
			import com.momentumsi.c9.models.Parameter;
			import com.momentumsi.c9.models.Project;
			import com.momentumsi.c9.models.ProjectVersion;
			import com.momentumsi.c9.models.User;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.managers.PopUpManager;
			
			import spark.events.GridCaretEvent;
			
			[Bindable]
			public var project:Project;
			[Bindable]
			public var user:User;
			[Bindable]
			public var projectVersion:ProjectVersion;
			private var _parameters:ArrayCollection;

			public function get templateParameters():ArrayCollection
			{
				return _parameters;
			}
			
			public function set templateParameters(value:ArrayCollection):void
			{
				_parameters = new ArrayCollection();
				var parameter:Parameter;
				for each(var element:Element in value)
				{
					parameter = new Parameter();
					parameter.id = element.id;
					parameter.properties = element.properties;
					parameter.name = element.name;
					parameter.projectId = element.projectId;
					_parameters.addItem(parameter);
				}
				dispatchEvent(new Event("templateParametersUpdated"));
			}
			
			[Bindable(event="templateParametersUpdated")]
			private function get parameters():ArrayCollection
			{
				return _parameters;
			}
			
			public function newButton_clickHandler(event:MouseEvent):void
			{
				if(project.userHasPermission(user.id, PermissionType.EDIT_SOURCE, PermissionType.DEVELOPMENT))
				{
					/*
					_parameters.addItemAt(new Parameter, 0);
					dispatchEvent(new Event("templateParametersUpdated"));
					*/
					var newParameterWizard:ParameterWizard = new ParameterWizard();
					newParameterWizard.project = project;
					newParameterWizard.projectVersion = projectVersion;
					PopUpManager.addPopUp(newParameterWizard, UIComponent(this.parentApplication), true);
				}else
				{
					Alert.show(AlertMessage.PERMISSION_DENIED);
				}
			}
			
			protected function removeButton_clickHandler(event:MouseEvent):void
			{
				if(project.userHasPermission(user.id, PermissionType.EDIT_SOURCE, PermissionType.DEVELOPMENT))
				{
					var parameter:Parameter = parametersGrid.selectedItem as Parameter;
					var parameterReferences:ArrayCollection = projectVersion.checkForReferences(parameter.name);
					if(parameterReferences.length != 0)
					{
						var alertString:String = "Must remove parameter references first:\n";
						for each(var ref:Object in parameterReferences)
						{
							alertString = alertString + ref.name +  "::" + ref.property + "\n";
						}
						Alert.show(alertString);
					}else{
						projectVersion.deleteElementByName(parameter.name);
						_parameters.removeItemAt(parametersGrid.selectedIndex);
						dispatchEvent(new Event("templateParametersUpdated"));
						projectVersion.dispatchEvent(new Event(ProjectVersion.REFRESH));
					}
				}else
				{
					Alert.show(AlertMessage.PERMISSION_DENIED);
				}
			}
			
			protected function deleteCompleteHandler(event:Event):void
			{
				projectVersion.dispatchEvent(new Event(ProjectVersion.REFRESH));
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:VGroup height="100%" width="100%">
		<s:DataGrid id="parametersGrid" 
					fontSize="11" 
					width="100%"
					minHeight="0" maxHeight="200" 
					visible="true" 
					dataProvider="{parameters}">
			<s:columns>
				<s:ArrayList id="parametersGridColumns">
					<s:GridColumn headerRenderer="com.momentumsi.c9.itemRenderers.TranscendGridHeaderRenderer"
								  itemEditor="spark.components.gridClasses.DefaultGridItemEditor" 
								  headerText="Field Name"
								  dataField="name"
								  width="175"/>
					<s:GridColumn headerRenderer="com.momentumsi.c9.itemRenderers.TranscendGridHeaderRenderer"
								  itemEditor="spark.components.gridClasses.DefaultGridItemEditor" 
								  headerText="Default{'\n'}Value" 
								  dataField="defaultValue"
								  width="100"/>
					<s:GridColumn headerRenderer="com.momentumsi.c9.itemRenderers.TranscendGridHeaderRenderer"
								  itemEditor="spark.components.gridClasses.DefaultGridItemEditor" 
								  headerText="Field{'\n'}Description" 
								  dataField="description" width="175"
								  dataTipField="description"/>
					<s:GridColumn headerRenderer="com.momentumsi.c9.itemRenderers.TranscendGridHeaderRenderer" 
								  headerText="Type" 
								  dataField="elementType" 
								  width="165">
						<s:itemEditor>
							<fx:Component>
								<s:ComboBoxGridItemEditor dataProvider="{Parameter.TYPES}">
									<fx:Script>
										<![CDATA[
											import com.momentumsi.c9.models.Parameter;
										]]>
									</fx:Script>
								</s:ComboBoxGridItemEditor>
							</fx:Component>
						</s:itemEditor>
					</s:GridColumn>
					<s:GridColumn headerRenderer="com.momentumsi.c9.itemRenderers.TranscendGridHeaderRenderer"
								  headerText="Hide{'\n'}Text"
								  dataField="noEcho"
								  width="50">
						<s:itemEditor>
							<fx:Component>
								<s:ComboBoxGridItemEditor>
									<s:dataProvider>
										<s:ArrayList>
											<fx:String>true</fx:String>
											<fx:String>false</fx:String>
										</s:ArrayList>
									</s:dataProvider>
								</s:ComboBoxGridItemEditor>
							</fx:Component>
						</s:itemEditor>
					</s:GridColumn>
					<s:GridColumn headerRenderer="com.momentumsi.c9.itemRenderers.TranscendGridHeaderRenderer"
								  itemEditor="spark.components.gridClasses.DefaultGridItemEditor"
								  headerText="Min" 
								  dataField="min" 
								  width="50"/>
					<s:GridColumn headerRenderer="com.momentumsi.c9.itemRenderers.TranscendGridHeaderRenderer" 
								  itemEditor="spark.components.gridClasses.DefaultGridItemEditor"
								  headerText="Max" 
								  dataField="max" 
								  width="50"/>
					<s:GridColumn headerRenderer="com.momentumsi.c9.itemRenderers.TranscendGridHeaderRenderer" 
								  itemEditor="spark.components.gridClasses.DefaultGridItemEditor"
								  headerText="Allowed Values" 
								  dataField="allowedValues"/>
					<s:GridColumn headerRenderer="com.momentumsi.c9.itemRenderers.TranscendGridHeaderRenderer"
								  itemEditor="spark.components.gridClasses.DefaultGridItemEditor" 
								  headerText="Constraint Description"
								  dataField="constraintDescription"
								  dataTipField="constraintDescription"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
		<s:HGroup>
			<s:Button label="New" 
					  click="newButton_clickHandler(event)"
					  enabled="{projectVersion != null}"/>
			<s:Button id="removeButton"
					  label="Remove" 
					  click="removeButton_clickHandler(event)"
					  enabled="{!(parametersGrid.selectedItem == null || parameters.length == 0)}"/>
		</s:HGroup>
	</s:VGroup>
</s:Group>
