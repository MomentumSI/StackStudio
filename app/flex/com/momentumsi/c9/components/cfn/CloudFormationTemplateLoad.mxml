<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   initialize="init(event)"
			   title="Load New Template"
			   close="cancelHandler()"
			   creationComplete="creationCompleteHandler(event)"
			   defaultButton="{loadButton}"
			   width="650" 
			   maxHeight="456" xmlns:services="com.momentumsi.c9.services.*">
	
	<fx:Metadata>
		[Event(
		name="projectCreate",
		type="com.momentumsi.c9.events.ProjectEvent")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.maccherone.json.JSON;
			import com.momentumsi.c9.components.BodyStack;
			import com.momentumsi.c9.components.EnvironmentPipelineManagement;
			import com.momentumsi.c9.components.HeaderBox;
			import com.momentumsi.c9.components.MainBox;
			import com.momentumsi.c9.components.NewProject;
			import com.momentumsi.c9.constants.AlertMessage;
			import com.momentumsi.c9.constants.Region;
			import com.momentumsi.c9.constants.ResourceType;
			import com.momentumsi.c9.events.LoadTemplateEvent;
			import com.momentumsi.c9.events.ProjectEvent;
			import com.momentumsi.c9.models.*;
			import com.momentumsi.c9.services.*;
			import com.momentumsi.c9.utils.Helpers;
			
			import mx.containers.Form;
			import mx.controls.Alert;
			import mx.controls.Text;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.FormItem;
			import spark.components.List;
			import spark.components.NavigatorContent;
			import spark.components.TextArea;
			import spark.components.TextInput;
			import spark.events.IndexChangeEvent;
			import spark.events.ListEvent;
			
			[Bindable]
			private var fileRef:FileReference = new FileReference();
			private var uploadURLReq:URLRequest;			
			
			private var loadTemplateSvcId:AsyncToken;
			private var getAccountsSvcId:AsyncToken;
			private var getStackPlaceTemplatesId:AsyncToken;
			
			private var templateString:String;
			
			[Bindable]
			private var projectId:String;
			[Bindable]
			private var stacksCollection:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var templatesService:TemplatesService = new TemplatesService();
			[Bindable]
			public var user:User;
			private var projectSvc:ProjectService = new ProjectService();
			private var selectedStack:Stack;
			[Bindable]
			private var selectableCloudAccounts:ArrayCollection = new ArrayCollection();
			private var project:Project;
			
			
			protected function init(event:FlexEvent):void
			{
				accountList.selectedIndex = 0;
			}
			
			public function getTemplates():void
			{
				templatesService.addEventListener(TemplatesService.STACKS_LOADED, stacksLoaded_resultHandler);
				templatesService.getTemplates();
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				PopUpManager.centerPopUp(this);
				selectableCloudAccounts.removeAll();
				for each(var account:CloudAccount in user.cloud_accounts)
				{
					if(account.cloud_provider == CloudAccount.AMAZON)
					{
						selectableCloudAccounts.addItem(account);
					}
				}
				if(selectableCloudAccounts.length > 0)
				{
					accountList.selectedIndex = 0;
				}
			}
			
			protected function loadButton_clickHandler(event:MouseEvent):void
			{	
				loadButton.enabled = false;
				if(projectName.text.replace(/\s/g, "") == "")
				{
					Alert.show("Project name is required.");
					loadButton.enabled = true;
					return;
				}
				
				var found:Boolean = false;
				for each(var p:Object in user.project_memberships)
				{
					if(p.project_name == projectName.text)
					{
						found = true;
					}
				}
				
				if(found)
				{
					loadButton.enabled = true;
					Alert.show(AlertMessage.PROJECT_NOT_UNIQUE);
				}else
				{
					var templateLoadFrom:String = loadOptions.selectedValue.toString().toLowerCase();
					var source:String = new String();
					if(loadOptions.selection == stackPlaceRB)
					{					
						source = Template(selectedStack.templates.getItemAt(0)).id;
					}else if(loadOptions.selection == urlRB)
					{
						source = url.text;
					}else if(loadOptions.selection == uploadRB)
					{
						source = templateString;
					}
					
					if(accountList.selectedItem != null)
					{
						apiService.validateTemplate(templateLoadFrom, source);
					}else
					{
						loadButton.enabled = true;
						Alert.show("You must select an account before you may continue.");
					}
				}
			}
			
			protected function validateTemplateSvc_resultHandler(event:ResultEvent):void
			{
				var result:String = event.result.toString();
				
				project = new Project()
				project.project_name = projectName.text;
				project.description = "New StackStudio project.";
				project.region = regionSelection.selectedItem.value;
				project.type = "standard";
				project.owner = user;
				project.cloud_account = CloudAccount(accountList.selectedItem);
				project.save();
				project.addEventListener(ProjectEvent.PROJECT_RESULT, createProjResult);
				
				//projectSvc.createProject(newProject);
				//projectSvc.addEventListener(ResultEvent.RESULT, createProjResult);
			}
			
			private function createProjResult(event:ProjectEvent):void
			{
				project.removeEventListener(ProjectEvent.PROJECT_RESULT, createProjResult);
				projectId = project.project_id;
				templatesService = new TemplatesService();
				templatesService.addEventListener(LoadTemplateEvent.LOADED, saveProjectElements)
				
				switch(loadOptions.selection)
				{
					case stackPlaceRB:
						loadTemplateSvcId = templatesService.getRawJsonTemplate(Template(selectedStack.templates.getItemAt(0)).id);
						break;
					case urlRB:
						templatesService.getTemplateFromUrl(url.text);
						break;
					case uploadRB:
						templatesService.buildTemplateFromSource(templateString);
						break;
				}
			}

			
			private var _resourceArray:Array;
			private var _linkCollection:ArrayCollection;
			private function saveProjectElements(event:LoadTemplateEvent):void
			{
				var elements:ArrayCollection = event.elements;
				var element:Element;
				_linkCollection = event.links;
				
				//Build array so we know how many resources are in the collection
				//This allows us to know when to dipatch the createProject event after all nodes have been created for elements
				_resourceArray = new Array();

				for each(element in elements)
				{
					projectSvc = new ProjectService();
					projectSvc.projectId = projectId;
					if(element.elementGroup == Element.ELEMENT_GROUP_RESOURCE)
					{
						projectSvc.addEventListener(ResultEvent.RESULT, createElement_resultHandler);
						if(ProjectVersion.SUPPORTED_NODE_ELEMENTS.contains(element.elementType))
						{
							_resourceArray.push(Element.ELEMENT_GROUP_RESOURCE);
						}
					}
					projectSvc.createElement(element, ProjectVersion.INITIAL);
				}
			}
			
			private function createElement_resultHandler(event:ResultEvent):void
			{
				var result:Object = JSON.decode(event.result.toString());
				var createNodeSvc:ProjectService = new ProjectService();
				createNodeSvc.projectId = projectId;
				var element:Element = Element.buildElement(result["element"]);
				if(ProjectVersion.SUPPORTED_NODE_ELEMENTS.contains(element.elementType))
				{
					var node:Node = new Node();
					node.name = element.name;
					node.properties = element.properties;
					node.x = 0;
					node.y = 0;
					if(element.elementType == ResourceType.WAIT_CONDITION)
					{
						node.view = Node.DEPLOY_VIEW;
					}else{
						node.view = Node.DESIGN_VIEW;
					}
					node.elementId = element.id;
					createNodeSvc.addEventListener(ResultEvent.RESULT, createNodeSvc_resultHandler);
					createNodeSvc.createNode(node, ProjectVersion.INITIAL);	
				}
			}
			
			private var _nodesCollection:ArrayCollection = new ArrayCollection();
			private function createNodeSvc_resultHandler(event:ResultEvent):void
			{
				_resourceArray.pop();

				var result:Object = JSON.decode(event.result.toString());
				var node:Node = Node.buildNode(result["node"], projectId);
				_nodesCollection.addItem(node);
				
				if(_resourceArray.length == 0)
				{
					createLinkNodes(_nodesCollection);
					dispatchEvent(new ProjectEvent(ProjectEvent.PROJECT_RESULT, project));
				}
			}
			
			private function createLinkNodes(nodes:ArrayCollection):void
			{
				if(_linkCollection != null)
				{
					var source:Node;
					var target:Node;
					for each(var link:Object in _linkCollection)
					{
						source = null;
						target = null;
						for each(var node:Node in nodes)
						{
							if(node.name == link["parent"])
							{
								source = node;
							}else if(node.name == link["reference"])
							{
								target = node;
							}
							if(target != null && source != null)
							{
								break;
							}
						}
						if(source != null && target != null)
						{
							source.createNodeLink(target);
						}
					}
				}
			}

			
			private function projectStackCreated_faultHandler(event:FaultEvent):void
			{
				Alert.show("Unable to create new project.");
			}
			
			protected function loadOptions_changeHandler(event:Event):void
			{
				PopUpManager.centerPopUp(this);
			}
			
			public function clearSettings():void
			{
				loadOptions.selection = stackPlaceRB; 
			}
			
			protected function chooseFileButton_clickHandler(event:MouseEvent):void
			{
				fileRef.addEventListener(Event.SELECT, uploadSelectHandler);
				fileRef.addEventListener(Event.CANCEL, cancelLoadFile);
				try
				{
					var success:Boolean = fileRef.browse();
				}
				catch (error:Error)
				{
					Alert.show("Unable to browse for files.");
				}
			}
			
			protected function uploadSelectHandler(event:Event):void
			{
					filePath.text = fileRef.name;
					fileRef.addEventListener(Event.COMPLETE, fileLoadComplete);
					fileRef.addEventListener(IOErrorEvent.IO_ERROR, fileLoadError);
					fileRef.load();
			}
			
			private function cancelLoadFile(event:Event):void
			{
				fileRef = null;
			}
			
			private function fileLoadComplete(event:Event):void
			{
				var data:ByteArray = fileRef.data;
				templateString = data.readUTFBytes(data.bytesAvailable);
			}
			
			private function fileLoadError(error:IOErrorEvent):void
			{
				Alert.show("Unable to load selected file.");
				trace(error.text);
			}			

			
			protected function cancelHandler():void
			{
				loadButton.enabled = true;
				if(loadTemplateSvcId != null)
				{
					apiService.cancel(loadTemplateSvcId.message.messageId);
				}
				PopUpManager.removePopUp(this);
			}
			
			protected function templatesList_changeHandler(event:IndexChangeEvent):void
			{
				selectedStack = Stack(event.currentTarget.selectedItems[0]);
				var stackName:String = selectedStack.name; 
				projectName.text = stackName.replace(/\s/g, "");
				projectName.text = projectName.text.replace(/\./g, "");
			}
			
			protected function templatesList_itemRollOverHandler(event:ListEvent):void
			{
				if(loadButton.enabled)
				{
					var currentViewingStack:Stack = event.item as Stack;
					var currentList:List = event.currentTarget as List;
					currentList.toolTip = currentViewingStack.description;
				}
			}
			
			protected function templatesList_itemRollOutHandler(event:ListEvent):void
			{
				if(loadButton.enabled)
				{
					var currentList:List = event.currentTarget as List;
					currentList.toolTip = null;
				}
			}
			
			protected function validateTemplateSvc_faultHandler(event:FaultEvent):void
			{
				Alert.show("Invalid cloud account.");
				loadButton.enabled = true;
			}
			
			private function stacksLoaded_resultHandler(event:Event):void
			{
				stacksCollection = templatesService.stacks;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<services:CloudApiService id="apiService"
								  cloudAccountId="{CloudAccount(accountList.selectedItem).id}"
								  fault="validateTemplateSvc_faultHandler(event)"
								  result="validateTemplateSvc_resultHandler(event)"/>
		
		<s:ArrayCollection id="accounts"/>
		<s:ArrayCollection id="amazonSampleTemplates"/>
		<s:ArrayCollection id="stackPlaceTemplates"/>
		<s:RadioButtonGroup id="loadOptions" change="loadOptions_changeHandler(event)"/>
	</fx:Declarations>
	
	<s:VGroup width="100%" height="100%" paddingLeft="20" gap="20">
		<s:VGroup width="100%">
			<mx:Text width="100%" text="Loading a template will create a new project and open in a new tab."/>
			<s:HGroup gap="-10" width="100%">
				<s:FormItem label="Account:">
					<mx:ComboBox id="accountList" enabled="{selectableCloudAccounts.length > 0}" dataProvider="{selectableCloudAccounts}" width="150"/>
				</s:FormItem>
				<s:FormItem label="Project Name:" width="100%">
					<s:TextInput id="projectName" prompt="new project name" width="100%"/>
				</s:FormItem>				
			</s:HGroup>
			<s:FormItem label="Region:">
				<mx:ComboBox id="regionSelection" enabled="{selectableCloudAccounts.length > 0}" dataProvider="{Region.AMAZON}" width="250"/>
			</s:FormItem>
			<s:VGroup id="templateGroup">
				<s:RadioButton id="stackPlaceRB"
							   label="StackPlace"
							   fontWeight="bold"
							   group="{loadOptions}"/>
				<s:HGroup id="templatesListsGroup" paddingLeft="20" visible="{stackPlaceRB.selected}" includeInLayout="{stackPlaceRB.selected}">
					<mx:ViewStack id="templateListsStack">
						<s:NavigatorContent>
							<s:List id="templatesList"
									allowMultipleSelection="false" 
									dataProvider="{stacksCollection}"
									labelField="name" 
									width="366"
								 	height="180"
									change="templatesList_changeHandler(event)"
									itemRollOver="templatesList_itemRollOverHandler(event)"
									itemRollOut="templatesList_itemRollOutHandler(event)"/>
						</s:NavigatorContent>
					</mx:ViewStack>
					<s:VGroup height="100%">
						<s:Label text="Page {templateListsStack.selectedIndex + 1} of {templateListsStack.length}"/>
						<s:HGroup>
							<s:Button id="previousStackPageButton" label="Previous" 
									  click="{templateListsStack.selectedIndex = templateListsStack.selectedIndex - 1}"
									  enabled="{templateListsStack.selectedIndex != 0}"/>
							<s:Button id="nextStackPageButton" label="Next" 
									  click="{templateListsStack.selectedIndex += 1}"
									  enabled="{templateListsStack.selectedIndex != templateListsStack.length - 1}"/>
						</s:HGroup>				
					</s:VGroup>
				</s:HGroup>
			</s:VGroup>
			<s:VGroup id="urlGroup" width="100%">
				<s:RadioButton id="urlRB"
							   label="URL"
							   fontWeight="bold"
							   group="{loadOptions}"/>
				<s:FormItem id="urlItem" label="URL:" width="100%" visible="{urlRB.selected}" includeInLayout="{urlRB.selected}">
					<s:TextInput id="url" width="450"/>
				</s:FormItem>
			</s:VGroup>
			<s:VGroup id="uploadGroup">
				<s:RadioButton id="uploadRB"
							   label="Upload"
							   fontWeight="bold" 
							   group="{loadOptions}"/>
				<s:FormItem label="File:" width="100%" id="fileUploadItem" visible="{uploadRB.selected}" includeInLayout="{uploadRB.selected}">
					<s:HGroup>
						<s:TextInput id="filePath" width="450"/>
						<s:Button label="Choose File" click="chooseFileButton_clickHandler(event)"/>
					</s:HGroup>					
				</s:FormItem>
			</s:VGroup>
		</s:VGroup>
		<s:HGroup width="100%" horizontalAlign="center" paddingBottom="10">
			<s:Button id="loadButton"
					  label="Load"
					  click="loadButton_clickHandler(event)" 
					  enabled="{loadOptions.selectedValue != null}"/>
			<s:Button id="cancelButton" label="Cancel" click="cancelHandler()"/>
		</s:HGroup>
	</s:VGroup>
</s:TitleWindow>
