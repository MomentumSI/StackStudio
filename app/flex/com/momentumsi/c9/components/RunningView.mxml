<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:c9="com.momentumsi.c9.components.*"
		 xmlns:diagrammer="fr.kapit.diagrammer.*" 
		 xmlns:visualizer="fr.kapit.visualizer.*"
		 xmlns:components="fr.kapit.diagrammer.artifacts.components.*" 
		 xmlns:sns="com.momentumsi.c9.components.sns.*" 
		 xmlns:rds="com.momentumsi.c9.components.rds.*"
		 xmlns:ebs="com.momentumsi.c9.components.ebs.*" 
		 xmlns:elb="com.momentumsi.c9.components.elb.*" 
		 xmlns:sqs="com.momentumsi.c9.components.sqs.*" 
		 xmlns:s3="com.momentumsi.c9.components.s3.*" 
		 xmlns:elc="com.momentumsi.c9.components.elc.*" 
		 xmlns:dns="com.momentumsi.c9.components.dns.*"
		 xmlns:services="com.momentumsi.c9.services.*"
		 xmlns:local="*" 
		 width="100%" height="100%" 
		 alpha="1"
		 initialize="runningView_initializeHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import com.maccherone.json.JSON;
			import com.momentumsi.c9.components.dns.DnsRecordSetBox;
			import com.momentumsi.c9.components.ebs.EbsBox;
			import com.momentumsi.c9.components.elb.LoadBalancerBox;
			import com.momentumsi.c9.components.elc.ElasticCacheBox;
			import com.momentumsi.c9.components.elc.ElasticCacheNodeBox;
			import com.momentumsi.c9.components.rds.RdsBox;
			import com.momentumsi.c9.components.s3.S3Box;
			import com.momentumsi.c9.components.sns.SnsTopicBox;
			import com.momentumsi.c9.components.sqs.SqsBox;
			import com.momentumsi.c9.constants.AlertMessage;
			import com.momentumsi.c9.constants.PermissionType;
			import com.momentumsi.c9.constants.ResourceType;
			import com.momentumsi.c9.events.*;
			import com.momentumsi.c9.events.cloudFromation.CFServiceFaultEvent;
			import com.momentumsi.c9.events.cloudFromation.DeleteCFStackResultEvent;
			import com.momentumsi.c9.models.*;
			import com.momentumsi.c9.models.resources.EmbeddedStack;
			import com.momentumsi.c9.representers.*;
			import com.momentumsi.c9.utils.Helpers;
			
			import fr.kapit.diagrammer.Diagrammer;
			import fr.kapit.diagrammer.actions.LinkAction;
			import fr.kapit.diagrammer.actions.data.LinkActionData;
			import fr.kapit.diagrammer.base.sprite.DiagramLink;
			import fr.kapit.diagrammer.base.uicomponent.DiagramSprite;
			import fr.kapit.diagrammer.events.DiagrammerEvent;
			import fr.kapit.layouts.constants.EdgeDrawType;
			import fr.kapit.visualizer.base.sprite.GenericLink;
			import fr.kapit.visualizer.base.uicomponent.GenericSprite;
			import fr.kapit.visualizer.events.VisualizerEvent;
			import fr.kapit.visualizer.styles.LinkStyle;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Label;
			import mx.core.IVisualElement;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.managers.ToolTipManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.mxml.HTTPService;
						
			public var cloud:String;
			public var stackEventsUpdate:Boolean = false;
			private var updateTimer:Timer = new Timer(20000);
			[Bindable]
			public var mainBox:MainBox;
			[Bindable]
			public var project:Project;
			[Bindable]
			public var user:User;
			[Bindable]
			public var stackComplete:Boolean;
			[Bindable]
			public var selectedEnvironment:String;
			private var _provisionedVersion:ProvisionedVersion;
			
			public function set provisionedVersion(value:ProvisionedVersion):void
			{
				_provisionedVersion = value;
				if(_provisionedVersion != null){
					stackEventsUpdate = true;
					diagramStack.selectedChild = diagramContent;
					visual.addCollectionOfResources(_provisionedVersion.provisionedInstances);
				}else{
					stackEventsUpdate = false;
					diagramStack.selectedIndex = 0;
					cancelRequests();
				}
				updateCfnEventFeed();
				dispatchEvent(new Event("updatedProvisionedVersion"));
			}
			
			[Bindable(event="updatedProvisionedVersion")]
			public function get provisionedVersion():ProvisionedVersion
			{
				return _provisionedVersion;
			}
			
			//This function will cancel all current incoming runtime service responses 
			public function cancelRequests():void
			{
				stackData.cancelUpdate();
				visual.cancelAllUpdates();
				cancelUpdateCfnEventFeed();
			}
			
			private function showDetails(event:NodeSelectionChangeEvent):void
			{
				var node:ProvisionedInstance = event.instance;
				var objMgmtBox:ObjectManagementDetailsBox = null;
				
				switch(node.type)
				{
					case ResourceType.EBS_VOLUME:
						objMgmtBox = new EbsObjectManagementBox();
						break;
					case ResourceType.EC2_INSTANCE:
						objMgmtBox = new Ec2ObjectManagementBox();
						break;
					case ResourceType.EC2_SECURITY_GROUP:
						objMgmtBox = new ComputeSecGrpDetailsBox();
						break;
					case ResourceType.DB_INSTANCE:
						objMgmtBox = new RdsObjectManagementBox();
						break;
					case ResourceType.DB_SECURITY_GROUP:
						objMgmtBox = new RdsSecurityGroupDetailsBox();
						break;
					case ResourceType.S3_BUCKET:
						objMgmtBox = new S3ObjectManagementBox();
						break;
					case ResourceType.AS_GROUP:
						objMgmtBox = new AsObjectManagementBox();
						break;
					case ResourceType.LOAD_BALANCER:
						objMgmtBox = new ElbObjectManagementBox();
						break;
					case ResourceType.SQS_QUEUE:
						objMgmtBox = new SqsObjectManagementBox();
						break;
					case ResourceType.BEANSTALK_APP:
						objMgmtBox = new BeanObjectManagementBox();
						break;
					case ResourceType.CACHE_CLUSTER:
						objMgmtBox = new ElcObjectManagementBox();
						break;
					case ResourceType.CACHE_SECURITY_GROUP:
						objMgmtBox = new ElcSecurityGroupDetailsBox();
						break;
					case ResourceType.SNS_TOPIC:
						objMgmtBox = new SnsObjectManagementBox();
						break;
					case ResourceType.CACHE_NODE:
						objMgmtBox = new ElcObjectManagementBox();
						break;
					case ResourceType.RECORD_SET:
						objMgmtBox = new DnsObjectManagementBox();
						break;
					case ResourceType.IAM_GROUP:
						objMgmtBox = new IamGroupObjectManagementBox();
						break;
					case ResourceType.IAM_USER:
						objMgmtBox = new IamUserObjectManagementBox();
						break;
					case ResourceType.SNS_POLICY:
					case ResourceType.SQS_POLICY:
					case ResourceType.S3_BUCKET_POLICY:
						objMgmtBox = new ResourcePolicyBox();
						break;
					case ResourceType.EMBEDDED_STACK:
						objMgmtBox = new EmbeddedStackBox();
						break;
					case ResourceType.CW_ALARM:
						objMgmtBox = new CloudWatchAlarmBox();
						break;
					case ResourceType.SIMPLE_DB_INSTANCE:
						objMgmtBox = new SimpleDBBox();
						break;
					case ResourceType.CLOUD_FRONT:
						objMgmtBox = new CloudFrontBox();
						break;
				}
				if(objMgmtBox != null)
				{
					detailsGroup.addElementAt(objMgmtBox, 1);
					objMgmtBox.cloudAccount = project.cloud_account;
					objMgmtBox.resourceData = node.properties;					
				}else{
					runningObjectDescriptions.selectedIndex = 0;
					return;
				}
					
				runningObjectDescriptions.selectedChild = detailsContent;

				if(detailsGroup.numElements > 2)
				{
					detailsGroup.removeElementAt(2);
				}
			}
			
			public function updateCfnEventFeed(event:TimerEvent=null):void
			{
				//If event is null, this action was called without the timer, so start the timer
				if(event == null)
				{
					if(updateTimer.running)
					{
						return;
					}else{
						updateTimer.start();
					}
				}
				
				if(stackEventsUpdate)
				{
					getStackOutputs();
					mainBox.eventFeed.stackName = _provisionedVersion.stackName;
					mainBox.eventFeed.updateEventsFeed();
				}else{
					mainBox.eventFeed.setLoadingDisplay(false);
				}				
			}
			
			public function cancelUpdateCfnEventFeed():void
			{
				updateTimer.stop();
				stackEventsUpdate = false;
				mainBox.eventFeed.cfService.cancel();
				checkForStackStudioEmbeddedStack();
			}
			
			public function getStackOutputs():void
			{
				stackData.getStackData();
			}
			
			private function checkForStackStudioEmbeddedStack():void
			{
				if(project.currentVersion != null)
				{
					var element:Element;
					for each(element in project.currentVersion.elements)
					{
						if(element.elementType == ResourceType.EMBEDDED_STACK)
						{
							var embeddedStack:EmbeddedStack = new EmbeddedStack(element);
							if(embeddedStack.isStackStudioProject())
							{
								var bucketName:String = embeddedStack.getBucketName();
								deleteStudioEmbeddedStackBucket.send({bucket_name: bucketName});
							}
						}
					}
				}
			}
			
			protected function deleteStudioEmbeddedStackBucket_resultHandler(event:ResultEvent):void
			{
				
			}
			
			protected function deleteStackButton_clickHandler(event:MouseEvent):void
			{	
				if(project.userHasPermission(user.id, PermissionType.DELETE_STACK, selectedEnvironment))
				{
					var deleteStack:DeleteStackPopUp = new DeleteStackPopUp();
					deleteStack.stack = provisionedVersion;
					deleteStack.cloudAccountId = project.cloud_account.id;
					deleteStack.region = project.region;
					deleteStack.deleteStackService.addEventListener(DeleteCFStackResultEvent.RESULT, deleteStack_resultHandler);
					PopUpManager.addPopUp(deleteStack, UIComponent(parentApplication), true);
				}else
				{
					Alert.show(AlertMessage.PERMISSION_DENIED);
				}
			}
			
			private function deleteStack_resultHandler(event:DeleteCFStackResultEvent):void
			{
				stackEventsUpdate = true;
				updateCfnEventFeed();
			}
			
			protected function visual_clickHandler(event:MouseEvent):void
			{
				if(event.target is RuntimeDiagram)
				{
					runningObjectDescriptions.selectedIndex = 0;
				}
			}
			
			public function setLoadingDisplayContent():void
			{
				diagramStack.selectedChild = loadingDisplayContent;
			}
			
			protected function runningView_initializeHandler(event:FlexEvent):void
			{
				updateTimer.addEventListener(TimerEvent.TIMER, updateCfnEventFeed);
			}
			
			protected function diagramContent_creationCompleteHandler(event:FlexEvent):void
			{
				if(project.userHasPermission(user.id, PermissionType.UPDATE_STACK, selectedEnvironment))
				{
					diagramContent.enabled = true;
				}else
				{
					diagramContent.enabled = false;
				}
			}
			
		]]>

	</fx:Script>
	
	<fx:Declarations>
		<services:CloudApiService id="deleteStudioEmbeddedStackBucket"
								  action="delete_studio_embedded_stack_bucket"
								  cloudAccountId="{project.cloud_account.id}"
								  region="{project.region}"
								  serviceType="S3"
								  result="deleteStudioEmbeddedStackBucket_resultHandler(event)"/>
	</fx:Declarations>
	<mx:VDividedBox width="100%" height="100%" backgroundColor="0x330066">
		<s:Group width="100%" height="100%">
			<s:Rect width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="white"/>
				</s:fill>
			</s:Rect>
			<s:VGroup height="100%" width="100%">
				<s:HGroup id="runtimeHeaderHG"
						  z="1" 
						  alpha="1" 
						  verticalAlign="middle"
						  paddingLeft="14" paddingTop="7"
						  width="100%"
						  visible="{diagramStack.selectedChild == diagramContent}">
					<s:HGroup id="runtimeButtonsHG"
							  width="100%" height="100%"
							  horizontalAlign="left">
						<s:Button width="180"
								  label="Refresh Workspace"
								  enabled="{diagramStack.selectedChild == diagramContent}"
								  click="updateCfnEventFeed()"/>
						<s:Button label="Delete Stack"
								  id="deleteStackButton"
								  enabled="{diagramStack.selectedChild == diagramContent}"
								  click="deleteStackButton_clickHandler(event)"/>
					</s:HGroup>
					<s:HGroup id="runtimeLabelHG"
							  width="100%" height="100%"
							  horizontalAlign="right">
						<s:Label id="runtimeLabel"
								 text="{provisionedVersion.environment}::{provisionedVersion.version}"/>
					</s:HGroup>
				</s:HGroup>
				<mx:ViewStack height="100%" width="100%" id="diagramStack" creationPolicy="all">
					<s:NavigatorContent height="100%" width="100%" id="messageContent">
						<s:HGroup height="100%" width="100%" verticalAlign="middle" horizontalAlign="center">
							<mx:Text x="516" width="228" textAlign="center" fontWeight="bold" fontSize="12"
									 text="Your stack is not currently running.  Provision stack in design view in order to see running properties here."/>
						</s:HGroup>
					</s:NavigatorContent>
					<s:NavigatorContent height="100%" width="100%" id="loadingDisplayContent">
						<s:VGroup height="100%" width="100%" verticalAlign="middle" horizontalAlign="center">
							<s:BusyIndicator height="100" width="100" visible="true"/>
							<s:Label text="Loading resources..." fontSize="14"/>
						</s:VGroup>
					</s:NavigatorContent>
					<s:NavigatorContent id="diagramContent"
										height="100%" width="100%" 
										creationComplete="diagramContent_creationCompleteHandler(event)">
						<c9:RuntimeDiagram id="visual" 
										   width="100%" height="100%"
										   cloudAccountId="{project.cloud_account.id}"
										   region="{project.region}"
										   cfnService="{mainBox.eventFeed.cfService}"
										   stackName="{provisionedVersion.stackName}"
										   provisionedVersion="{provisionedVersion}"
										   click="visual_clickHandler(event)"
										   nodeChange="showDetails(event)"/>
					</s:NavigatorContent>
				</mx:ViewStack>
			</s:VGroup>
		</s:Group>
		<mx:ViewStack id="runningObjectDescriptions" width="100%" height="30%" selectedIndex="0" creationPolicy="all">
			<s:NavigatorContent creationPolicy="all">
				<c9:CFStackDataDisplay id="stackData"
									   project="{project}"
									   width="100%" height="100%"/>
			</s:NavigatorContent>
			<s:NavigatorContent id="detailsContent">
				<s:Group width="100%" height="100%" id="detailsGroup">
					<s:Rect width="100%" height="100%">
						<s:fill>
							<s:SolidColor color="white"/>
						</s:fill>
					</s:Rect>
					<s:VGroup height="100%" width="100%"/>
				</s:Group>
			</s:NavigatorContent>
		</mx:ViewStack>
	</mx:VDividedBox>
</s:Group>
