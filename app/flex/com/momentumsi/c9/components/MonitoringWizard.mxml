<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	width="706" 
	height="571"
	title="Configure Monitor"
    close="PopUpManager.removePopUp(this)"
	defaultButton="{btnCancel}"
	initialize="init(event)"
	creationComplete="creationCompleteHandler(event)"
    move="doMove(event)"
	>

	
	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.components.enumerations.MonitorSetType;
			import com.momentumsi.c9.utils.Helpers;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.DropdownEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.MoveEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			import mx.utils.ArrayUtil;
			import mx.utils.StringUtil;
			import mx.utils.XMLUtil;
			import mx.validators.*;
			
			[Bindable]
			private var host:String;
			
			[Bindable]
			private var viewStackWizardBind:ViewStack ;
			
			[Bindable]
			private var step1Summary:String;

			[Bindable]
			public var cloud:String;
						
			[Bindable]
			private var metricName:String;
			
			[Bindable]
			public var cloudActions:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			public var nodeId:String;

			
			private var app:Object = FlexGlobals.topLevelApplication;

			// cloud_monitor create properties.  Likely better to use
			// object or class.  MUST be bindable
			[Bindable]
			public var accountId:int;	
			[Bindable]
			private var monitorMetricName:String ;
			[Bindable]
			private var monitorResourceName:String;
			[Bindable]
			private var namespaceSetId:int ;
			[Bindable]
			private var monitorPeriod:int ;
			[Bindable]
			private var monitorEvaluationPeriod:int ;
			[Bindable]
			private var monitorStatisticId:int ;
			[Bindable]
			private var monitorComparisonOperatorId:int ;
			[Bindable]
			private var monitorThreshold:Number ;
			[Bindable]
			private var monitorUnit:int ;
			// Result (Set by Creating a new CLOUD_MONITOR
			[Bindable]
			private var cloudMonitorId:int;
			
			
			[Bindable]
			private var cloudMonitorProperties:Object;
			
			private var comparisonOperators:XMLList ;
			
			private function init(event:Event):void
			{
				namespaceSetId = -1 ;
				viewStackWizardBind = viewStackWizard ;
				cloudMonitorProperties = new Object() ;
				metricName = "Metric" ;
				
				cloud = Helpers.currentCloud(this);
				accountId = Helpers.currentAccount(this);
				
				host = app.GetConfiguration( "serviceUrl" ) ;
				
				getMonitorsStatistics.send( );
				getMonitorComparisonOperators.send( ) ;
				getNamespaceSets.send( ) ;
			}

			// Validation based on:
			// http://blog.flexexamples.com/2007/08/13/validating-flex-forms-using-the-validator-classes/
			private function validateForm(evt:MouseEvent):void
			{
				var currentStep:int = viewStackWizard.selectedIndex ;
				var errorMessage:Object = new Object() ;
				
				var validatorArray:Array = getValidatorsForStep( currentStep )
				
				var validatorErrorArray:Array = Validator.validateAll(validatorArray);

				// Validations not in validators
				// Need to integrate in errorMessage results
				var isValid:Boolean = validateStep( currentStep, errorMessage ) ;
				
				var isValidForm:Boolean = validatorErrorArray.length == 0 ;
				
				if( isValidForm && isValid )
				{
					nextStep() ;
				}
				else
				{
					var err:ValidationResultEvent ;
					var errorMessageArray:Array = [] ;
					for each( err in validatorErrorArray )
					{
						var errMessage:String = err.message ;
						var errField:String = FormItem(err.currentTarget.source.parent).label ;
					
						errorMessageArray.push( errField + ": " + errMessage ) ;

					}
					Alert.show( errorMessageArray.join("\n"), "Invalid settings...", Alert.OK) ;
				}					
			}
			
			
			/* EVENT HANDLERS */
			
			public function handleGetMonitorComparisonOperatorsResult(event:ResultEvent):void
			{
				// The combobox is on the 3rd canvas and NOT initialized at load
				// so it has an initialize event that uses this variable
				comparisonOperators = Helpers.xmlChildrenFromEvent(event);
			}
			
			public function handleGetMonitorStatisticsResult(event:ResultEvent):void
			{	
				cbStatistics.dataProvider = Helpers.xmlChildrenFromEvent(event);
			}

			public function handleNamespaceSetsResult(event:ResultEvent):void
			{	
				cbNamespaceSets.dataProvider = Helpers.xmlChildrenFromEvent(event);
			}	
			
			public function handleGetMetricsResult(event:ResultEvent):void
			{				
				cbMetrics.dataProvider = Helpers.xmlChildrenFromEvent(event);
			}
			
			public function handleGetResourcesForMetricResult(event:ResultEvent):void
			{
				cbResource.dataProvider = Helpers.xmlChildrenFromEvent(event);
			}
			
			
			private var actionParameters:Object ;
			
			public function addAction(event:MouseEvent):void
			{
				var newTopic:Boolean = rbgTopic.selectedValue == 0 ;
				if( cloudActions.length >= 5 )
				{
					return ;
				}

				if( newTopic )
				{
					cloudActions.addItem
						({
							cloud_alarm_type: cbAlarmState.selectedItem.data, 
							cloud_alarm_sns_token: txtTopic.text, 
							cloud_alarm_email: txaEmailAddresses.text 
						});				
				}
			}
			
			public function removeAction(event:MouseEvent):void
			{
				var index:int = cloudActions.getItemIndex(dgActions.selectedItem);
				cloudActions.removeItemAt(index);
			}
			
			[Bindable]
			private var cloudAlarmSNSToken:String;
			[Bindable]
			private var cloudAlarmType:String;
			[Bindable]
			private var cloudAlarmEmail:String;
			
			private var actionsCreatedCounter:int;
			public function handleCloudMonitorCreated(event:ResultEvent):void
			{
				var xml:XML = event.result as XML ;
				
				// Populate the global cloudMonitorID
				cloudMonitorId = xml.child("id");
				
				actionsCreatedCounter = 0 ;
				
				for each (var cloudAction:Object in cloudActions)
				{
					cloudAlarmSNSToken = cloudAction.cloud_alarm_sns_token ;
					cloudAlarmType = cloudAction.cloud_alarm_type ;
					cloudAlarmEmail = cloudAction.cloud_alarm_email ;
					
					createCloudAlarm.send();
				}

			}

			public function handleCloudAlarmCreated(event:ResultEvent):void
			{
				trace("handleCloudAlarmCreated:" + actionsCreatedCounter ) ;
				
				// This handles a fork-join by counting
				if( ++actionsCreatedCounter == cloudActions.length )
				{
					trace("handleCloudAlarmCreated All processed" ) ;

					// This creates the alarm in the cloud.
					// It does not yet check to see if the alarm already exists
					// or set any actions.
					// The instance (dimensions) are still hard coded
					
					createAlarmInCloud.send();					
				}
			}
			
			public function handleCreateAlarmInCloud(event:ResultEvent):void
			{
				// MonitoringBox listens for this to know to 
				// repopulate the Grid of Monitors
				var evt:Event = new Event("done", false, false ) ;
				this.dispatchEvent(evt) ;
				
				PopUpManager.removePopUp(this);							
			}
			
			
			/* END EVENT HANDLERS */
			
			
			/* WIZARD STATE MANAGEMENT */
			
			public function nextStep():int
			{			
				// index is zero based, numChildren is count of pages
				var index:int = viewStackWizard.selectedIndex ;
								
				if (index < (viewStackWizard.numChildren-1) )
				{
					index++;
					viewStackWizard.selectedIndex=index;
				}
				return index ;
			}	
			
			public function prevStep():int
			{
				// index is zero based, numChildren is count of pages
				var index:int = viewStackWizard.selectedIndex ;

				if (index != 0)
				{
					index--;
					viewStackWizard.selectedIndex=index;
				}
								
				return index ;
			}
			
			public function finishWizard(evt:MouseEvent):void
			{
				PopUpManager.removePopUp(this);
				var monitorSetTypeId:int = getMonitorSetTypeId() ;	
				
				var resourceXml:XML = cbResource.selectedItem as XML ;
				monitorResourceName = resourceXml.toString();

				// All of the data must be [Bindable], probably better to use Object or a class
				// Can use controls directly in mx:request
				monitorMetricName = (monitorSetTypeId == MonitorSetType.NONE)
					? ""
					: Helpers.comboBoxXmlElement( cbMetrics, "name") ;
				
				var xml:XML = cbNamespaceSets.selectedItem as XML ;
				namespaceSetId = xml.child("id"); // "namespace_set_id"				
				
				monitorPeriod = int( cbPeriod.selectedItem.data ) ;
				monitorStatisticId = Helpers.comboBoxXmlElementInt( cbStatistics, "id" );
				monitorComparisonOperatorId = Helpers.comboBoxXmlElementInt( cbComparisonOperator, "id") ;
				monitorEvaluationPeriod = nsEvaluationPeriods.value * 60 ;
				
				// monitorEvaluationPeriod (duration) / monitorPeriod must be an int
				
				monitorThreshold = nsThreshold.value ;
				monitorUnit = 0 ; // Percent, etc.
				
				// Create the Cloud Monitor, which will kick off the creation of Actions
				createCloudMonitor.send();
			}
			
			public function finishButtonEnabled():Boolean
			{
				if( viewStackWizard.selectedIndex == (viewStackWizard.numChildren - 1))
				{
					// May want to see if user did change the threshold, eval periods set
					if( cbComparisonOperator.selectedIndex < 0 )
						return false ;
					
					if( getMonitorSetTypeId() == 0 )
						return true ;
					
					if( cbResource.selectedIndex >= 0 )
						return true;
				}
				return false;
			}
			

			// http://cookbooks.adobe.com/post_Simple_ViewStack_switching_by_id-1661.html
			public function onPanelChange(evt:IndexChangedEvent):void
			{
				setFinishButtonState() ;
				
				if( evt.newIndex == 1 ) // Step 1 (Metrics of Namespace/Set)
				{
					var xmlStat:XML = cbStatistics.selectedItem as XML ;

					step1Summary = "Name: " +
						txtName.text + " Statistic:" +  
						Helpers.xmls( xmlStat, "monitor_statistic_name") + " Period: " +
						cbPeriod.selectedItem.label + " Namespace/Set: " +
						getNamespaceSetName( cbNamespaceSets.selectedItem ) ;
					
					var xml:XML = cbNamespaceSets.selectedItem as XML ;
					namespaceSetId = xml.child("id"); // "namespace_set_id"
					
					getMetricsForNamespaceSet.send( {} );
				}	
				else if( evt.newIndex == 2 ) // Step 2 (Resources for Metric)
				{			
					metricName = Helpers.comboBoxXmlElement( cbMetrics, "name")	
					
					var monitorSetTypeId:int = getMonitorSetTypeId();
					if( monitorSetTypeId != -1 )
					{	
						if( monitorSetTypeId == MonitorSetType.NONE )
						{
							cbResource.enabled = false ;
						}
						else
						{
							cbResource.enabled = true ;
							getResourcesForMetrics.send
							( 
								{ id: accountId, monitor_set_type_id: monitorSetTypeId } 
							) ;
						}	
					}
				}
			}
			
			private function setFinishButtonState():void
			{
				btnFinish.enabled = finishButtonEnabled() ;				
			}
			
			/* CONTROL STATE MANAGEMENT */
			private function setAddActionButtonState():Boolean
			{
				if( null == rbgTopic.selectedValue )
					return false ;
				
				if( txaEmailAddresses.text.length == 0 )
				{
					return false ;	
				}
				
				if( cloudActions.length >= 5 )
				{
					return false ;
				}
				
				if( 0 == rbgTopic.selectedValue )
				{
					return txtTopic.text.length > 0 ;
				}
				else
				{
					return cbTopic.selectedIndex >= 0 ;
				}
				
				return false ;	
			}
			
			/* HELPERS */
			
			
			private function getMonitorSetTypeId():int
			{
				var monitorSetTypeId:int = -1 ;

				if( cbNamespaceSets.selectedIndex >= 0 )
				{
					monitorSetTypeId = int
					(
						Helpers.comboBoxXmlElement
						( 
							cbNamespaceSets, 
							"monitor-set-type-id"
						)
					) ;
				}
				return monitorSetTypeId ;
			}
			
			/* END HELPERS */
			
			/* VALIDATION */
			
			public function getValidatorsForStep( currentStep:int ) : Array
			{
				var validatorArray:Array = new Array()
				
				if( currentStep == 0 )
				{
					validatorArray.push(nameValid);
					//validatorArray.push(descValid);
					validatorArray.push(aggregateValid);
					validatorArray.push(namespaceSetValid);
				}
				else if (currentStep == 1 )
				{
					validatorArray.push(metricNameValid) ;
				}
				else if (currentStep == 2 )
				{
//					validatorArray.push(txtThresholdValid) ;
				}
				else if (currentStep == 3 )
				{
					
				}
				return validatorArray ;
			}
						
			// These would provide additional validation not accomplised by validators
			public function validateStep( stepNumber:int, errorMessage:Object ) :Boolean
			{
				// Should probably have an array of validation functions
				// instead of an ugly switch
				
				// NOTE: Steps are zero based
				switch( stepNumber )
				{
					case 0:
						return validateStep0( errorMessage ) ;
						
					case 1:
						return validateStep1( errorMessage ) ;
						
					case 2:
						return true;
						
					case 3:
						return true;
				}
				
				errorMessage["message"] = "Unknown Step";
				return false ;
			}
			
			public function validateStep0( errorMessage:Object) : Boolean
			{
				errorMessage["message"] = "OOPS" ;
				return true ;
			}

			public function validateStep1( errorMessage:Object) : Boolean
			{
				errorMessage["message"] = "OOPS" ;
				return true ;
			}
			
			/* END VALIDATION */
			
			/* COMPONENT SUPPORT */
			
			// labelFunction for NamespaceSet Combobox
			private function getNamespaceSetName(item:Object):String 
			{
				var xml:XML = item as XML ;
						
				return xml.child("namespace-abbrev") + " - " + xml.child("set-name") ;
			}
			
//			private function setComparisonOpeators(event:Event):void
//			{
//				event.target.dataProvider = comparisonOperators;
//			}
			/* END COMPONENT SUPPORT */
			
			protected function doMove(event:MoveEvent):void
			{
				var appW:Number=FlexGlobals.topLevelApplication.width;
				var appH:Number=FlexGlobals.topLevelApplication.height;
				if(this.x+this.width>appW)
				{
					this.x=appW-this.width;
				}
				if(this.x<0)
				{
					this.x=0;
				}
				if(this.y+this.height>appH)
				{
					this.y=appH-this.height;
				}
				if(this.y<0)
				{
					this.y=0;
				}
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				PopUpManager.centerPopUp(this);
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<mx:HTTPService
			id="getMonitorsStatistics"
			url="{host}/monitor_statistics.xml"
			resultFormat="e4x"
			method="GET"
			result="handleGetMonitorStatisticsResult(event)"
			/>	
		
		<mx:HTTPService
			id="getMonitorComparisonOperators"
			url="{host}/monitor_comparison_operators.xml"
			resultFormat="e4x"
			method="GET"
			result="handleGetMonitorComparisonOperatorsResult(event)"
			/>
		
		<mx:HTTPService
			id="getNamespaceSets"
			url="{host}/clouds/get_namespace_sets/{cloud}.xml"
			resultFormat="e4x"
			method="GET"
			result="handleNamespaceSetsResult(event)"
			/>	
		
		<mx:HTTPService
			id="getMetricsForNamespaceSet"
			url="{host}/cloud_namespace_sets/get_metric_names/{namespaceSetId}.xml"
			resultFormat="e4x"
			method="GET"
			result="handleGetMetricsResult(event)"
			/>	
		
		<!-- Do not specify .xml, returns stringarray (always xml) -->
		<mx:HTTPService
			id="getResourcesForMetrics"
			url="{host}/ec2_accounts/get_monitor_resources"
			resultFormat="e4x"
			method="POST"
			result="handleGetResourcesForMetricResult(event)"
			/>	
		
		<!-- This is an example of a RESTful create of a complex object -->
		<!-- The contentType is REQUIRED for Ruby to see the complex object in params -->
		<mx:HTTPService
			id="createCloudMonitor"
			url="{host}/cloud_monitors.xml"
			resultFormat="e4x"
			contentType="application/xml"
			method="POST"
			result="handleCloudMonitorCreated(event)">
			<mx:request>
				<cloud_monitor>
					<monitor_name>{txtName.text}</monitor_name>
					<monitor_description>{txtDescription.text}</monitor_description>
					<monitor_metric_name>{monitorMetricName}</monitor_metric_name>
					<cloud_namespace_set_id>{namespaceSetId}</cloud_namespace_set_id>
					<monitor_period>{monitorPeriod}</monitor_period>
					<monitor_evaluation_period>{monitorEvaluationPeriod}</monitor_evaluation_period>
					<monitor_statistic_id>{monitorStatisticId}</monitor_statistic_id>
					<monitor_comparison_operator_id>{monitorComparisonOperatorId}</monitor_comparison_operator_id>
					<monitor_threshold>{monitorThreshold}</monitor_threshold>
					<monitor_unit>{monitorUnit}</monitor_unit>
					<monitor_resource_name>{monitorResourceName}</monitor_resource_name>
					<actions_enabled>false</actions_enabled>
				</cloud_monitor>
			</mx:request>		
		</mx:HTTPService>
		
		
		<mx:HTTPService
			id="createCloudAlarm"
			url="{host}/cloud_alarms.xml"
			resultFormat="e4x"
			contentType="application/xml"
			method="POST"
			result="handleCloudAlarmCreated(event)">
			<mx:request>
				<cloud_alarm>
					<cloud_monitor_id>{cloudMonitorId}</cloud_monitor_id>
					<cloud_alarm_sns_token>{cloudAlarmSNSToken}</cloud_alarm_sns_token>
					<cloud_alarm_type>{cloudAlarmType}</cloud_alarm_type>
					<cloud_alarm_email>{cloudAlarmEmail}</cloud_alarm_email>
				</cloud_alarm>
			</mx:request>		
		</mx:HTTPService>
		
		<mx:HTTPService
			id="createAlarmInCloud"
			url="{host}/cloud_monitors/create_in_cloud/{cloudMonitorId}.xml"
			resultFormat="e4x"
			method="GET"
			result="handleCreateAlarmInCloud(event)"
			/>
		
		
		<!-- This didn't work -->
		<!-- Trying to mimic Parameter binding with HTTPService components -->
		<!-- http://livedocs.adobe.com/flex/3/html/help.html?content=data_access_5.html -->
		<mx:ArrayCollection 
			id="namespaceSetArray" 
			source="{ArrayUtil.toArray(new XML(getNamespaceSets.lastResult).children())}"/>
		
		<!-- Step 0 Validators -->
		<mx:StringValidator id="nameValid" source="{txtName}" property="text" minLength="3" maxLength="255" />
		
		<!-- mx:StringValidator id="descValid" source="{txtDescription}" property="text" minLength="0" maxLength="255" -->
		
		<mx:NumberValidator id="aggregateValid" source="{cbStatistics}" property="selectedIndex" minValue="0" maxValue="1000" lowerThanMinError="This selection is required."/>
		
		<mx:NumberValidator id="namespaceSetValid" source="{cbNamespaceSets}" property="selectedIndex" minValue="0" maxValue="1000" lowerThanMinError="This selection is required."/>
		
		<!-- Step 1 Validators -->
		
		<mx:NumberValidator id="metricNameValid" source="{cbMetrics}" property="selectedIndex" minValue="0" maxValue="1000" lowerThanMinError="This selection is required."/>
		
		<!-- Step 2 Validators -->
		<!-- mx:NumberValidator id="txtThresholdValid" 
		source="{txtThreshold}" 
		property="text" 
		minValue="0" maxValue="100000" 
		allowNegative="false" 
		decimalSeparator="." 
		domain="real" -->
		
		
		<!-- End Validators -->
		
		
	</fx:Declarations>
	<!--
	<s:states>
		<s:State name="newTopic">
			<mx:SetProperty name="enabled" target="txtTopic" value="true" />			
			<mx:SetProperty name="enabled" target="cbTopic" value="false" />
		</s:State>
		<s:State name="editTopic">
			<mx:SetProperty name="enabled" target="txtTopic" value="false" />
			<mx:SetProperty name="enabled" target="cbTopic" value="true" />
		</s:State>
	</s:states>
	-->
	
	<!-- The actual Wizard ViewStack -->
	<mx:ViewStack id="viewStackWizard" borderStyle="solid" width="100%" height="100%" change="onPanelChange(event)">
		
		<!-- Step 0 -->
		<mx:Canvas id="define" label="Define Monitor" visible="true" width="100%" height="100%">
			<mx:Text width="100%">	
				<mx:text>This wizard will walk you through setting up a new Monitor and Alarms. Begin by giving your new Monitor a unique name so that you can identify it from other Monitors you might create.</mx:text>
			</mx:Text>

			<mx:Form id="frmStep0" x="10" y="67" width="673" height="259">
				<mx:FormHeading label="Specify name, Statistic, Period, and Namespace + Set" />
				
				<mx:FormItem label="Name" required="true">
					<s:TextInput id="txtName" text="" x="135" y="117" maxChars="255"/>					
				</mx:FormItem>
				<mx:FormItem label="Description" required="false">
					<s:TextInput id="txtDescription" maxChars="255"/>
				</mx:FormItem>
			
			<mx:Box direction="vertical" borderStyle="solid" 
					paddingTop="10" paddingBottom="10" paddingLeft="10" paddingRight="10" width="636" height="131">

			<mx:FormItem required="true" label="Statistic">
				<mx:ComboBox id="cbStatistics" width="139" labelField="monitor-statistic-name" prompt="Select Aggregrate"/>				
			</mx:FormItem>
			
			<mx:FormItem required="true" label="Period">				
			<mx:ComboBox id="cbPeriod" width="116" selectedIndex="1">
				<mx:ArrayCollection>
					<fx:Object label="1 Minute" data="60"></fx:Object>
					<fx:Object label="5 Minutes" data="300"></fx:Object>
					<fx:Object label="15 Minutes" data="900"></fx:Object>
					<fx:Object label="1 Hour" data="3600"></fx:Object>
				</mx:ArrayCollection>
			</mx:ComboBox>
			</mx:FormItem>
			
			<mx:FormItem required="true" label="Namespace + Set">				
			<mx:ComboBox id="cbNamespaceSets" 
						 width = "270"
						 prompt="Select service and type"
						 labelFunction="getNamespaceSetName"
						 >			
			</mx:ComboBox>
			</mx:FormItem>

			</mx:Box>						
			</mx:Form>
			
		</mx:Canvas>	

		<!-- Step 1 -->
		<mx:Canvas id="metrics" label="Define Metrics" width="100%" height="100%">
			<mx:Text width="100%">	
				<mx:text>
					Choose Monitor Metrics for {step1Summary}.
				</mx:text>
			</mx:Text>
			
			<mx:Form id="frmStep1" x="10" y="67" width="673" height="226">
				<mx:FormItem required="true" label="Statistic">
					<mx:ComboBox id="cbMetrics" width="139" labelField="name" prompt="Select Metric"/>				
				</mx:FormItem>
				
			</mx:Form>
		</mx:Canvas>
		
		<!-- Step 2 -->
		<mx:Canvas id="resource" label="Select Resource" width="100%" height="100%">
			<mx:Text width="100%">	
				<mx:text>
					Choose Monitor Metrics for {step1Summary}.
				</mx:text>
			</mx:Text>
			
			<mx:Form id="frmStep2" y="67" width="673" height="208" x="10">
				<mx:FormItem required="true" label="Resource">
					<mx:ComboBox id="cbResource" width="139" change="{setFinishButtonState()}" prompt="Select Resource" />
				</mx:FormItem>				
				<mx:FormItem label="Alarm" paddingTop="10" fontWeight="normal">
					<mx:HBox width="546" height="36" paddingTop="1" paddingLeft="2">
						<mx:FormItem id="lblMetricName" label="{metricName} is">
							<mx:ComboBox id="cbComparisonOperator"
										 labelField="symbol"
										 width="60"  
										 initialize="cbComparisonOperator.dataProvider=comparisonOperators"
										 change="{setFinishButtonState()}">
							</mx:ComboBox>
						</mx:FormItem>
						<mx:NumericStepper width="74" id="nsThreshold" maxChars="10" minimum="0.0" maximum="9999.999" stepSize="0.1" change="{setFinishButtonState()}"/>
						<mx:Label text="for"/>
						<mx:NumericStepper id="nsEvaluationPeriods" width="59" maxChars="5" 
										   minimum="1" maximum="9999" stepSize="1"
										   change="{setFinishButtonState()}"/>
						<mx:Label text="minutes."/>
					</mx:HBox>
				</mx:FormItem>
			</mx:Form>
			<mx:FormItem label="Metric" x="26" y="302">
				<mx:LineChart id="lineChart" height="88" width="140">
					<mx:series>
						<mx:LineSeries displayName="DataPoints" yField=""/>
					</mx:series>
				</mx:LineChart>
				<mx:Legend dataProvider="{lineChart}"/>
			</mx:FormItem>
				   
		</mx:Canvas>		   

		<!-- Step 3 -->
		<mx:Canvas id="actions" label="Define Actions" width="100%" height="100%">
			<mx:Text width="100%">	
				<mx:text>
					Create Actions (optional).
				</mx:text>
			</mx:Text>
			<mx:Form id="frmStep3" y="23" width="660" height="349" x="7">
				<mx:DataGrid id="dgActions" editable="false" sortableColumns="false" dataProvider="{cloudActions}" width="610" height="131" rowCount="5" color="#000000">
					<mx:columns>
						<mx:DataGridColumn dataField="cloud_alarm_type" headerText="Alarm State"  width="150">
							<mx:itemRenderer>
								<fx:Component>
									<mx:Label text="{data}">
										<fx:Script>
											<![CDATA[
											// This translates id to human friendly name, NOT a best practice
											override public function set data( value:Object ) : void
											{
											var cloud_alarm_type:int = value.cloud_alarm_type ;
											var typeString:String;
											
											switch( cloud_alarm_type )
											{
											case 0:
											typeString = "ALARM";
											break ;
											case 1:
											typeString = "OK";
											break;
											case 2:
											typeString = "INSUFFICIENT DATA";
											break ;
											default:
											typeString = "UNKNOWN";
											}
											
											super.data = typeString;
											}
											]]>
										</fx:Script>
									</mx:Label>
								</fx:Component>
							</mx:itemRenderer>
						</mx:DataGridColumn>
						<mx:DataGridColumn dataField="cloud_alarm_sns_token" headerText="Action Details" width="150">
						</mx:DataGridColumn>
						<mx:DataGridColumn dataField="cloud_alarm_email" headerText="Email Addresses" width="300">						
						</mx:DataGridColumn>
					</mx:columns>
				</mx:DataGrid>
				<mx:FormItem label="Alarm State">
					<mx:ComboBox id="cbAlarmState">
						<mx:ArrayCollection>
							<fx:Object label="ALARM" data="0"></fx:Object>
							<fx:Object label="OK" data="1"></fx:Object>
							<fx:Object label="INSUFFICIENT DATA" data="2"></fx:Object>
						</mx:ArrayCollection>
					</mx:ComboBox>
				</mx:FormItem>
				<mx:RadioButtonGroup id="rbgTopic" change="btnAddAction.enabled = setAddActionButtonState()"/>
				<mx:FormItem label="New Topic" width="384" visible="false">
					<mx:RadioButton groupName="rbgTopic" id="rbNewTopic" click="currentState='newTopic'" value="0"/>
					<s:TextInput x="36" y="12" id="txtTopic" enabled="false" change="btnAddAction.enabled = setAddActionButtonState()"/>
				</mx:FormItem>
				<mx:FormItem label="Select Topic" width="385" visible="false">
					<mx:RadioButton groupName="rbgTopic" id="rbExistingTopic" click="currentState='editTopic'" value="1"/>
					<mx:ComboBox x="120" y="8" id="cbTopic" enabled="false"/>
				</mx:FormItem>
				<mx:FormItem label="Email">
					<mx:TextArea  id="txaEmailAddresses" width="299" change="btnAddAction.enabled = setAddActionButtonState()"/>
				</mx:FormItem>
			</mx:Form>
			<s:Button x="196" y="390" label="Add Action" id="btnAddAction" click="addAction(event)" enabled="false" toolTip="Up to 5 actions are allowed."/>
			<s:Button x="306" y="390" label="Remove Action" id="btnRemoveAction" click="removeAction(event)" enabled="{dgActions.selectedItem != null}"/>
		</mx:Canvas>		   

	</mx:ViewStack>
	
	<s:HGroup x="364" y="496">
		<s:Button label="Previous" 
				  x="277.2" y="433.85" 
				  click="prevStep()" 
				  enabled="{viewStackWizardBind.selectedIndex != 0}" />
		<s:Button label="Next" 
				  x="352.9" y="433.85" 
				  click="validateForm(event)" 
				  enabled="{viewStackWizardBind.selectedIndex != (viewStackWizardBind.numChildren -1)}"/>
		<s:Button label="Finish" id="btnFinish"
				  x="437" y="433.85"
				  enabled="false"
				  click="finishWizard(event)"/>
		
		<s:Button label="Cancel" id="btnCancel"
				  x="514.25" y="433.85" 
				  click="PopUpManager.removePopUp(this);" 
				  width="80"/>
	</s:HGroup>
	

</s:TitleWindow>