<?xml version="1.0" encoding="utf-8"?>
<wizard:WizardWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:diagrammer="fr.kapit.diagrammer.base.uicomponent.*"
			   xmlns:components="com.momentumsi.c9.components.*"
			   width="742" height="542"
			   wizardType="{ResourceTypeLabel.SNS}"
			   xmlns:sns="com.momentumsi.c9.components.sns.*"
			   xmlns:wizard="com.momentumsi.c9.components.wizard.*" xmlns:services="com.momentumsi.c9.services.*">
	<fx:Script>
		<![CDATA[
			import com.adobe.utils.StringUtil;
			import com.maccherone.json.JSON;
			import com.momentumsi.c9.constants.AlertMessage;
			import com.momentumsi.c9.constants.ImagePath;
			import com.momentumsi.c9.constants.ResourceType;
			import com.momentumsi.c9.constants.ResourceTypeLabel;
			import com.momentumsi.c9.models.Element;
			import com.momentumsi.c9.utils.Helpers;
			
			import fr.kapit.diagrammer.Diagrammer;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;

			[Bindable]
			public var createFromProvisionScreen:Boolean = false;
			public var topicObject:Object;
			private var currentTopicName:String;
			[Bindable]
			private var subscriptionsReview:String = "";
			
			override public function applyConfigurations():void
			{
				topicName.setFocus();
				if(element.id == null)
				{
					return;
				}
					
				currentTopicName = element.name;
				topicName.text = currentTopicName;
				topicObject = element.properties;
				try
				{
					var subscriptionsArray:Array = topicObject['Properties']['Subscription'];
					for(var index:int; index < subscriptionsArray.length; index++)
					{
						try{
							subscriptionsCollection.addItem({Protocol: subscriptionsArray[index]['Protocol'], Endpoint: "@" + subscriptionsArray[index]['Endpoint']['Ref']});
						}catch(error:Error){
							subscriptionsCollection.addItem(subscriptionsArray[index]);
						}						
					}
				}catch(error:Error){
					//No subscriptions available
				}				
			}
			
			protected function createTopic_clickHandler(event:MouseEvent):void
			{
				buttonGroup.createButton.label = "Saving";
				buttonGroup.createButton.enabled = false;
					
				var topicAttributes:Object = new Object();
				topicAttributes['Type'] = ResourceType.SNS_TOPIC;
				topicAttributes['Properties'] = new Object();
				
				var subscriptions:Array = new Array();
				for each(var sub:Object in subscriptionsCollection)
				{
					subscriptions.push({Endpoint: sub['Endpoint'], Protocol: sub['Protocol']});
				}

				if(subscriptions.length != 0)
				{
					topicAttributes['Properties']['Subscription'] = subscriptions;
				}
				
				if(!objectManagementCreate){
					saveElement(topicName.text, topicAttributes);
				}
				
				if(objectManagementCreate)
				{
					var subscripts:String = JSON.encode(subscriptions);
					
					objectManagementLaunchSvc.send({name: topicName.text, subscriptions: subscripts});
				}
			}
			
			protected function newButton_clickHandler(event:MouseEvent):void
			{
				subscriptionsCollection.addItemAt({Protocol:"email", Endpoint:""}, 0);
			}
			
			protected function removeButton_clickHandler(event:MouseEvent):void
			{
				if(subscriptionsGrid.selectedIndex != -1)
				{
					subscriptionsCollection.removeItemAt(subscriptionsGrid.selectedIndex);
				}
			}
			
			protected function nextButton_clickHandler(event:MouseEvent):void
			{
				var alert:Boolean = false;
				
				if(topicStack.selectedChild == topicContent)
				{
					if(topicName.text != "" && topicName.text.length < 257)
					{
						if(Helpers.validateAlphanumeric(topicName.text))
						{
							if(objectManagementCreate)
							{
								nameAlert.visible = false;					
							}else
							{
								if(projectVersion.validateUniqueName(topicName.text, element))
								{
									nameAlert.visible = false;
								}else
								{
									nameAlert.text = AlertMessage.NOT_UNIQUE;
									nameAlert.visible = true;
									alert = true;
								}
							}
						}else
						{
							alert = true;
							nameAlert.text = AlertMessage.NOTALPHANUMERIC;
							nameAlert.visible = true;
						}
					}
					else
					{
						alert = true;
						nameAlert.text = AlertMessage.INVALID;
						nameAlert.visible = true;
					}
					
					subscriptionsReview = "";
					for each(var sub:Object in subscriptionsCollection)
					{
						subscriptionsReview = subscriptionsReview + sub.Endpoint + ",\n";
					}
					if(subscriptionsReview.length > 0)
					{
						subscriptionsReview = subscriptionsReview.substr(0, subscriptionsReview.length-2);
					}
				}
				
				if(!alert)
				{
					topicStack.selectedIndex++;
				}
			}
			
			private function previousButton_clickHandler(event:MouseEvent):void
			{
				if(topicStack.selectedIndex != 0)
				{
					topicStack.selectedIndex--;
				}
			}
			
			protected function objectManagementLaunchSvc_faultHandler(event:FaultEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function objectManagementLaunchSvc_resultHandler(event:ResultEvent):void
			{
				if(!createFromProvisionScreen)
				{
					Helpers.getObjectManagement(this).refreshResourceList();
				}else
				{
					provisionInputs.getAdvancedOptionsNotifications();
					provisionInputs.notification.selectedIndex = -1;
				}
				PopUpManager.removePopUp(this);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:ArrayCollection id="subscriptionsCollection"/>
		<components:ProjectProvisionInputs id="provisionInputs"/>
		
		<services:CloudApiService id="objectManagementLaunchSvc"
								  cloudAccountId="{cloudAccount.id}"
								  region="{region}"
								  action="create_topic"
								  serviceType="{CloudApiService.SNS_SERVICE}"
								  result="objectManagementLaunchSvc_resultHandler(event)"
								  fault="objectManagementLaunchSvc_faultHandler(event)"/>
	</fx:Declarations>
	<s:VGroup height="100%" width="100%" gap="0">
		<wizard:WizardWindowTitle id="topicWizardWindowTitle"
								  wizardStack="{topicStack}"
								  resourceImage="{ImagePath.NEW_SNS}"
								  resourceLabel="{wizardDisplayName}"/>
		<wizard:CookieTrail wizardStack="{topicStack}"
							gap="440"/>
		<mx:ViewStack height="100%" width="100%" id="topicStack" creationPolicy="all" paddingTop="10" paddingLeft="20">
			<s:NavigatorContent height="100%" width="100%" label="Topic Configurations" id="topicContent">
				<s:VGroup height="100%" width="100%" paddingLeft="10" paddingRight="10">
					<s:Form height="100%" width="100%">
						<s:layout>
							<s:FormLayout gap="-5"/>
						</s:layout>
						<s:FormItem label="Topic Name*:" width="100%">
							<s:HGroup width="100%">
								<s:TextInput id="topicName" width="250"/>
								<s:Image width="16" height="16" source="{ImagePath.HELPER_ICON}" toolTip="Up to 256 alphanumeric characters, hyphens (-) and underscores (_) allowed."/>
								<mx:Text id="nameAlert" text="{AlertMessage.INVALID}" color="red" visible="false"/>
							</s:HGroup>
						</s:FormItem>
						<s:FormItem label="Display Name:" width="100%" visible="{!objectManagementCreate}">
							<s:HGroup width="100%">
								<s:TextInput id="displayName" width="350"/>
								<s:Image width="16" height="16" source="{ImagePath.HELPER_ICON}" toolTip="Required for SMS subscriptions (can be up to 10 characters).  Optional for other transports."/>
							</s:HGroup>
						</s:FormItem>
						<s:FormItem width="100%" label="Subscriptions:">
							<s:VGroup height="100%" width="100%">
								<s:HGroup>
									<s:Button label="New" id="newButton" click="newButton_clickHandler(event)"/>
									<s:Button label="Remove" id="removeButton" click="removeButton_clickHandler(event)"/>
								</s:HGroup>
								<s:HGroup width="100%">
									<s:DataGrid width="100%" maxHeight="150" minHeight="0" id="subscriptionsGrid" selectionMode="singleRow"
												dataProvider="{subscriptionsCollection}" editable="true">
										<s:columns>
											<s:ArrayList id="parametersGridColumns">
												<s:GridColumn headerText="Protocol" dataField="Protocol" width="165">
													<s:itemEditor>
														<fx:Component>
															<mx:ComboBox>
																<mx:dataProvider>
																	<s:ArrayCollection>
																		<fx:String>email</fx:String>
																		<fx:String>email-json</fx:String>
																		<fx:String>https</fx:String>
																		<fx:String>http</fx:String>
																		<fx:String>sms</fx:String>
																		<fx:String>sqs</fx:String>
																	</s:ArrayCollection>
																</mx:dataProvider>
															</mx:ComboBox>
															<!--
															<s:ComboBoxGridItemEditor >
																<s:dataProvider>
																	<s:ArrayCollection>
																		<fx:String>email</fx:String>
																		<fx:String>email-json</fx:String>
																		<fx:String>https</fx:String>
																		<fx:String>http</fx:String>
																		<fx:String>sms</fx:String>
																		<fx:String>sqs</fx:String>
																	</s:ArrayCollection>
																</s:dataProvider>
															</s:ComboBoxGridItemEditor>
															-->
														</fx:Component>
													</s:itemEditor>
												</s:GridColumn>
												<s:GridColumn id="endpointColumn" itemEditor="spark.components.gridClasses.DefaultGridItemEditor" headerText="Endpoint" dataField="Endpoint"/>
											</s:ArrayList>
										</s:columns>
									</s:DataGrid>
									<s:Image width="16" 
											 source="{ImagePath.HELPER_ICON}"
											 toolTip="Example Endpoints:&#13;email: email@example.com&#13;email-json: email@example.com&#13;https: https://example.com&#13;http: http://example.com&#13;sms: 5551234567&#13;sqs: arn:aws:sqs:us-east-1:123456789123/MYQUEUE"/>
								</s:HGroup>
							</s:VGroup>
						</s:FormItem>
					</s:Form>
				</s:VGroup>
			</s:NavigatorContent>
			<s:NavigatorContent id="reviewContent" width="100%" height="100%" label="Review">
				<s:VGroup>
					<mx:Text text="Please Review Your Notification Topic" y="20" fontWeight="bold"/>
					<s:VGroup x="25" y="60" paddingLeft="20">
						<mx:Text text="Name: {topicName.text}"/>
						<mx:Text text="Display Name: {displayName.text}" visible="{!objectManagementCreate &amp;&amp; displayName.text.length > 0}" includeInLayout="{!objectManagementCreate &amp;&amp; displayName.text.length > 0}"/>
						<s:HGroup visible="{subscriptionsCollection.length > 0}" includeInLayout="{subscriptionsCollection.length > 0}">
							<mx:Text text="Subscriptions: "/>
							<mx:Text text="{subscriptionsReview}"/>
						</s:HGroup>
					</s:VGroup>		
				</s:VGroup>
			</s:NavigatorContent>
		</mx:ViewStack>
		<wizard:WizardButtonGroup id="buttonGroup"
								  wizardStack="{topicStack}"
								  nextButtonClick="nextButton_clickHandler(event)"
								  previousButtonClick="previousButton_clickHandler(event)"
								  finishButtonClick="createTopic_clickHandler(event)"/>
	</s:VGroup>
</wizard:WizardWindow>
