<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="com.momentumsi.c9.components.*"
		  creationComplete="creationCompleteHandler(event)"
		  paddingLeft="5" paddingBottom="5" paddingTop="5"
		  width="100%" height="100%">
	
	<fx:Metadata>
		[Event(name="addVersion", type="flash.events.Event")]
		[Event(name="workspaceVersionSet", type="flash.events.Event")]
		[Event(name="promoteEnvironment", type="flash.events.Event")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.constants.Color;
			import com.momentumsi.c9.models.Environment;
			import com.momentumsi.c9.models.ProjectVersion;
			import com.momentumsi.c9.models.ProvisionedVersion;
			import com.momentumsi.c9.models.Version;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import spark.components.RadioButton;
			
			[Bindable]
			public var selectedVersion:String;
			[Bindable]
			public var selectedEnvironment:String = Environment.DEVELOPMENT;
			public var currentEnvironment:String;
			public var promoteEnvironment:String;
			public var promoteVersion:String;
			public var versionsCollection:ArrayCollection;
			public var provisionedVersions:ArrayCollection;
			
			
			public var activeVersionsCollection:ArrayCollection;
			public var allVersionsCollection:ArrayCollection;
			
			protected function addVersionButton_clickHandler(event:MouseEvent):void
			{
				dispatchEvent(new Event("addVersion"));
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				refreshVersions();
			}
			
			public function refreshVersions():void
			{
				if(selectedVersion == null)
				{
					var recentVersion:Version = versionsCollection.getItemAt(0) as Version; 
					selectedVersion = recentVersion.number;
				}
				activeVersionsCollection = new ArrayCollection();
				allVersionsCollection = new ArrayCollection();
				
				gridVG.removeAllElements();
				
				var newVersionRow:VersionRow;
				var active:Boolean;
				for each(var version:Version in versionsCollection)
				{
					active = false;
					newVersionRow = new VersionRow();
					newVersionRow.version = version.number;
					newVersionRow.addEventListener("promoteEnvironment", promoteClickHandler)
					//Add radio button group before setting environments, as environments adds radio buttons
					newVersionRow.radioButtonGroup = versionGroup;
					//Setting environments collection is required before setting selectedEnvironment, because this is used to add the radiobuttons
					newVersionRow.environments = version.environments;
					if(selectedVersion == version.number)
					{
						newVersionRow.selectedEnvironment = selectedEnvironment;
					}
					
					
					allVersionsCollection.addItemAt(newVersionRow, 0);
					for each(var pv:ProvisionedVersion in provisionedVersions)
					{
						var pVersion:String = pv.version;
						if(pVersion == version.number)
						{
							newVersionRow.setRunningEnvironment(pv.environment);
							active = true;
						}
					}
					
					//Create collection of only active versions
					if(active)
					{
						activeVersionsCollection.addItemAt(newVersionRow, 0);
					}
				}
				
				showInactiveToggle_changeHandler();
			}
			
			protected function versionGroup_changeHandler(event:Event):void
			{
				var target:RadioButtonGroup = event.target as RadioButtonGroup;
				var selectedButton:RadioButton = target.selection;
				var versionRow:VersionRow = target.selection.owner as VersionRow;
				var version:String = versionRow.version;
				selectedVersion = version;
				selectedEnvironment = selectedButton.value.toString();
				dispatchEvent(new Event("workspaceVersionSet"));
			}
			
			protected function showInactiveToggle_changeHandler():void
			{
				gridVG.removeAllElements();
				
				var row:VersionRow;
				if(showInactiveToggle.selected)
				{
					for each(row in allVersionsCollection)
					{
						gridVG.addElementAt(row, 0);
					}
				}else{
					for each(row in activeVersionsCollection)
					{
						gridVG.addElementAt(row, 0);
					}
				}
			}
			
			private function promoteClickHandler(event:Event):void
			{
				var row:VersionRow = event.target as VersionRow;
				currentEnvironment = row.currentEnvironment;
				promoteEnvironment = row.promoteEnvironment;
				promoteVersion = row.version;
				dispatchEvent(new Event("promoteEnvironment"));
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:RadioButtonGroup id="versionGroup"
							valueCommit="versionGroup_changeHandler(event)"/>
	</fx:Declarations>
	<s:CheckBox id="showInactiveToggle"
				label="Show Inactive"
				selected="true"
				change="showInactiveToggle_changeHandler()"/>
	<s:HGroup id="labelsHG" 
			  width="100%"
			  fontSize="13" fontWeight="bold" 
			  gap="20"
			  horizontalAlign="left"
			  paddingLeft="70">		
		<s:Label id="devLabel" 
				 text="Dev"/>
		<s:Label id="testLabel" 
				 text="Test"/>
		<s:Label id="stageLabel"
				 text="Stage"/>
		<s:Label id="prodLabel"
				 text="Prod"/>
	</s:HGroup>
	<s:VGroup width="100%" height="100%"
			  horizontalAlign="left">
		<s:Scroller id="environmentsScroller"
					horizontalScrollPolicy="off"
					height="100%" width="100%">
			<s:VGroup id="gridVG"
					  horizontalAlign="left"
					  gap="18" paddingRight="30">
				<components:VersionRow/>
				<components:VersionRow/>
				<components:VersionRow/>
				<components:VersionRow/>
				<components:VersionRow/>
				<components:VersionRow/>
				<components:VersionRow/>
				<components:VersionRow/>
				<components:VersionRow/>
				<components:VersionRow/>
				<components:VersionRow/>
			</s:VGroup>
		</s:Scroller>
		<s:HGroup width="100%"
				  horizontalAlign="center">
			<s:Button id="addVersionButton" x="401" width="101" label="Add Version"
					  click="addVersionButton_clickHandler(event)"/>
			<s:Button id="viewAllButton"
					  visible="false"
					  includeInLayout="false"
					  label="View All"/>
		</s:HGroup>
	</s:VGroup>
</s:VGroup>