<?xml version="1.0" encoding="utf-8"?>
<wizard:WizardWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
				     xmlns:s="library://ns.adobe.com/flex/spark" 
				     xmlns:mx="library://ns.adobe.com/flex/mx"
				     xmlns:diagrammer="fr.kapit.diagrammer.base.uicomponent.*"
					 xmlns:wizard="com.momentumsi.c9.components.wizard.*"
					 xmlns:services="com.momentumsi.c9.services.*"
				     close="PopUpManager.removePopUp(this)"
				     creationComplete="creationCompleteHandler(event)"
				     move="Helpers.doMove(this)"
				     title="Embedded Stack Wizard"
				     width="700" height="500">
	<fx:Script>
		<![CDATA[
			import com.maccherone.json.*;
			import com.momentumsi.c9.constants.AlertMessage;
			import com.momentumsi.c9.constants.ImagePath;
			import com.momentumsi.c9.constants.ResourceType;
			import com.momentumsi.c9.events.ProjectEvent;
			import com.momentumsi.c9.models.Project;
			import com.momentumsi.c9.models.User;
			import com.momentumsi.c9.models.resources.EmbeddedStack;
			import com.momentumsi.c9.utils.Helpers;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.ComboBox;
			import mx.core.IVisualElement;
			import mx.events.CollectionEvent;
			import mx.events.DropdownEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.StringUtil;
			import mx.utils.UIDUtil;
			
			public static const awsBucketEndpoint:String = "https://s3.amazonaws.com/";
			
			[Bindable]
			public var accountId:int = 0;
			[Bindable]
			private var projectId:int = 0;
			[Bindable]
			private var timeoutReview:String = "";
			[Bindable]
			public var stackXML:XML;
			public var stackObject:Object;
			private var currentStackName:String;
			private var embeddedProject:Project = new Project();
			private var embeddedStack:EmbeddedStack;
			[Bindable]
			private var parameterList:ArrayCollection = new ArrayCollection();
			private var parametersForm:ParameterInputForm = new ParameterInputForm();
			[Bindable]
			private var paramFields:ArrayCollection = new ArrayCollection();
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				PopUpManager.centerPopUp(this);
				projectId = Helpers.currentProject(this);
				
				if(element.id == null)
				{
					//No element id means it must be a stack studio project
					var projectName:String = getProjectName();
					embeddedProject = user.findProjectByName(projectName);
					getEmbeddedProjectCurrentVersion();
				}
			}
			
			override public function applyConfigurations():void
			{
				if(element.id == null)
				{
					return;
				}
				
				stackName.text = element.name;

				embeddedStack = new EmbeddedStack(element);
				
				if(embeddedStack.timeoutInMinutes != null)
				{
					timeout.text = embeddedStack.timeoutInMinutes;
				}
				
				if(embeddedStack.templateURL != null)
				{
					if(embeddedStack.isStackStudioProject())
					{
						embeddedProject = user.findProjectByName(embeddedStack.getStackStudioProjectName());
						getEmbeddedProjectCurrentVersion();
					}else
					{
						//get template from api call for parameters
					}
				}
			}
			
			private function getEmbeddedProjectCurrentVersion():void
			{
				embeddedProject.getProjectVersion(embeddedProject.mostRecentVersion);
				embeddedProject.addEventListener(ProjectEvent.VERSION_SET, getProjectVersion_resultHandler);
			}
			
			private function getProjectVersion_resultHandler(event:ProjectEvent):void
			{
				parametersVGroup.removeAllElements();
				parameterList = embeddedProject.getProjectParameters();
				if(parameterList.length > 0)
				{
					parametersForm.templateParameters = parameterList;
					parametersForm.addEventListener(FlexEvent.CREATION_COMPLETE, fillParametersIfReconfigure);
					parametersVGroup.addElement(parametersForm);
				}else
				{
					parametersVGroup.addElement(noParametersNotification);
				}
			}
			
			private function fillParametersIfReconfigure(event:FlexEvent):void
			{
				if(element.id != null)
				{
					if(parameterList.length > 0)
					{
						var group:VGroup;
						var formItem:FormItem;
						var input:TextInput;
						var selection:ComboBox;
						var parameterName:String;
						try
						{
							for(var index:int=0; index < parametersForm.numElements; index++)
							{
								group = parametersForm.getElementAt(index) as VGroup;
								formItem = group.getElementAt(0) as FormItem;
								input = formItem.getElementAt(0) as TextInput;
								parameterName = formItem.label.replace(":", "");
								if(formItem.getElementAt(0) is TextInput){
									input.text = element.properties['Properties']['Parameters'][parameterName];
								}else if(formItem.getElementAt(0) is ComboBox){
									selection = formItem.getElementAt(0) as ComboBox;
									var i:int = 0;
									for each(var item:* in selection.dataProvider)
									{
										if(item == element.properties['Properties']['Parameters'][parameterName])
										{
											selection.selectedIndex = i;
											break;
										}
										i++;
									}
								}
							}
						}catch(e:Error)
						{
							trace(e.message);
						}
					}
				}
			}
			
			private function getProjectName():String
			{
				//This function only works on element id = null
				var embeddedProjectName:String;
				try
				{
					embeddedProjectName = node.name.split(" ")[0];
				}catch(e:Error)
				{
					embeddedProjectName = "";
					trace(e.message);
				}
				return embeddedProjectName;
			}
			
			protected function previousButton_clickHandler(event:MouseEvent):void
			{
				if(stackWizardViewStack.selectedIndex > 0)
				{
					stackWizardViewStack.selectedIndex--;
				}
			}
			
			protected function nextButton_clickHandler(event:MouseEvent):void
			{
				var alert:Boolean = false;
				
				if(stackWizardViewStack.selectedChild == stackDetailsContent)
				{
					if(Helpers.StringReplaceAll(stackName.text, " ", "") != "")
					{
						if(Helpers.validateAlphanumeric(stackName.text))
						{
							if(projectVersion.validateUniqueName(stackName.text, element))
							{
								stackNameAlert.visible = false;
							}else
							{
								stackNameAlert.text = AlertMessage.NOT_UNIQUE;
								stackNameAlert.visible = true;
								alert = true;
							}
						}else
						{
							stackNameAlert.text = AlertMessage.NOTALPHANUMERIC;
							stackNameAlert.visible = true;
							alert = true;
						}
					}else
					{
						stackNameAlert.text = AlertMessage.INVALID;
						stackNameAlert.visible = true;
						alert = true;
					}
					
					if(Helpers.StringReplaceAll(timeout.text, " ", "") != "")
					{
						var numberCheck:Number = Number(timeout.text);
						if(isNaN(numberCheck))
						{
							alert = true;
							timeoutAlert.visible = true;
						}else
						{
							timeoutReview = numberCheck.toString();
							timeoutAlert.visible = false;
						}
					}else
					{
						timeoutReview = "None";
					}
				}else if(stackWizardViewStack.selectedChild == templateInputsContent)
				{
					if(parameterList.length > 0)
					{
						paramFields.removeAll();
						var group:VGroup;
						var formItem:FormItem;
						var input:TextInput;
						var selection:ComboBox;
						var paramValue:String;
	
						for(var index:int=0; index < parametersForm.numElements; index ++)
						{
							group = parametersForm.getElementAt(index) as VGroup;
							formItem = group.getElementAt(0) as FormItem;
							input = formItem.getElementAt(0) as TextInput;
							if(formItem.getElementAt(0) is TextInput){
								input = formItem.getElementAt(0) as TextInput;
								paramValue = input.text; 
							}else if(formItem.getElementAt(0) is ComboBox){
								selection = formItem.getElementAt(0) as ComboBox;
								paramValue = selection.selectedLabel;
							}
							paramFields.addItem({parameterKey: formItem.label.replace(":", ""), parameterValue: paramValue});
						}
						
						for each(var parameter:Object in paramFields)
						{
							if(parameter['parameterValue'] == "")
							{
								alert = true;
								Alert.show(AlertMessage.ALLFIELDSREQUIRED);
							}
						}
						
						if(!alert)
						{
							for each(var param:Object in paramFields)
							{
								parametersReview.text = parametersReview.text + param.parameterKey + " : " + param.parameterValue + "\n";
							}
							parametersReview.text = StringUtil.trim(parametersReview.text);
						}
					}
				}
				
				if(!alert)
				{
					stackWizardViewStack.selectedIndex++;
				}
			}
			
			protected function submitButton_clickHandler(event:MouseEvent):void
			{
				submitButton.enabled = false;
				submitButton.label = "Saving";
				var mainBox:MainBox = Helpers.getMainBox(this);
				
				var stackAttributes:Object = new Object();
				stackAttributes['Type'] = ResourceType.EMBEDDED_STACK;
				stackAttributes['Properties'] = {};
				
				if(element.id == null)
				{
					var embeddedStackName:String = getProjectName();
					stackAttributes['Properties']['TemplateURL'] = awsBucketEndpoint + "StackStudio-" + embeddedStackName + "-" + UIDUtil.createUID().substr(0,8) + "/" + embeddedStackName + ".template";
				}else
				{
					stackAttributes['Properties']['TemplateURL'] = element.properties['Properties']['TemplateURL'];
				}
				
				if(paramFields.length > 0)
				{
					stackAttributes['Properties']['Parameters'] = {}
					for each(var param:Object in paramFields)
					{
						stackAttributes['Properties']['Parameters'][param.parameterKey] = param.parameterValue;
					}
				}
				
				if(Helpers.StringReplaceAll(timeout.text, " ", "") != "")
				{
					stackAttributes['Properties']["TimeoutInMinutes"] = timeout.text;
				}
				
				saveElement(stackName.text, stackAttributes);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:Text id="noParametersNotification" text="This stack does not contain any parameters."/>
	</fx:Declarations>
	
	<s:VGroup width="100%" height="90%" gap="0">
		<s:Group width="100%" height="60" visible="{stackWizardViewStack.selectedIndex == 0}" includeInLayout="{stackWizardViewStack.selectedIndex == 0}">
			<s:Rect width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="#FFFFFF"/>
				</s:fill>
			</s:Rect>
			<s:HGroup width="100%" height="60" verticalAlign="middle" paddingTop="10" paddingBottom="10" paddingLeft="20" gap="15">
				<s:Image source="/com/momentumsi/c9/assets/IconPNGs/CFStack.png"/>		
				<s:Label text="Embedded Stack" fontWeight="bold" fontSize="24"/>		
			</s:HGroup>
		</s:Group>
		<s:Group height="60" width="100%">
			<s:Rect width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="#A7A9Ad"/>
				</s:fill>
			</s:Rect>
			<s:Line x="50" y="14" width="600">
				<s:stroke>
					<s:SolidColorStroke color="#838588" weight="1"/>
				</s:stroke>
			</s:Line>
			<s:Line x="50" y="15" width="600">
				<s:stroke>
					<s:SolidColorStroke color="#D1D3D8" weight="1"/>
				</s:stroke>
			</s:Line>
			<s:HGroup width="100%" gap="190" horizontalAlign="center" paddingTop="9">
				<s:VGroup horizontalAlign="center">
					<s:Image source="/com/momentumsi/c9/assets/IconPNGs/TrailKnob.png" width="16" height="16" visible="{stackWizardViewStack.selectedChild == stackDetailsContent}"/>
					<mx:Text text="User Details" fontWeight="bold" enabled="{stackWizardViewStack.selectedChild == stackDetailsContent}" disabledColor="white"/>
				</s:VGroup>
				<s:VGroup horizontalAlign="center">
					<s:Image source="/com/momentumsi/c9/assets/IconPNGs/TrailKnob.png" width="16" height="16" visible="{stackWizardViewStack.selectedChild == templateInputsContent}"/>
					<mx:Text text="Parameters" fontWeight="bold" enabled="{stackWizardViewStack.selectedChild == templateInputsContent}" disabledColor="white"/>
				</s:VGroup>
				<s:VGroup horizontalAlign="center">
					<s:Image source="/com/momentumsi/c9/assets/IconPNGs/TrailKnob.png" width="16" height="16" visible="{stackWizardViewStack.selectedChild == reviewContent}"/>
					<mx:Text text="Review" fontWeight="bold" enabled="{stackWizardViewStack.selectedChild == reviewContent}" disabledColor="white"/>
				</s:VGroup>
			</s:HGroup>
		</s:Group>
		<mx:ViewStack id="stackWizardViewStack" width="100%" height="100%" paddingTop="10" paddingLeft="20" paddingRight="20" creationPolicy="all">
			<s:NavigatorContent id="stackDetailsContent" width="100%" height="100%">
				<s:Form textAlign="right">
					<s:FormItem label="Stack Name*:">
						<s:HGroup textAlign="left">
							<s:TextInput id="stackName" width="250"/>
							<mx:Text id="stackNameAlert" text="{AlertMessage.INVALID}" color="red" visible="false"/>
						</s:HGroup>
					</s:FormItem>
					<s:FormItem label="Rollback Timeout:">
						<s:HGroup textAlign="left">
							<s:TextInput id="timeout" widthInChars="5"/>
							<mx:Text text="minutes"/>
							<s:Image source="{ImagePath.HELPER_ICON}" toolTip="The amount of time to allow the stack creation before determining the create failure and rollback. The default is no timeout."/>
							<mx:Text id="timeoutAlert" text="{AlertMessage.NOTNUMBER}" color="red" visible="false"/>
						</s:HGroup>
					</s:FormItem>
				</s:Form>
			</s:NavigatorContent>
			<s:NavigatorContent height="100%" width="100%" id="templateInputsContent">
				<s:VGroup id="parametersVGroup" width="100%" height="100%"/>
			</s:NavigatorContent>
			<s:NavigatorContent id="reviewContent" width="100%" height="100%">
				<s:VGroup paddingLeft="20" height="100%" width="100%" paddingTop="10">
					<mx:Text text="Please Review Your Embedded Stack" y="20" fontWeight="bold"/>
					<s:VGroup x="25" y="60" paddingLeft="20">
						<mx:Text text="Stack Name: {stackName.text}"/>
						<mx:Text text="Timeout: {timeoutReview}"/>
						<s:HGroup visible="{paramFields.length > 0}" includeInLayout="{paramFields.length > 0}">
							<mx:Text text="Parameters:"/>
							<mx:Text id="parametersReview"/>
						</s:HGroup>
					</s:VGroup>
				</s:VGroup>
			</s:NavigatorContent>
		</mx:ViewStack>
	</s:VGroup>
	<s:Button id="previousButton" x="10" y="436" label="Previous" click="previousButton_clickHandler(event)" enabled="{stackWizardViewStack.selectedIndex != 0}"/>
	<s:Button id="nextButton" x="92" y="436" label="Next" click="nextButton_clickHandler(event)" enabled="{stackWizardViewStack.selectedChild != reviewContent}"/>
	<s:Button id="submitButton" x="169" y="436" label="Finish" click="submitButton_clickHandler(event)" enabled="{stackWizardViewStack.selectedChild == reviewContent}"/>
	<s:Button id="cancelButton" x="619" y="436" label="Cancel" click="{PopUpManager.removePopUp(this)}"/>
</wizard:WizardWindow>
