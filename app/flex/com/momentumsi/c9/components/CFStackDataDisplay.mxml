<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:components="com.momentumsi.c9.components.*" 
		 xmlns:services="com.momentumsi.c9.services.*"
		 creationComplete="group1_creationCompleteHandler(event)"
		 width="100%" height="100%" >
	<fx:Script>
		<![CDATA[			
			import com.momentumsi.c9.events.cloudFromation.DescribeStacksFaultEvent;
			import com.momentumsi.c9.events.cloudFromation.DescribeStacksResultEvent;
			import com.momentumsi.c9.models.Project;
			import com.momentumsi.c9.models.ProvisionedVersion;
			import com.momentumsi.c9.representers.CloudFormationStackRepresenter;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]
			public var project:Project;
			[Bindable]
			public var cloudAccountId:String
			[Bindable]
			public var region:String;
			[Bindable]
			private var stackOutputs:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var stackParameters:ArrayCollection = new ArrayCollection();
			
			public function getStackData(event:MouseEvent=null):void
			{
				var pv:ProvisionedVersion = project.currentProvisionedVersion;
				cfService.addEventListener(DescribeStacksResultEvent.RESULT, cfService_describeStacksResultHandler);
				cfService.addEventListener(DescribeStacksFaultEvent.FAULT, cfService_describeStacksFaultHandler);
				cfService.describeStacks(pv.stackName);
			}
			
			//Used to cancel service call and reset grids when changing versions
			public function cancelUpdate():void
			{
				cfService.removeEventListener(DescribeStacksResultEvent.RESULT, cfService_describeStacksResultHandler);
				cfService.removeEventListener(DescribeStacksFaultEvent.FAULT, cfService_describeStacksFaultHandler);
				cfService.cancel();
				stackOutputs = new ArrayCollection();
				stackParameters = new ArrayCollection();
			}
			
			protected function cfService_describeStacksResultHandler(event:DescribeStacksResultEvent):void
			{
				cfService.removeEventListener(DescribeStacksResultEvent.RESULT, cfService_describeStacksResultHandler);
				cfService.removeEventListener(DescribeStacksFaultEvent.FAULT, cfService_describeStacksFaultHandler);
				var stack:CloudFormationStackRepresenter = cfService.stack;
				stackOutputs = stack.outputs;
				stackParameters = stack.parameters;
			}
			
			protected function cfService_describeStacksFaultHandler(event:DescribeStacksFaultEvent):void
			{
				cfService.removeEventListener(DescribeStacksResultEvent.RESULT, cfService_describeStacksResultHandler);
				cfService.removeEventListener(DescribeStacksFaultEvent.FAULT, cfService_describeStacksFaultHandler);
			}
			
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				provisionedStackOutputs.refreshOutputsButton.addEventListener(MouseEvent.CLICK, getStackData);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<services:CloudFormationService id="cfService"
										region="{project.region}"
										cloudAccountId="{project.cloud_account.id}"/>
								  
	</fx:Declarations>
	<mx:TabNavigator height="100%" width="100%" creationPolicy="all" alpha="1.75">
		<s:NavigatorContent label="Outputs">
			<components:ProvisionedCloudFormationOutputs id="provisionedStackOutputs"
														 stackOutputs="{stackOutputs}"
														 height="100%" width="100%"/>
		</s:NavigatorContent>
		<s:NavigatorContent label="Launch Data">
			<components:CfLaunchData id="launchData"
									 stackParameters="{stackParameters}"
									 height="100%" width="100%"/>
		</s:NavigatorContent>
	</mx:TabNavigator>
</s:Group>
