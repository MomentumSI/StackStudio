<?xml version="1.0" encoding="utf-8"?>
<components:ObjectManagementDetailsBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" 
					   xmlns:components="com.momentumsi.c9.components.*" xmlns:services="com.momentumsi.c9.services.*">
	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.events.cache.AuthorizeCacheSecurityGroupIngressFaultEvent;
			import com.momentumsi.c9.events.compute.AuthorizePortRangeFaultEvent;
			import com.momentumsi.c9.events.compute.AuthorizePortRangeResultEvent;
			import com.momentumsi.c9.events.compute.DescribeSecurityGroupsResultEvent;
			import com.momentumsi.c9.events.compute.RevokePortRangeFaultEvent;
			import com.momentumsi.c9.events.compute.RevokePortRangeResultEvent;
			import com.momentumsi.c9.representers.ComputeSecGrpRulesRepresenter;
			import com.momentumsi.c9.representers.ComputeSecurityGroupRepresenter;
			import com.momentumsi.c9.services.CloudApiService;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.managers.PopUpManager;
			[Bindable]
			private var securityGroup:ComputeSecurityGroupRepresenter;
			[Bindable]
			public var securityGroupsCollection:ArrayCollection;
			
			override public function set resourceData(value:Object):void
			{
				if(value is ComputeSecurityGroupRepresenter)
				{
					securityGroup = value as ComputeSecurityGroupRepresenter;
				}else{
					securityGroup = new ComputeSecurityGroupRepresenter(value);
				}
				super.resourceData = securityGroup;
				detailsTabNav.selectedIndex = 0;
			}
			
			protected function deleteButton_clickHandler(event:MouseEvent):void
			{
				var destroyPopUp:DestroyResourceObjectManagement = new DestroyResourceObjectManagement();
				destroyPopUp.cloudAccountId = cloudAccount.id;
				destroyPopUp.region = region;
				destroyPopUp.resourceType = "computeSecurityGroup";
				destroyPopUp.resourceDisplayId = securityGroup.name;
				destroyPopUp.resourceId = securityGroup.id;
				PopUpManager.addPopUp(destroyPopUp, UIComponent(parentApplication), true);
			}
			
			protected function securityGroupPermissions_addRuleButton_clickHandler(event:MouseEvent):void
			{
				securityGroupPermissions.addRuleButton.label = "Authorizing";
				securityGroupPermissions.addRuleButton.enabled = false;
				var newRule:ComputeSecGrpRulesRepresenter = securityGroupPermissions.newGroupRule;
				var min:String = newRule.fromPort;
				var max:String = newRule.toPort;
				var options:Object = {
					ip_protocol: newRule.ipProtocol,
					group: newRule.group,
					cidr_ip: newRule.cidrIp
				};
				ec2Service.authorizePortRange(securityGroup.id, min, max, options);
			}
			
			protected function securityGroupPermissions_removeButton_clickHandler(event:MouseEvent):void
			{
				securityGroupPermissions.removeButton.label = "Revoking";
				securityGroupPermissions.removeButton.enabled = false;
				var selectedRule:ComputeSecGrpRulesRepresenter = securityGroupPermissions.selectedRule;
				var min:String = selectedRule.fromPort;
				var max:String = selectedRule.toPort;
				var options:Object = {
					ip_protocol: selectedRule.ipProtocol,
						group: selectedRule.group,
						cidr_ip: selectedRule.cidrIp,
						rule_id: selectedRule.id
				};
				ec2Service.revokePortRange(securityGroup.id, min, max, options);
			}
			
			protected function ec2Service_authorizePortRangeResultHandler(event:AuthorizePortRangeResultEvent):void
			{
				securityGroupPermissions.securityGroupRulesCollection.addItem(securityGroupPermissions.newGroupRule);
				securityGroupPermissions.addRuleButton.label = "Add Rule";
				securityGroupPermissions.addRuleButton.enabled = true;
				Alert.show("Security group rule has been authorized.");
			}
			
			protected function ec2Service_authorizePortRangeFaultHandler(event:AuthorizePortRangeFaultEvent):void
			{
				securityGroupPermissions.addRuleButton.label = "Add Rule";
				securityGroupPermissions.addRuleButton.enabled = true;
				securityGroupPermissions.securityGroupRulesCollection.removeItemAt(securityGroupPermissions.securityGroupRulesCollection.length - 1);
			}
			
			protected function ec2Service_revokePortRangeResultHandler(event:RevokePortRangeResultEvent):void
			{
				var index:int = securityGroupPermissions.securityGroupRulesCollection.getItemIndex(securityGroupPermissions.selectedRule);
				securityGroupPermissions.securityGroupRulesCollection.removeItemAt(index);
				securityGroupPermissions.removeButton.label = "Remove";
				securityGroupPermissions.removeButton.enabled = true;
				Alert.show("Security group rule has been revoked.");
			}
			
			protected function ec2Service_revokePortRangeFaultHandler(event:RevokePortRangeFaultEvent):void
			{
				securityGroupPermissions.removeButton.label = "Remove";
				securityGroupPermissions.removeButton.enabled = true;
			}
			
			protected function securityGroupPermissions_refreshSourceGroupsHandler(event:Event):void
			{
				ec2Service.describeSecurityGroups();
			}
			
			protected function ec2Service_describeSecurityGroupsResultHandler(event:DescribeSecurityGroupsResultEvent):void
			{
				securityGroupsCollection = ec2Service.securityGroups;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		
		<services:Ec2Service id="ec2Service"
							 cloudAccountId="{cloudAccount.id}"
							 region="{region}"
							 authorizePortRangeResult="ec2Service_authorizePortRangeResultHandler(event)"
							 authorizePortRangeFault="ec2Service_authorizePortRangeFaultHandler(event)"
							 describeSecurityGroupsResult="ec2Service_describeSecurityGroupsResultHandler(event)"
							 revokePortRangeResult="ec2Service_revokePortRangeResultHandler(event)"
							 revokePortRangeFault="ec2Service_revokePortRangeFaultHandler(event)"/>
							 
	</fx:Declarations>
	<s:HGroup paddingLeft="10" gap="20">
		<components:TextButton id="deleteButton"
							   text="Delete"
							   click="deleteButton_clickHandler(event)"/>
	</s:HGroup>
	<mx:TabNavigator id="detailsTabNav"
					 height="100%" width="100%">
		<s:NavigatorContent id="detailsTab"
							width="100%" height="100%"
							label="Details">
			<s:Form>
				<s:layout>
					<s:FormLayout gap="-5"/>
				</s:layout>
				<s:FormItem label="Group Name:">
					<s:Label text="{securityGroup.name}"/>
				</s:FormItem>
				<s:FormItem label="Group ID:">
					<s:Label text="{securityGroup.groupId}"/>
				</s:FormItem>
				<s:FormItem label="Description:">
					<s:Label text="{securityGroup.description}"/>
				</s:FormItem>
				<s:FormItem label="VPC ID:">
					<s:Label text="{securityGroup.vpcId}"/>
				</s:FormItem>
			</s:Form>
		</s:NavigatorContent>
		<s:NavigatorContent id="permissionsTab"
							width="100%" height="100%"
							label="Permissions">
			<s:Scroller width="100%" height="100%"
						horizontalScrollPolicy="off">
				<s:viewport>
					<components:ComputeSecurityGroupPermissions id="securityGroupPermissions"
																existingSecurityGroups="{securityGroupsCollection}"
																securityGroupRulesCollection="{securityGroup.ipPermissions}"
																addRuleButton_click="securityGroupPermissions_addRuleButton_clickHandler(event)"
																removeButton_click="securityGroupPermissions_removeButton_clickHandler(event)"
																refreshSourceGroups="securityGroupPermissions_refreshSourceGroupsHandler(event)"
																height="100%" width="100%">
						<components:layout>
							<s:HorizontalLayout/>
						</components:layout>
					</components:ComputeSecurityGroupPermissions>
				</s:viewport>
			</s:Scroller>
		</s:NavigatorContent>
	</mx:TabNavigator>
</components:ObjectManagementDetailsBox>