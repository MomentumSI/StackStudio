<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="100%" height="100%">
	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.constants.ResourceType;
			import com.momentumsi.c9.utils.Helpers;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			import mx.managers.PopUpManager;
			
			import spark.events.IndexChangeEvent;
			
			private var textAreaIndex:int;
			
			public function setFunctionsList():void
			{
				if(templateSections['Mappings'] != null)
				{
					functions.addItem({label: "Fn::FindInMap", data: '{ "Fn::FindInMap" : [ , , ] }'});
				}
				if(templateSections['Resources'] != null)
				{
					functions.addItem({label: "Fn::GetAtt", data: '{ "Fn::GetAtt" : [ , ] }'});
					functions.addItem({label: "Ref", data: '{ "Ref" :  }'});
				}
				functions.addItem({label: "Fn::GetAZs", data: '{ "Fn::GetAZs" : "" }'});
				functions.addItem({label: "Fn::Join", data: '{ "Fn::Join" : ["", []] }'});
			}

			private function functionList_changeHandler(event:IndexChangeEvent):void
			{
				templateResourcesCollection.removeAll();
				resourceAttributes.selectedIndex = -1;
				resourceAttributes.enabled = false;
				var attributes:Object = new Object();
				var item:*;
				var templateResources:Object = templateSections['Resources'];
				var templateMappings:Object = templateSections['Mappings'];
				var templateParameters:Object = templateSections['Parameters'];
				switch(functionList.selectedItem.label)
				{
					case "Fn::GetAtt":
						for (item in templateResources)
						{
							attributes = templateResources[item];
							templateResourcesCollection.addItem({label: item, type: attributes['Type'], data: '"' + item + '"'});
						}
						break;
					case "Fn::FindInMap":
						for(item in templateMappings)
						{
							templateResourcesCollection.addItem({label: item, data: '"' + item + '"'});
						}
						break;
					case "Ref":
						for(item in templateResources)
						{
							attributes = templateResources[item];
							templateResourcesCollection.addItem({label: item, type: attributes['Type'], data: '"' + item + '"'});
						}
						for(item in templateParameters)
						{
							templateResourcesCollection.addItem({label: item, type: "Parameter", data: '"' + item + '"'});
						}
						
				}
				if(templateResourcesCollection.length != 0)
				{
					resources.dataProvider = templateResourcesCollection;
					//resources.prompt = "Select Resource";
					resources.enabled = true;
				}else{
					//resources.prompt = "None Available";
					resources.enabled = false;
				}
			}
			
			
			protected function resources_changeHandler(event:IndexChangeEvent):void
			{
				resourceAttributes.enabled = false;
				resourceAttributes.dataProvider = null;

				switch(resources.selectedItem.type)
				{
					case ResourceType.EC2_INSTANCE:
						resourceAttributes.dataProvider = instanceAttributes;
						resourceAttributes.enabled = true;
						break;
					case ResourceType.BEANSTALK_ENV:
						resourceAttributes.dataProvider = environmentAttributes;
						resourceAttributes.enabled = true;
						break;
					case ResourceType.LOAD_BALANCER:
						resourceAttributes.dataProvider = loadBalancerAttributes;
						resourceAttributes.enabled = true;
						break;
					case ResourceType.DB_INSTANCE:
						resourceAttributes.dataProvider = dbInstanceAttributes;
						resourceAttributes.enabled = true;
						break;
					case ResourceType.S3_BUCKET:
						resourceAttributes.dataProvider = bucketAttributes;
						resourceAttributes.enabled = true;
						break;
					case ResourceType.SQS_QUEUE:
						resourceAttributes.dataProvider = queueAttributes;
						resourceAttributes.enabled = true;
						break;
				}
				//referenceFunction.text = referenceFunction.text + '"' + resources.selectedItem.label + '", ';
				//resourceAttributes.prompt = "Select Attribute";
			}
			
			protected function resourceAttributes_changeHandler(event:IndexChangeEvent):void
			{
				//referenceFunction.text = referenceFunction.text + '"' + resourceAttributes.selectedItem.label + '",';
			}
			
			private function referenceFunction_focusOutHandler(event:FocusEvent):void
			{
				textAreaIndex = referenceFunction.selectionAnchorPosition
			}
			
			public function saveButton_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			public function resetButton_clickHandler(event:MouseEvent):void
			{
				functionList.selectedIndex = -1;
				resources.selectedIndex = -1;
				resources.dataProvider = null;
				resources.enabled = false;
				resourceAttributes.selectedIndex = -1;
				resourceAttributes.dataProvider = null;
				resourceAttributes.enabled = false;
				referenceFunction.text = "";
			}
			
			protected function addButton_clickHandler(event:MouseEvent):void
			{
				if(textAreaIndex == -1)
				{
					referenceFunction.text = referenceFunction.text + '"' + functionList.selectedItem.label + '" : [ ';
				}else{
					var begin:String = referenceFunction.text.substring(0, textAreaIndex);
					var end:String = referenceFunction.text.substring(textAreaIndex);
					referenceFunction.text = begin + '"' + functionList.selectedItem.label + '" : [ ' + end;
				}
				textAreaIndex = -1;
			}
			
			protected function functionAddButton_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function referenceFunction_dragDropHandler(event:DragEvent):void
			{
				/*
				var newItem:Object = event.draggedItem;
				
				if(textAreaIndex == -1)
				{
					referenceFunction.text = referenceFunction.text + '"' + newItem.selectedItem.label + '" : [ ';
				}else{
					var begin:String = referenceFunction.text.substring(0, textAreaIndex);
					var end:String = referenceFunction.text.substring(textAreaIndex);
					referenceFunction.text = begin + '"' + newItem.selectedItem.label + '" : [ ' + end;
				}
				textAreaIndex = -1;
				*/
				var newItem:Object = event.draggedItem;
				if(event.dragSource.hasFormat("caretIndex"))
				{
					//event.preventDefault();
					DragManager.showFeedback(DragManager.COPY);
					var dropTarget:RichEditableText = RichEditableText(event.currentTarget);
					var dragInitiator:List = List(event.dragInitiator);
					var selectedItem:Object = dragInitiator.selectedItem;
					//var itemsArray:Array = event.dragSource.dataForFormat("treeItems") as Array;

					if(dropTarget.text == '')
					{
						dropTarget.text = selectedItem.data;
					}else{
						if(textAreaIndex == -1)
						{
							Alert.show("Click in function area where object should be added.");
							return;
						}else{
							var begin:String = dropTarget.text.substring(0, textAreaIndex);
							var end:String = dropTarget.text.substring(textAreaIndex);
							dropTarget.text = begin + selectedItem.data + end;
							textAreaIndex = -1;
						}
					}
					//var tempItem:Object = {label: itemsArray[0].label, data: itemsArray[0].data};
					
				}
			}
			
			protected function referenceFunction_dragEnterHandler(event:DragEvent):void
			{
				trace(event.dragSource.formats);
				if (event.dragSource.hasFormat("caretIndex"))// || event.dragSource.hasFormat("treeItems"))
				{
					DragManager.showFeedback(DragManager.COPY);
					DragManager.acceptDragDrop(referenceFunction);
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<fx:Object id="templateSections"/>
		<s:ArrayCollection id="templateResourcesCollection"/>
		
		<s:ArrayCollection id="instanceAttributes">
			<fx:Object label="AvailabilityZone" data='"AvailabilityZone"'/>
			<fx:Object label="PrivateDnsName" data='"PrivateDnsName"'/>
			<fx:Object label="PublicDnsName" data='"PublicDnsName"'/>
			<fx:Object label="PrivateIp" data='"PrivateIp"'/>
			<fx:Object label="PublicIp" data='"PublicIp"'/>
		</s:ArrayCollection>
		
		<s:ArrayCollection id="loadBalancerAttributes">
			<fx:Object label="CanonicalHostedZoneName" data='"CanonicalHostedZoneName"'/>
			<fx:Object label="CanonicalHostedZoneNameID" data='"CanonicalHostedZoneNameID"'/>
			<fx:Object label="DNSName" data='"DNSName"'/>
			<fx:Object label="SourceSecurityGroup.GroupName" data='"SourceSecurityGroup.GroupName"'/>
			<fx:Object label="SourceSecurityGroup.OwnerAlias" data='"SourceSecurityGroup.OwnerAlias"'/>
		</s:ArrayCollection>
		
		<s:ArrayCollection id="dbInstanceAttributes">
			<fx:Object label="Endpoint.Address" data='"Endpoint.Address"'/>
			<fx:Object label="Endpoint.Port" data='"Endpoint.Port"'/>
		</s:ArrayCollection>
		
		<s:ArrayCollection id="environmentAttributes">
			<fx:Object label="EndpointURL" data='"EndpointURL"'/>
		</s:ArrayCollection>
		
		<s:ArrayCollection id="bucketAttributes">
			<fx:Object label="DomainName" data='"DomainName"'/>
			<fx:Object label="WebsiteURL" data='"WebsiteURL"'/>
			<fx:Object label="Arn" data='"Arn"'/>
		</s:ArrayCollection>
		
		<s:ArrayCollection id="queueAttributes">
			<fx:Object label="Arn" data='"Arn"'/>
			<fx:Object label="QueueName" data='"QueueName"'/>
		</s:ArrayCollection>
		
		<s:ArrayCollection id="functions"/>
	</fx:Declarations>
	<s:VGroup height="100%" width="100%">
		<s:HGroup width="100%" paddingTop="5" paddingLeft="5" paddingRight="5" paddingBottom="5">
			<mx:Text text="Place cursor in 'Function' area where items are to be dragged, then drag items from lists to 'Function' area.  You may also edit text in 'Function' area." width="100%"/>
		</s:HGroup>
				  
		<s:HGroup width="100%" height="260" paddingTop="5" paddingRight="5" paddingLeft="5">
			<s:VGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
				<s:Label text="Reference:" fontWeight="bold"/>
				<s:List id="functionList" dragEnabled="true" dataProvider="{functions}" width="150" height="100%" change="functionList_changeHandler(event)"></s:List>
			</s:VGroup>
			<s:VGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
				<s:Label text="Resource:" fontWeight="bold"/>
				<s:List id="resources" dragEnabled="true" height="100%" change="resources_changeHandler(event)"></s:List>
			</s:VGroup>
			<s:VGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
				<s:Label text="Value:" fontWeight="bold"/>
				<s:List id="resourceAttributes" dragEnabled="true" height="100%" change="resourceAttributes_changeHandler(event)"></s:List>
			</s:VGroup>
		</s:HGroup>
		<s:VGroup width="100%" paddingLeft="10" paddingRight="10">
			<s:Label text="Function:" fontWeight="bold"/>
			<s:BorderContainer width="100%" height="50">
				<s:RichEditableText id="referenceFunction" width="100%" height="100%"
									backgroundColor="white"
									dragEnter="referenceFunction_dragEnterHandler(event)"
									dragDrop="referenceFunction_dragDropHandler(event)"
									focusOut="referenceFunction_focusOutHandler(event)" paddingLeft="3"
									paddingRight="3" paddingTop="3"/>
			</s:BorderContainer>
		</s:VGroup>
	</s:VGroup>
</s:Group>
