<?xml version="1.0" encoding="utf-8"?>
<wizard:WizardWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="700" height="500"
		 wizardType="{ResourceTypeLabel.S3}"
		 xmlns:components="com.momentumsi.c9.components.*"
		 creationComplete="creationCompleteHandler(event)"
		 defaultButton="{submitButton}"
		 xmlns:wizard="com.momentumsi.c9.components.wizard.*" 
		 xmlns:services="com.momentumsi.c9.services.*">
	<fx:Metadata>
		[Event(name="createBucketResult", type="com.momentumsi.c9.events.storage.CreateBucketResultEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import com.maccherone.json.JSON;
			import com.momentumsi.c9.constants.AlertMessage;
			import com.momentumsi.c9.constants.ImagePath;
			import com.momentumsi.c9.constants.ResourceType;
			import com.momentumsi.c9.constants.ResourceTypeLabel;
			import com.momentumsi.c9.events.storage.CreateBucketFaultEvent;
			import com.momentumsi.c9.events.storage.CreateBucketResultEvent;
			import com.momentumsi.c9.models.CloudAccount;
			import com.momentumsi.c9.models.Element;
			import com.momentumsi.c9.utils.Helpers;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.MoveEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;

			[Bindable]
			private var nameS3:String = "";
			[Bindable]
			private var accessControlFinal:String = "";
			[Bindable]
			private var consumptionCost:String = "N/A";
			[Bindable]
			private var aclList:ArrayCollection = new ArrayCollection([{label: "Private", value: "Private"},
																	{label: "Public Read", value: "PublicRead"},
																	{label: "Public Read Write", value: "PublicReadWrite"},
																	{label: "Authenticated Read", value: "AuthenticatedRead"},
																	{label: "Bucket Owner Read", value: "BucketOwnerRead"},
																	{label: "Bucket Owner Full Control", value: "BucketOwnerFullControl"},
																	{label: "Log Delivery Write", value: "LogDeliveryWrite"}]);
			public var s3Object:Object;
			private var currentS3Name:String;
			
			override public function applyConfigurations():void
			{
				bucketName.setFocus();
				
				if(element.id == null)
				{
					return;
				}
				currentS3Name = element.name;
				bucketName.text = currentS3Name;
				s3Object = element.properties;
				try{
					var accessControlValue:String = s3Object['Properties']['AccessControl'];
					if(accessControlValue != null)
					{
						for each(var item:Object in aclList)
						{
							if(item.value == accessControlValue)
							{
								accessControl.selectedIndex = aclList.getItemIndex(item);
								break;
							}
						}
						accessControlCheck.selected = true;						
					}
					var webConfig:Object = s3Object['Properties']['WebsiteConfiguration'];
					if(webConfig != null)
					{
						indexDoc.text = webConfig['IndexDocument'];
						errorDoc.text = webConfig['ErrorDocument'];
						websiteConfigCheck.selected = true;
					}
				}catch(error:Error)
				{
					//Unable to grab configurations
				}
			}
			
			private function getPropertiesObject():Object
			{
				var bucketProperties:Object = new Object();
				
				if(accessControlCheck.selected)
				{
					bucketProperties['AccessControl'] = accessControl.selectedItem.value;
				}
				
				if(websiteConfigCheck.selected)
				{
					bucketProperties['WebsiteConfiguration'] = {};
					bucketProperties['WebsiteConfiguration']['IndexDocument'] = indexDoc.text;
					bucketProperties['WebsiteConfiguration']['ErrorDocument'] = errorDoc.text;
				}
				
				return bucketProperties;
			}
			
			/******************************
			 * User Interaction Event Handlers (e.g. button clicks)
			 * ***************************
			 * */
			
			protected function submitButton_clickHandler(event:MouseEvent):void
			{
				submitButton.enabled = false;
				submitButton.label = "Saving";
		
				if(!objectManagementCreate)
				{							
					var s3Attributes:Object = new Object();
					s3Attributes['Type'] = ResourceType.S3_BUCKET;
					s3Attributes['Properties'] = getPropertiesObject();						
					saveElement(bucketName.text, s3Attributes);
				}else{
					storageService.createBucket(nameS3);
				}
			}			
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				getS3PriceSvc.send();
			}
			
			protected function getS3PriceSvc_resultHandler(event:ResultEvent):void
			{
				setConsumptionCost();
			}
			
			protected function setConsumptionCost():void
			{
				if(cloudAccount.cloud_provider == CloudAccount.AMAZON)
				{
					var found:Boolean = false;
					for each(var price:Object in getS3PriceSvc.result)
					{
						price = price.price;
						if(!found)
						{
							if("s3" == price.name)
							{
								found = true;
								consumptionCost = "$" + (price.effective_price as Number).toFixed(2) + "/" + price.properties.denominator;
							}
						}
					}
					if(!found)
					{
						consumptionCost = "N/A";
					}
				}
			}
			
			protected function previousButton_clickHandler(event:MouseEvent):void
			{
				if(createBucketStack.selectedIndex != 0)
				{
					createBucketStack.selectedIndex--;
				}
			}

			protected function nextButton_clickHandler(event:MouseEvent):void
			{
				var alert:Boolean = false;
				
				if(createBucketStack.selectedChild == configurationContent)
				{
					if(bucketName.text != "")
					{
						if(Helpers.validateAlphanumeric(bucketName.text))
						{
							if(objectManagementCreate)
							{
								nameS3 = bucketName.text;
								nameAlert.visible = false;						
							}else
							{
								if(projectVersion.validateUniqueName(bucketName.text, element))
								{
									nameS3 = bucketName.text;
									nameAlert.visible = false;
								}else
								{
									nameAlert.text = AlertMessage.NOT_UNIQUE;
									nameAlert.visible = true;
									alert = true;
								}
							}
						}else
						{
							nameAlert.text = AlertMessage.NOTALPHANUMERIC;
							nameAlert.visible = true;
							alert = true;
						}
					}else
					{
						nameAlert.text = AlertMessage.INVALID;
						nameAlert.visible = true;
						alert = true;
					}
					
					if(!objectManagementCreate)
					{
						if(accessControlCheck.selected)
						{
							accessControlFinal = accessControl.selectedItem.value;
						}
						
						if(websiteConfigCheck.selected)
						{
							if(indexDoc.text.replace(" ", "") != "")
							{
								indexAlert.visible = false;
							}else
							{
								indexAlert.visible = true;
								alert = true;
							}
							
							if(errorDoc.text.replace(" ", "") != "")
							{
								errorAlert.visible = false;
							}else
							{
								errorAlert.visible = true;
								alert = true;
							}
						}else
						{
							indexAlert.visible = false;
							errorAlert.visible = false;
						}
					}
				}
				
				if(!alert)
				{
					createBucketStack.selectedIndex++;
				}
			}
			
			protected function storageService_createBucketResultHandler(event:CreateBucketResultEvent):void
			{
				if(promptedFromWindow == false)
				{
					Helpers.getObjectManagement(this).refreshResourceList();
				}
				PopUpManager.removePopUp(this);
				dispatchEvent(new CreateBucketResultEvent(event.result));
			}
			
			protected function storageService_createBucketFaultHandler(event:CreateBucketFaultEvent):void
			{
				submitButton.enabled = true;
				submitButton.label = "Create";
				Alert.show("Error creating your storage container.");
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<services:S3Service id="storageService"
							cloudAccountId="{cloudAccount.id}"
							region="{region}"
							createBucketResult="storageService_createBucketResultHandler(event)"
							createBucketFault="storageService_createBucketFaultHandler(event)"/>
		
		<services:CloudApiService id="getS3PriceSvc"
								  serviceType="S3"
								  action="get_s3_price"
								  cloudAccountId="{cloudAccount.id}"
								  region="{region}"
								  result="getS3PriceSvc_resultHandler(event)"/>
		
	</fx:Declarations>
	
	<s:VGroup height="90%" width="100%" gap="0">
		<wizard:WizardWindowTitle id="s3WindowTitle"
								  wizardStack="{createBucketStack}"
								  resourceImage="{ImagePath.NEW_S3}"
								  resourceLabel="{wizardDisplayName}"/>
		<wizard:CookieTrail id="s3CookieTrail"
							wizardStack="{createBucketStack}"
							gap="390"/>
		<mx:ViewStack id="createBucketStack" height="100%" width="100%" paddingTop="10" paddingLeft="20" creationPolicy="all">			
			<s:NavigatorContent id="configurationContent" label="Container Configuration" height="100%" width="100%">
				<s:VGroup height="100%" width="100%">
					<s:Form textAlign="right">
						<s:layout>
							<s:FormLayout gap="-5"/>
						</s:layout>
						<s:FormItem label="Container Name*: ">
							<s:HGroup>
								<s:TextInput id="bucketName" width="200" textAlign="left"/>
								<mx:Text id="nameAlert" text="Invalid input." color="red" visible="false"/>
							</s:HGroup>
						</s:FormItem>
						<s:FormItem label="Access Control: " visible="{!objectManagementCreate}" includeInLayout="{!objectManagementCreate}">
							<s:VGroup>
								<s:CheckBox id="accessControlCheck" label="Enabled" selected="false"/>
								<mx:ComboBox id="accessControl" dataProvider="{aclList}" enabled="{accessControlCheck.selected}" textAlign="left"/>
							</s:VGroup>		
						</s:FormItem>
						<s:FormItem label="Website Configuration: " visible="{!objectManagementCreate}" includeInLayout="{!objectManagementCreate}">
							<s:VGroup>
								<s:CheckBox id="websiteConfigCheck" label="Enabled" selected="false"/>
								<s:HGroup enabled="{websiteConfigCheck.selected}">
									<mx:Text text="Index Document: " width="120"/>
									<s:TextInput id="indexDoc" textAlign="left"/>
									<mx:Text id="indexAlert" text="Invalid input." color="red" visible="false"/>
								</s:HGroup>
								<s:HGroup enabled="{websiteConfigCheck.selected}">
									<mx:Text text="Error Document: " width="120"/>
									<s:TextInput id="errorDoc" textAlign="left"/>
									<mx:Text id="errorAlert" text="Invalid input." color="red" visible="false"/>
								</s:HGroup>
							</s:VGroup>
						</s:FormItem>
						<s:FormItem visible="{cloudAccount.cloud_provider == CloudAccount.AMAZON}" includeInLayout="{cloudAccount.cloud_provider == CloudAccount.AMAZON}">
							<mx:Text text="Cost: {consumptionCost}"/>
						</s:FormItem>
					</s:Form>
				</s:VGroup>				
			</s:NavigatorContent>
			<s:NavigatorContent id="reviewContent" label="Review" height="100%" width="100%">
				<s:VGroup>
					<mx:Text text="Please Review Your Container" y="20" fontWeight="bold"/>
					<s:VGroup x="25" y="60" paddingLeft="20">
						<mx:Text text="Name: {bucketName.text}"/>
						<mx:Text text="Access Control: {accessControl.selectedLabel}" visible="{accessControlCheck.selected}" includeInLayout="{accessControlCheck.selected}"/>
						<s:HGroup visible="{websiteConfigCheck.selected}" includeInLayout="{websiteConfigCheck.selected}">
							<mx:Text text="Website Configuration: "/>
							<s:VGroup>
								<mx:Text text="Index Document: {indexDoc.text}"/>
								<mx:Text text="Error Document: {errorDoc.text}"/>
							</s:VGroup>
						</s:HGroup>
					</s:VGroup>
					<mx:Text text="Cost: {consumptionCost}" y="20" fontWeight="bold" visible="{cloudAccount.cloud_provider == CloudAccount.AMAZON}" includeInLayout="{cloudAccount.cloud_provider == CloudAccount.AMAZON}"/>
				</s:VGroup>
			</s:NavigatorContent>
		</mx:ViewStack>
	</s:VGroup>
	<s:Button id="previousButton" label="Previous" x="10" y="436" click="previousButton_clickHandler(event)" enabled="{createBucketStack.selectedIndex != 0}"/>
	<s:Button id="nextButton" label="Next" x="92" y="436" click="nextButton_clickHandler(event)" enabled="{createBucketStack.selectedChild != reviewContent}"/>	
	<s:Button id="submitButton" label="Finish" x="169" y="436" click="submitButton_clickHandler(event)" enabled="{createBucketStack.selectedChild == reviewContent}"/>	
	<s:Button id="cancelButton" label="Cancel" x="619" y="436" click="{PopUpManager.removePopUp(this)}"/>
</wizard:WizardWindow>
