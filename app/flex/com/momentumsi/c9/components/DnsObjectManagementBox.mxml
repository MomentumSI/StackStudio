<?xml version="1.0" encoding="utf-8"?>
<c9:ObjectManagementDetailsBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
							   xmlns:s="library://ns.adobe.com/flex/spark" 
							   xmlns:mx="library://ns.adobe.com/flex/mx"
							   xmlns:c9="com.momentumsi.c9.components.*" xmlns:services="com.momentumsi.c9.services.*">
	
	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.components.dns.DnsCreateRecordSetPopUp;
			import com.momentumsi.c9.models.CloudAccount;
			import com.momentumsi.c9.representers.HostedZoneRepresenter;
			import com.momentumsi.c9.services.CloudApiService;
			import com.momentumsi.c9.utils.Helpers;
			
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.events.IndexChangedEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.GridSelectionEvent;
			
			[Bindable]
			private var dnsData:HostedZoneRepresenter;
			[Bindable]
			private var recordsCollection:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var deleteRecordEnabled:Boolean = false;
			
			override public function set resourceData(value:Object):void
			{
				dnsData = new HostedZoneRepresenter(value);
				super.resourceData = dnsData;
				dnsDetails.selectedIndex = 0;
				getRecordSets();
			}
			
			protected function deleteHostedZone_clickHandler(event:MouseEvent):void
			{
				var destroyPopUp:DestroyResourceObjectManagement = DestroyResourceObjectManagement(PopUpManager.createPopUp(UIComponent(this.parentApplication), DestroyResourceObjectManagement, true));
				destroyPopUp.cloudAccountId = cloudAccount.id;
				destroyPopUp.region = region;
				destroyPopUp.resourceType = "hostedZone";
				destroyPopUp.resourceDisplayId = dnsData.name;
				destroyPopUp.resourceId = dnsData.id;
			}
			
			public function getRecordSets():void
			{
				recordSetViewStack.selectedChild = loading;
				getRecordSetsSvc.send({zone_id: dnsData.id});
			}
			
			protected function getRecordSets_resultHandler(event:ResultEvent):void
			{
				recordsCollection.removeAll();
				for each(var record:Object in getRecordSetsSvc.result)
				{
					var valueString:String = (record.ResourceRecords as Array).join('\n');
					recordsCollection.addItem({name: record.Name, type: record.Type, value: valueString, ttl: record.TTL, zone_id: dnsData.id});
				}
				
				recordSetViewStack.selectedChild = recordSets;
			}
			
			protected function getRecordSets_faultHandler(event:FaultEvent):void
			{
				recordsCollection = new ArrayCollection();
				recordSetViewStack.selectedChild = recordSets;
			}
			
			protected function deleteRecordSet_clickHandler(event:MouseEvent):void
			{
				if(deleteRecordEnabled && recordsDataGrid.selectedIndex != -1)
				{
					var destroyPopUp:DestroyResourceObjectManagement = DestroyResourceObjectManagement(PopUpManager.createPopUp(UIComponent(this.parentApplication), DestroyResourceObjectManagement, true));
					destroyPopUp.cloudAccountId = cloudAccount.id;
					destroyPopUp.region = region;
					destroyPopUp.resourceType = "recordSet";
					destroyPopUp.resourceDisplayId = recordsDataGrid.selectedItem.name;
					destroyPopUp.resourceObject = recordsDataGrid.selectedItem;
					destroyPopUp.refreshObjectManagement = false;
					destroyPopUp.addEventListener("destroyComplete", refreshRecordSetSvc);
				}
			}
			
			protected function refreshRecordSetSvc(event:ResultEvent):void
			{
				getRecordSets();
			}
			
			protected function faultHandler(event:FaultEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function recordsDataGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				if(recordsDataGrid.selectedItem.name == dnsData.name && (recordsDataGrid.selectedItem.type == "NS" || recordsDataGrid.selectedItem.type == "SOA"))
				{
					deleteRecordEnabled = false;
				}else
				{
					deleteRecordEnabled = true;
				}
			}
			
			protected function createRecordSet_clickHandler(event:MouseEvent):void
			{
				var createRecordSetWizard:DnsCreateRecordSetPopUp = DnsCreateRecordSetPopUp(PopUpManager.createPopUp(UIComponent(this.parentApplication), DnsCreateRecordSetPopUp, true));
			 	createRecordSetWizard.cloudAccount = cloudAccount;
				createRecordSetWizard.region = region;
				createRecordSetWizard.domainName = dnsData.name;
				createRecordSetWizard.zoneId = dnsData.id;
				createRecordSetWizard.addEventListener("complete", refreshRecordSetSvc);
			}
			
			protected function editRecordSet_clickHandler(event:MouseEvent):void
			{
				if(recordsDataGrid.selectedItem != -1)
				{
					var editRecordSetWizard:DnsCreateRecordSetPopUp = DnsCreateRecordSetPopUp(PopUpManager.createPopUp(UIComponent(this.parentApplication), DnsCreateRecordSetPopUp, true));
					editRecordSetWizard.cloudAccount = cloudAccount;
					editRecordSetWizard.region = region;
					editRecordSetWizard.configure = true;
					editRecordSetWizard.previousRecord = recordsDataGrid.selectedItem;
					editRecordSetWizard.domainName = dnsData.name;
					editRecordSetWizard.zoneId = dnsData.id;
					editRecordSetWizard.addEventListener("complete", refreshRecordSetSvc);
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<services:CloudApiService id="getRecordSetsSvc"
								  cloudAccountId="{cloudAccount.id}"
								  region="{region}"
								  action="list_resource_record_sets"
								  serviceType="{CloudApiService.DNS_SERVICE}"
								  result="getRecordSets_resultHandler(event)"
								  fault="getRecordSets_faultHandler(event)"/>
	</fx:Declarations>	
	<s:HGroup paddingLeft="10" gap="20">
		<c9:TextButton id="deleteHostedZone"
					   text="Delete Hosted Zone"
					   click="deleteHostedZone_clickHandler(event)"/>
		<c9:TextButton id="createRecordSet"
					   text="Create Record Set"
					   click="createRecordSet_clickHandler(event)"/>
		<c9:TextButton id="editRecordSet"
					   text="Edit Record Set"
					   click="editRecordSet_clickHandler(event)"
					   enabled="{recordsDataGrid.selectedIndex != -1}"/>
		<c9:TextButton id="deleteRecordSet"
					   text="Delete Record Set"
					   click="deleteRecordSet_clickHandler(event)"
					   enabled="{deleteRecordEnabled}"/>
		
	</s:HGroup>
	<s:BorderContainer height="100%" width="100%" alpha="1" borderVisible="false">
		<mx:TabNavigator id="dnsDetails" width="100%" height="100%">
			<s:NavigatorContent label="Details" width="100%" height="100%">
				<s:BorderContainer borderVisible="false"  id="details" height="100%" width="100%">
					<s:Scroller width="100%" height="100%">
						<s:viewport>
							<s:HGroup>
								<s:Form>
									<s:layout>
										<s:FormLayout gap="-7"/>
									</s:layout>
									<s:FormItem label="Name:">
										<mx:Text text="{dnsData.name}"/>
									</s:FormItem>
									<s:FormItem label="Id:">
										<mx:Text text="{dnsData.id}"/>
									</s:FormItem>
									<s:FormItem label="Caller Reference:">
										<mx:Text text="{dnsData.callerReference}"/>
									</s:FormItem>
									<s:FormItem label="Comment:">
										<mx:Text text="{dnsData.comment}"/>
									</s:FormItem>
								</s:Form>
							</s:HGroup>
						</s:viewport>
					</s:Scroller>
				</s:BorderContainer>
			</s:NavigatorContent>
			<s:NavigatorContent id="recordSetDetails" label="Record Sets" width="100%" height="100%">
				<mx:ViewStack id="recordSetViewStack" width="100%" height="100%">
					<s:NavigatorContent id="loading" width="100%" height="100%">
						<s:BusyIndicator width="50" height="50"/>
					</s:NavigatorContent>
					<s:NavigatorContent id="recordSets" width="100%" height="100%">
						<s:VGroup width="100%" height="100%" paddingLeft="10" paddingRight="10">
							<s:DataGrid id="recordsDataGrid" width="100%" height="100%" dataProvider="{recordsCollection}" selectionMode="singleRow" variableRowHeight="true" selectionChange="recordsDataGrid_selectionChangeHandler(event)">
								<s:columns>
									<s:ArrayList id="recordGridColumns">
										<s:GridColumn headerText="Name" dataField="name"/>
										<s:GridColumn headerText="Type" dataField="type"/>
										<s:GridColumn headerText="Value" dataField="value"/>
										<s:GridColumn headerText="TTL" dataField="ttl"/>
									</s:ArrayList>
								</s:columns>
							</s:DataGrid>
						</s:VGroup>
					</s:NavigatorContent>
				</mx:ViewStack>
			</s:NavigatorContent>
		</mx:TabNavigator>
	</s:BorderContainer>
</c9:ObjectManagementDetailsBox>