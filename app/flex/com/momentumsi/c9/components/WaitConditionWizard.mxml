<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:diagrammer="fr.kapit.diagrammer.base.uicomponent.*"
		 title="Wait Condition Wizard"
		 move="Helpers.doMove(this)"
		 close="closeHandler()"
		 creationComplete="creationCompleteHandler(event)"
		 width="550" height="250">
	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.utils.Helpers;
			import com.momentumsi.c9.models.Node;
			
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.managers.PopUpManager;
			
			[Bindable]
			public var waitConditionData:Node;
			
			protected function closeHandler():void
			{
				PopUpManager.removePopUp(this);
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				PopUpManager.centerPopUp(this);
				
				if(waitConditionData != null)
				{
					resourceName.text = waitConditionData.name;
					timeout.text = waitConditionData.properties["Properties"]["Timeout"];
					if(waitConditionData.properties["Properties"]["Count"] != null)
					{
						count.text = waitConditionData.properties["Properties"]["Count"];
					}
				}
			}
			
			protected function submitButton_clickHandler(event:MouseEvent):void
			{
				var alert:Boolean = false;
				
				if(resourceName.text.replace(" ", "") != "")
				{
					resourceNameAlert.visible = false;	
				}else
				{
					resourceNameAlert.visible = true;
					alert = true;
				}
				
				try
				{
					if(timeout.text.replace(" ", "") != "")
					{
						var timeoutInt:int = parseInt(timeout.text);
						if(timeoutInt >= 0)
						{
							timeoutAlert.visible = false;
						}
					}else
					{
						timeoutAlert.visible = true;
						alert = true;
					}
				}catch(e:Error)
				{
					timeoutAlert.visible = true;
					alert = true;
				}
				
				var countInt:int = 0;
				if(count.text.replace(" ", "") != "")
				{
					try
					{
						countInt = parseInt(count.text);
						if(countInt > 0)
						{
							countAlert.visible = false;
						}else
						{
							countAlert.visible = true;
							alert = true;
						}
					}catch(e:Error)
					{
						countAlert.visible = true;
						alert = true;
					}
				}
				
				if(!alert)
				{
					waitConditionData.name = resourceName.text;
					if(countInt == 0)
					{
						waitConditionData.properties["Properties"] = {Timeout: timeoutInt, Handle: {Ref: resourceName.text + "Handle"}};
						/*
						node.data = <Wait>
										<name>{resourceName.text}</name>
										<timeout>{timeoutInt}</timeout>
										<handleName>{resourceName.text}Handle</handleName>
									</Wait>;
						*/
					}else
					{
						waitConditionData.properties["Properties"] = {Timeout: timeoutInt, Handle: {Ref: resourceName.text + "Handle"}, Count: countInt};
					}
					node.data = waitConditionData;
					PopUpManager.removePopUp(this);
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<diagrammer:DiagramSprite id="node"/>
	</fx:Declarations>
	
	<s:VGroup>
		<s:Form textAlign="right">
			<s:FormItem label="Resource Name*: ">
				<s:HGroup>
					<s:TextInput id="resourceName" textAlign="left"/>
					<mx:Text text="(e.g. &quot;MyWaitCondition&quot;)"/>
					<mx:Text id="resourceNameAlert" text="Invalid Input." color="red" visible="false"/>
				</s:HGroup>	
			</s:FormItem>
			<s:FormItem label="Timeout*: ">
				<s:HGroup>
					<s:TextInput id="timeout" textAlign="left"/>
					<mx:Text text="Seconds"/>
					<mx:Text id="timeoutAlert" text="Invalid Input." color="red" visible="false"/>
				</s:HGroup>
			</s:FormItem>
			<s:FormItem label="Count: ">
				<s:TextInput id="count" textAlign="left" widthInChars="4"/>
				<mx:Text id="countAlert" text="Invalid Input." color="red" visible="false"/>
			</s:FormItem>
		</s:Form>
	</s:VGroup>
	<s:Button id="submitButton" x="201" y="186" label="Save" click="submitButton_clickHandler(event)"/>
	<s:Button id="cancelButton" x="278" y="186" label="Cancel" click="closeHandler();"/>
</s:TitleWindow>
