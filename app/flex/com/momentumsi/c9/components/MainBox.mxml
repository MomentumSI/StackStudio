<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:c9="com.momentumsi.c9.components.*"
		  xmlns:containers="com.momentumsi.c9.containers.*"
		  xmlns:constants="com.momentumsi.c9.constants.*"
		  xmlns:local="*"
		  width="100%" height="100%" 
		  alpha="1"
		  creationComplete="hgroup1_creationCompleteHandler(event)"
		  initialize="initializeWorkspace()">

	<fx:Script>
		<![CDATA[
			import com.maccherone.json.JSON;
			import com.maccherone.json.JSONParseError;
			import com.momentumsi.c9.components.*;
			import com.momentumsi.c9.components.wizard.FreezeVersion;
			import com.momentumsi.c9.constants.AlertMessage;
			import com.momentumsi.c9.constants.Color;
			import com.momentumsi.c9.constants.PermissionType;
			import com.momentumsi.c9.constants.ResourceType;
			import com.momentumsi.c9.events.DeletionPolicyUpdateEvent;
			import com.momentumsi.c9.events.ProjectEvent;
			import com.momentumsi.c9.events.project.FreezeVersionResultEvent;
			import com.momentumsi.c9.events.project.PromoteEnvironmentFaultEvent;
			import com.momentumsi.c9.events.project.PromoteEnvironmentResultEvent;
			import com.momentumsi.c9.models.*;
			import com.momentumsi.c9.services.ProjectService;
			import com.momentumsi.c9.utils.Helpers;
			
			import flash.display.*;
			import flash.events.*;
			
			import fr.kapit.diagrammer.base.uicomponent.DiagramSprite;
			
			import mx.collections.*;
			import mx.containers.Canvas;
			import mx.controls.*;
			import mx.core.*;
			import mx.events.*;
			import mx.managers.*;
			import mx.rpc.events.*;
			import mx.utils.ObjectUtil;
			
			import spark.components.*;
			import spark.events.IndexChangeEvent;
			import spark.skins.spark.TabBarSkin;

			[Bindable]
			public var user:User;
			[Bindable]
			public var project:Project;			
			[Bindable]
			private var runViewVisted:int = 0;	
			[Bindable]
			public var enableWorkspaceChanges:Boolean = false;
			[Bindable]
			public var projectVersion:ProjectVersion;
			
			public function initializeWorkspace():void
			{
				project.addEventListener(ProjectEvent.VERSION_SET, getProjectVersion_resultHandler);
				project.addEventListener(ProjectEvent.PROVISIONED_VERSION_SET, getProvisionedVersion_resultHandler);
			}
			
			public function setComponentsVisible(visible:Boolean):void
			{
				console.visible = visible;
				tabbedWorkspaces.visible = visible;
			}
			
			
			//--------------------------------------------------------------
			// Drag and drop management
			//--------------------------------------------------------------
			
			public function enterArch(event:DragEvent):void
			{
				
				if (event.dragSource.hasFormat("treeItems"))
				{
					DragManager.showFeedback(DragManager.COPY);
					DragManager.acceptDragDrop(designView);
				}
			}
			
			
			public function architectureDragDropHandler(event:DragEvent):void
			{
				if(event.dragSource.hasFormat("treeItems"))
				{
					var itemsArray:Array = event.dragSource.dataForFormat("treeItems") as Array;
					
					if(itemsArray[0].hasOwnProperty("enabled"))
					{
						DragManager.showFeedback(DragManager.NONE);
						event.stopImmediatePropagation();
						return;
					}
					var cloudObject:*;
					event.preventDefault();
					DragManager.showFeedback(DragManager.COPY);
					var dropTarget:Architecture = Architecture(event.currentTarget);
					
					var newDiagramNode:DiagramSprite;
					var node:Node = itemsArray[0];
					cloudObject = ObjectUtil.copy(node as Object);
					cloudObject = Node.buildNode(cloudObject, node.projectId);
					//cloudObject = node.copy();
					newDiagramNode = DiagramSprite(designView.vis.addNodeElement(cloudObject, null, null, new Point(event.localX, event.localY)));
					newDiagramNode.isSizeFixed = true;
					if(node.properties.Type == ResourceType.CHEF_ROLE)
					{
						newDiagramNode.addEventListener(MouseEvent.DOUBLE_CLICK, installNode_doubleClickHandler);
					}
				}
			}
			
			private function getProjectVersion_resultHandler(event:ProjectEvent):void
			{
				project.removeEventListener(ProjectEvent.VERSION_SET, getProjectVersion_resultHandler);
				projectVersion = project.currentVersion;
				jsonViewer.projectVersion = projectVersion;
				projectVersion.dispatchEvent(new Event(ProjectVersion.REFRESH));
			}
			
			
			private function getProvisionedVersion_resultHandler(event:ProjectEvent):void
			{
				if(runningView != null)
				{
					runningView.provisionedVersion = project.currentProvisionedVersion;
					workspaceChanger.enabled = true;
				}
			}
			
			private function updateService_faultHandler(event:FaultEvent):void
			{
				//Alert.show("Unable to connect to server and update objects at this time.");
			}
			
			private function activateLinkMode():void 
			{
				if(project.userHasPermission(user.id, PermissionType.EDIT_SOURCE, workspaceChanger.selectedEnvironment))
				{
					if(linkModeToggleButton.selected)
					{
						addEventListener(KeyboardEvent.KEY_UP, escKeyForLinkToggleHandler);
					}else
					{
						removeEventListener(KeyboardEvent.KEY_UP, escKeyForLinkToggleHandler);
					}
					designView.link_clickHandler(linkModeToggleButton.selected);
				}else
				{
					linkModeToggleButton.selected = false;
					Alert.show(AlertMessage.PERMISSION_DENIED);
				}
			}
			
			private function escKeyForLinkToggleHandler(event:KeyboardEvent):void
			{
				if(event.keyCode == Keyboard.ESCAPE)
				{
					linkModeToggleButton.selected = false;
				}
			}
			
			private function groupSelectedNodes():void
			{
				//this.designView.groupSelectedNodes();
			}
			
			private function ungroupSelectedNodes():void
			{
				//this.designView.ungroupSelectedNodes();
			}
			
			private function promoteWorkspace():void
			{
				if(project.userHasPermission(user.id, PermissionType.CREATE_STACK, workspaceChanger.selectedEnvironment))
				{
					var elementsToProvision:int = 0;
					for each(var obj:DiagramSprite in designView.vis.nodesMap)
					{
						if(Node(obj.data).elementId == null)
						{
							if(!(Node(obj.data).name == 'New Text' || Node(obj.data).name == 'User' || Node(obj.data).name == 'Users' || Node(obj.data).name == 'Client' || Node(obj.data).name == 'Mobile Client' || Node(obj.data).name == 'Internet'))
							{
								Alert.show(AlertMessage.CONFIGURE_OBJECTS);
								return;
							}
						}
						if(Node(obj.data).name != 'New Text' && Node(obj.data).name != 'text')
						{
							elementsToProvision++;
							break;
						}
					}
					if(elementsToProvision > 0)
					{
						var parametersForm:ParameterInputForm = new ParameterInputForm();
						parametersForm.templateParameters = jsonViewer.parametersGrid.templateParameters;
	
						var provisionManager:ProjectProvisionPopUp = new ProjectProvisionPopUp();
						provisionManager.user = user;
						provisionManager.project = project;
						provisionManager.template = jsonViewer.templateDisplay.text;
						provisionManager.version = workspaceChanger.selectedVersion;
						provisionManager.environment = workspaceChanger.selectedEnvironment;
						PopUpManager.addPopUp(provisionManager, UIComponent(parentApplication), true);
						provisionManager.templateInputs.parametersInputForm = parametersForm;
						provisionManager.templateInputs.addForm();
						project.addEventListener(ProvisionedVersion.INSTANCES_UPDATED, updatedProvisionedInstances);
						//}
					}
				}else
				{
					Alert.show(AlertMessage.PERMISSION_DENIED);
				}
			}
			
			private function updatedProvisionedInstances(event:Event):void
			{
				runningView.provisionedVersion = project.currentProvisionedVersion;
				tabbedWorkspaces.selectedIndex = 1;
				workspaceChanger.refreshVersions();
			}
			
			private function installNode_doubleClickHandler(event:MouseEvent):void
			{
				if(event.target is spark.components.Button || event.target is TabBarSkin)
				{
					event.preventDefault();
					event.stopImmediatePropagation();
				}
			}

			//Button is currently commented out and out of scope
			protected function copyButton_clickHandler(event:MouseEvent):void
			{
				designView.copyNode();
			}
			
			/* private function addWaitConditions():void
			{	
				if(project.userHasPermission(user.id, PermissionType.EDIT_SOURCE, workspaceChanger.selectedEnvironment))
				{
					var deployProcess:DeployDiagram = new DeployDiagram();
					deployProcess.projectVersion = projectVersion;
					PopUpManager.addPopUp(deployProcess, UIComponent(parentApplication), true);
				}else
				{
					Alert.show(AlertMessage.PERMISSION_DENIED);
				}
			}
 */			
			protected function deletionPolicy_clickHandler():void
			{
				if(project.userHasPermission(user.id, PermissionType.EDIT_SOURCE, PermissionType.DEVELOPMENT))
				{
					var deletePolicyWizard:DeletePolicyWizard = new DeletePolicyWizard();
					deletePolicyWizard.projectVersion = project.currentVersion;
					deletePolicyWizard.addEventListener(DeletionPolicyUpdateEvent.POLICY_UPDATE, updatedPolicies);
					PopUpManager.addPopUp(deletePolicyWizard, UIComponent(parentApplication), true);
				}else
				{
					Alert.show(AlertMessage.PERMISSION_DENIED);
				}
			}
			
			private function updatedPolicies(event:DeletionPolicyUpdateEvent):void
			{
				var oldElement:Element
				var index:int;
				for each(var element:Element in event.elements)
				{
					oldElement = projectVersion.getElementByName(element.name);
					index = projectVersion.elements.getItemIndex(oldElement);
					projectVersion.elements.setItemAt(element, index);
				}
				//projectVersion.elements.dispatchEvent(new CollectionEvent(CollectionEvent.COLLECTION_CHANGE));			
			}
				
			
			protected function incrementVersion_clickHandler(event:Event):void
			{ 
				if(project.userHasPermission(user.id, PermissionType.EDIT_SOURCE, PermissionType.DEVELOPMENT))
				{
					var versionWindow:FreezeVersion = new FreezeVersion();
					versionWindow.project = project;
					versionWindow.addEventListener(FreezeVersionResultEvent.RESULT, versionUpdated);
					PopUpManager.addPopUp(versionWindow, UIComponent(parentApplication), true);
				}else
				{
					Alert.show(AlertMessage.PERMISSION_DENIED);
				}
			}
			
			private function versionUpdated(event:ResultEvent):void
			{
				if(event is FreezeVersionResultEvent)
				{
					workspaceChanger.selectedVersion = (event as FreezeVersionResultEvent).newVersion; 
				}else if(event is PromoteEnvironmentResultEvent)
				{
					workspaceChanger.selectedVersion = workspaceChanger.promoteVersion;
					workspaceChanger.selectedEnvironment = workspaceChanger.promoteEnvironment;
				}
				workspaceChanger.versionsCollection = project.versions;
				workspaceChanger.refreshVersions();
			}
			
			private function projectVersionsList_labelFunction(version:Object):String
			{
				if(version.number != null)
				{
					return version.number;
				}else{
					version = version.version
					return version.number;
				}
			}
			
			protected function workspaceVersionSet_eventHandler(event:Event):void
			{
				switch(workspaceChanger.selectedEnvironment)
				{
					case Environment.DEVELOPMENT:
						designView.environmentColor = 0xCD0000;
						break;
					case Environment.TEST:
						designView.environmentColor = 0xFFFF00;
						break;
					case Environment.STAGING:
						designView.environmentColor = 0x0000FF;
						break;
					case Environment.PRODUCTION:
						designView.environmentColor = 0x008B00;
						break;
					default:
						designView.environmentColor = 0xFFFFFF;
						break;
				}
				
				var selectedVersion:String = workspaceChanger.selectedVersion;
				var selectedEnvironment:String = workspaceChanger.selectedEnvironment;
				project.addEventListener(ProjectEvent.VERSION_SET, getProjectVersion_resultHandler);
				project.getProjectVersion(selectedVersion, selectedEnvironment);
				runningView.setLoadingDisplayContent();
				eventFeed.setLoadingDisplay();
				workspaceChanger.enabled = false;
			}
			
			protected function workspaceChanger_promoteEnvironmentHandler(event:Event):void	
			{
				if(project.userHasPermission(user.id, PermissionType.PROMOTE_ENVIRONMENT, workspaceChanger.selectedEnvironment))
				{
					var promoteEnvWindow:PromoteEnvironmentWindow = new PromoteEnvironmentWindow();
					promoteEnvWindow.currentEnvironment = workspaceChanger.currentEnvironment;
					promoteEnvWindow.newEnvironment = workspaceChanger.promoteEnvironment;
					promoteEnvWindow.version = workspaceChanger.promoteVersion;
					promoteEnvWindow.project = project;
					promoteEnvWindow.addEventListener(CloseEvent.CLOSE, promoteEnv_closeHandler);
					project.addEventListener(PromoteEnvironmentResultEvent.RESULT, versionUpdated);
					PopUpManager.addPopUp(promoteEnvWindow, UIComponent(parentApplication), true);
					
				}else
				{
					Alert.show(AlertMessage.PERMISSION_DENIED);
				}
			}
			
			private function promoteEnv_closeHandler(event:CloseEvent):void
			{
				var window:PromoteEnvironmentWindow = event.currentTarget as PromoteEnvironmentWindow;
				project.removeEventListener(PromoteEnvironmentResultEvent.RESULT, versionUpdated);
				PopUpManager.removePopUp(window);
			}
			
			protected function designView_creationCompleteHandler(event:FlexEvent):void
			{
				if(project.userHasPermission(user.id, PermissionType.EDIT_SOURCE, workspaceChanger.selectedEnvironment))
				{
					designView.enabled = true;
				}else
				{
					designView.enabled = false;
				}
			}
			
			protected function hgroup1_creationCompleteHandler(event:FlexEvent):void
			{
				if(project.region == null)
				{
					accountLabel.text = project.cloud_account.name;
				}else{
					accountLabel.text = project.cloud_account.name + "::" + project.region;
				}
			}
			
		]]>
	</fx:Script>

	<fx:Declarations>

	</fx:Declarations>	
		<s:VGroup id="console" visible="true" width="100%" height="100%" alpha="1" color="{Color.BLACK}">
			<s:BorderContainer width="100%" height="100%" borderVisible="false">
				<s:backgroundFill>
					<s:SolidColor>
						<s:color>{Color.WHITE}</s:color>
					</s:SolidColor>
				</s:backgroundFill>
				<s:VGroup width="100%" height="100%">
					<mx:HDividedBox id="menuDiagramDivider" width="100%" height="100%">
						<s:HGroup width="100%" height="100%">
							<s:Scroller width="100%" height="100%">
								<s:VGroup width="75%" height="100%">
									<mx:HDividedBox width="100%" height="100%">
										<mx:TabNavigator id="tabbedWorkspaces" 
														 visible="true"
														 width="100%" height="100%" 
														 creationPolicy="auto"
														 selectedIndex="0">
											<mx:Canvas id="designViewCanvas" bottom="10" width="100%"
													   height="100%" label="Design Time">
												<s:HGroup height="100%" width="100%">
													<c9:CloudObjectsMenu id="leftMenu"
																		 height="100%"
																		 width="25%"
																		 enabled="{project.project_id != null}"
																		 project="{project}" user="{user}"/>
													<mx:VDividedBox id="designCanvasDivider" width="100%" height="100%"
																	backgroundColor="{Color.PURPLE}">
														<s:Group width="100%" height="60%">
															<s:Rect width="100%" height="100%">
																<s:fill>
																	<s:SolidColor color="white"/>
																</s:fill>
															</s:Rect>
															<s:VGroup width="100%" height="100%">
																<s:BorderContainer width="100%" height="30"
																				   borderVisible="false">
																	<s:backgroundFill>
																		<s:SolidColor>
																			<s:color>{Color.PURPLE}</s:color>
																		</s:SolidColor>
																	</s:backgroundFill>
																	<s:NavigatorContent width="100%"
																						height="100%">
																		<s:HGroup z="1" width="100%"
																				  height="100%" alpha="1"
																				  gap="45" paddingLeft="14"
																				  paddingTop="7">
																			<mx:LinkButton width="16"
																						   height="16"
																						   click="promoteWorkspace()"
																						   enabled="{!parentApplication.headerBox.readOnly}"
																						   icon="@Embed(source='../assets/IconPNGs/16Provision.png')"
																						   overIcon="@Embed(source='../assets/IconPNGs/16ProvisionDisabled.png')"
																						   skin="{null}"
																						   toolTip="Provision the current environment. Instances are copied from the current environment to the next environment."/>
																			<mx:LinkButton id="linkModeToggleButton"
																						   width="16"
																						   height="16"
																						   visible="false"
																						   includeInLayout="false"
																						   click="activateLinkMode()"
																						   enabled="{enableWorkspaceChanges}"
																						   icon="@Embed(source='../assets/IconPNGs/16Link.png')"
																						   overIcon="@Embed(source='../assets/IconPNGs/16LinkDisabled.png')"
																						   downIcon="@Embed(source='../assets/IconPNGs/16LinkDisabled.png')"
																						   selectedOverIcon="@Embed(source='../assets/IconPNGs/16LinkDisabled.png')"
																						   selectedUpIcon="@Embed(source='../assets/IconPNGs/16LinkDisabled.png')"
																						   selectedDownIcon="@Embed(source='../assets/IconPNGs/16LinkDisabled.png')"
																						   skin="{null}"
																						   toggle="true"
																						   toolTip="Link cloud objects together to associate them with one another"/>
																			<mx:LinkButton width="16"
																						   height="16"
																						   click="deletionPolicy_clickHandler()"
																						   enabled="{enableWorkspaceChanges}"
																						   icon="@Embed(source='../assets/IconPNGs/DeletionPolicyWizard.png')"
																						   overIcon="@Embed(source='../assets/IconPNGs/DeletionPolicyWizard_Disabled.png')"
																						   skin="{null}"
																						   toolTip="Open delete policy wizard to determine how to handle resources on stack deletion."/>
																		</s:HGroup>
																	</s:NavigatorContent>
																</s:BorderContainer>
																<s:HGroup id="versionLabelHG"
																		  width="100%"
																		  verticalAlign="middle"
																		  paddingRight="5" paddingLeft="5"
																		  fontSize="14" fontWeight="bold">
																	<s:HGroup width="50%"
																			  horizontalAlign="left"
																			  verticalAlign="middle">
																		<s:Image id="accountImage"
																				 source="{project.cloud_account.icon}"
																				 smoothingQuality="high"
																				 smooth="true"
																				 height="21" width="21"/>
																		<s:Label id="accountLabel"/>
																	</s:HGroup>
																	<s:HGroup width="50%"
																			  horizontalAlign="right"
																			  verticalAlign="middle">
																		<s:Label id="versionLabel"
																				 text="{workspaceChanger.selectedEnvironment}::{workspaceChanger.selectedVersion.toUpperCase()}"/>
																	</s:HGroup>
																</s:HGroup>
																<c9:Architecture id="designView" width="100%"
																				 height="100%"
																				 mainBox="{this}"
																				 project="@{project}"
																				 environment="{workspaceChanger.selectedEnvironment}"
																				 projectVersion="@{projectVersion}"
																				 dragDrop="architectureDragDropHandler(event)"
																				 dragEnter="enterArch(event)"
																				 user="{user}"
																				 creationComplete="designView_creationCompleteHandler(event)"/>
															</s:VGroup>
														</s:Group>
														<mx:Canvas id="templateContent" width="100%" height="40%"
																   backgroundColor="{Color.PURPLE}" color="{Color.WHITE}">
															<c9:JSONViewer id="jsonViewer"
																		   width="100%" height="100%"
																		   user="{this.user}"
																		   paddingTop="6"
																		   environment="{workspaceChanger.selectedEnvironment}"
																		   project="{project}"/>
														</mx:Canvas>
													</mx:VDividedBox>
													<containers:Drawer id="rightSideControlsDrawer"
																	   skinClass="com.momentumsi.c9.skins.SideDrawerSkin"
																	   height="100%">
														<mx:VDividedBox width="100%" height="100%">
															<s:Panel id="workspaceChangerPanel"
																	 title="Environments"
																	 height="60%" width="100%"
																	 skinClass="com.momentumsi.c9.skins.WidgetSkin">
																<c9:WorkspaceChanger id="workspaceChanger"
																					 height="100%"
																					 workspaceVersionSet="workspaceVersionSet_eventHandler(event)"
																					 versionsCollection="{project.versions}" 
																					 provisionedVersions="{project.provisionedVersions}"
																					 addVersion="incrementVersion_clickHandler(event)"
																					 promoteEnvironment="workspaceChanger_promoteEnvironmentHandler(event)"/>
															</s:Panel>
															<s:Panel id="costWidgetPanel"
																	 title="Cost Estimation"
																	 width="100%" height="40%"
																	 skinClass="com.momentumsi.c9.skins.WidgetSkin">
																<c9:CostWidget id="costWidget" width="100%" height="100%"
																			   cloudAccount="{project.cloud_account}"
																			   projectVersion="{projectVersion}"/>
															</s:Panel>
														</mx:VDividedBox>
													</containers:Drawer>
												</s:HGroup>
											</mx:Canvas>
											<mx:Canvas id="coordinationView"
													   width="100%" height="100%"
													   label="Coordination">
												<c9:DeployDiagram id="deployDiagram"
																  projectVersion="{projectVersion}"
																  height="100%" width="100%"/>
											</mx:Canvas>
											<mx:Canvas id="runTimeView" width="100%" height="100%"
													   label="Run Time"
													   enabled="{!parentApplication.headerBox.readOnly}">
												<s:HGroup height="100%" width="100%">
													<c9:LeftSideEventFeed id="eventFeed" width="40%"
																		  height="100%"
																		  cloudAccountId="{project.cloud_account.id}"
																		  mainBox="{this}"
																		  stackName="{runningView.provisionedVersion.stackName}"/>
													<mx:VDividedBox width="100%" height="100%"
																	backgroundColor="0x330066">
														<s:Group width="100%" height="100%">
															<s:Rect width="100%" height="100%">
																<s:fill>
																	<s:SolidColor color="white"/>
																</s:fill>
															</s:Rect>
															<s:VGroup width="100%" height="100%">
																<c9:RunningView id="runningView" width="100%"
																				project="@{project}"
																				user="{user}"
																				selectedEnvironment="{workspaceChanger.selectedEnvironment}"
																				mainBox="{this}"
																				height="100%"/>
															</s:VGroup>
														</s:Group>
													</mx:VDividedBox>
												</s:HGroup>
											</mx:Canvas>
										</mx:TabNavigator>
									</mx:HDividedBox>
								</s:VGroup>
							</s:Scroller>
						</s:HGroup>
					</mx:HDividedBox>
				</s:VGroup>
			</s:BorderContainer>
		</s:VGroup>
</s:HGroup>
