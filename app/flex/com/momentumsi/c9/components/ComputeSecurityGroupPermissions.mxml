<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx">
	<s:layout>
		<s:HorizontalLayout verticalAlign="middle"/>	
	</s:layout>
	
	<fx:Metadata>
		[Event(name="defaultRules_valueCommit", type="mx.events.FlexEvent")]
		[Event(name="icmpTypeCB_change", type="mx.events.ListEvent")]
		[Event(name="addRuleButton_click", type="flash.events.MouseEvent")]
		[Event(name="removeButton_click", type="flash.events.MouseEvent")]
		[Event(name="refreshSourceGroups", type="flash.events.Event")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.constants.ImagePath;
			import com.momentumsi.c9.models.resources.Ec2SecurityGroupRule;
			import com.momentumsi.c9.representers.ComputeSecGrpRulesRepresenter;
			import com.momentumsi.c9.representers.ComputeSecurityGroupRepresenter;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			
			[Bindable]
			public var securityGroupRulesCollection:ArrayCollection;
			[Bindable]
			public var existingSecurityGroups:ArrayCollection;
			[Bindable]
			public var secGroupsLabelFunction:Function;
			public var newGroupRule:ComputeSecGrpRulesRepresenter;
			public var selectedRule:ComputeSecGrpRulesRepresenter;
			
			protected function defaultRules_valueCommitHandler(event:FlexEvent):void
			{
				var rule:Object = defaultRules.selectedItem;
				setCurrentState(rule.state, false);
				cidripRB.selected = true;
				cidripTI.text = rule.cidrIps;
				if(currentState == "tcpState")
				{
					if(rule.fromPort != rule.toPort)
					{
						portRange.text = rule.fromPort + "-" + rule.toPort;					
					}
				}
				dispatchEvent(new FlexEvent("defaultRules_valueCommit"));
			}
			
			protected function icmpTypeCB_changeHandler(event:ListEvent):void
			{
				dispatchEvent(new ListEvent("icmpTypeCB_change"));
			}
			
			protected function addRuleButton_clickHandler(event:MouseEvent):void
			{
				if(currentState == "tcpState" || currentState == "icmpState")
				{
					var fromPort:String;
					var toPort:String;
					if(currentState == "tcpState")
					{
						if(defaultRules.selectedIndex == 0)
						{
							var portInput:Array = portRange.text.split("-");
							if(portInput.length == 1){
								fromPort = portInput[0];
								toPort = portInput[0]; 
							}else{
								fromPort = portInput[0];
								toPort = portInput[1];
							}
						}else{
							fromPort = defaultRules.selectedItem.fromPort;
							toPort = defaultRules.selectedItem.toPort;
						}
					}else{
						if(defaultRules.selectedIndex == 3)
						{
							fromPort = defaultRules.selectedItem.fromPort;
							toPort = defaultRules.selectedItem.toPort;
						}else{							
							fromPort = icmpTypeCB.selectedItem.type;
							toPort = icmpCodeCB.selectedItem.code;
						}
					}
					
					var rule:Object = {
						fromPort: fromPort,
						toPort: toPort,
						ipProtocol: defaultRules.selectedItem.protocol
					};
					
					if(existingGroupsRB.selected)
					{
						var selectedGroup:ComputeSecurityGroupRepresenter = exisitingGroups.selectedItem as ComputeSecurityGroupRepresenter;
						rule.group = {ownerId: selectedGroup.ownerId, groupName: selectedGroup.name, groupId: selectedGroup.id};
					}else{
						rule.ip_range = {cidr: cidripTI.text};
					}
					
					newGroupRule = new ComputeSecGrpRulesRepresenter(rule);
					
					for each(var item:ComputeSecGrpRulesRepresenter in securityGroupRulesCollection)
					{
						if(newGroupRule.equals(item))
						{						
							Alert.show("Rules already exists.");
							return;
						}
					}
				}
				dispatchEvent(new MouseEvent("addRuleButton_click"));
			}
			
			protected function removeButton_clickHandler(event:MouseEvent):void
			{
				if(securityGroupRules.selectedItem != null)
				{
					selectedRule = securityGroupRules.selectedItem as ComputeSecGrpRulesRepresenter;
					dispatchEvent(new MouseEvent("removeButton_click"));
				}else{
					Alert.show("Select a security group rule to remove");
				}
			}
			
			private function port_labelFunction(item:Object, column:GridColumn):String
			{
				var portString:String = "";
				if(item != null)
				{
					if(item.port is String)
					{
						portString = item.port;
					}else if(item.port != null && item.port.hasOwnProperty("Ref"))
					{
						portString = "@" + item.port.Ref;
					}
				}
				return portString;
			}
			
			protected function sourceRBGroup_changeHandler(event:Event):void
			{
				if(existingSecurityGroups == null || existingSecurityGroups.length == 0)
				{
					exisitingGroups.prompt = null;
					existingSecurityGroups = new ArrayCollection();
					existingSecurityGroups.addItem({name: "Loading Groups..."});
					dispatchEvent(new Event("refreshSourceGroups"));
				}
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="computeState" />
		<s:State name="databaseState"/>
		<s:State name="cacheState"/>
		<s:State name="tcpState" basedOn="computeState"/>
		<s:State name="icmpState" basedOn="computeState"/>
	</s:states>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:RadioButtonGroup id="sourceRBGroup"
							change="sourceRBGroup_changeHandler(event)"/>
	</fx:Declarations>
	<s:BorderContainer width="504">
		<s:Form width="100%">
			<s:layout>
				<s:FormLayout gap="-11"/>
			</s:layout>
			<s:FormHeading label="Security Group Ingress:"/>
			<s:FormItem width="443" label="New Rule:">
				<s:HGroup width="100%">
					<mx:ComboBox id="defaultRules"
								 valueCommit="defaultRules_valueCommitHandler(event)"
								 width="226" 
								 labelField="label">
						<mx:dataProvider>
							<s:ArrayCollection>
								<fx:Object label="Custom TCP" state="tcpState" cidIps="0.0.0.0/0" protocol="tcp"/>
								<fx:Object label="Custom ICMP" state="icmpState" cidrIps="0.0.0.0/0" protocol="icmp"/>
								<fx:Object label="ALL TCP" state="tcpState" fromPort="0" toPort="65535" protocol="tcp" cidrIps="0.0.0.0/0"/>
								<fx:Object label="ALL ICMP" state="icmpState" fromPort="-1" toPort="-1" protocol="icmp" cidrIps="0.0.0.0/0"/>
								<fx:Object label="SSH" state="tcpState" fromPort="22" toPort="22" protocol="tcp" cidrIps="0.0.0.0/0"/>
								<fx:Object label="MYSQL" state="tcpState" fromPort="3000" toPort="3000" protocol="tcp" cidrIps="0.0.0.0/0"/>
								<fx:Object label="HTTP" state="tcpState" fromPort="80" toPort="80" protocol="tcp" cidrIps="0.0.0.0/0"/>
								<fx:Object label="HTTPS" state="tcpState" fromPort="443" toPort="443" protocol="TCP" cidrIps="0.0.0.0/0"/>
							</s:ArrayCollection>
						</mx:dataProvider>
					</mx:ComboBox>
					<s:HGroup width="100%" horizontalAlign="right">
					</s:HGroup>
				</s:HGroup>	
			</s:FormItem>
			<s:FormItem id="portRangeFI"
						includeIn="tcpState"
						label="Port range:"
						visible="{defaultRules.selectedIndex == 0}"
						includeInLayout="{defaultRules.selectedIndex == 0}">
				<s:HGroup>
					<s:TextInput id="portRange"
								 width="226"/>
					<s:Image width="16" height="16"
							 source="{ImagePath.HELPER_ICON}"
							 toolTip="(e.g. 80 or 49152-65535)"/>
				</s:HGroup>
			</s:FormItem>
			<s:FormItem id="icmpTypeFI"
						includeIn="icmpState"
						visible="{defaultRules.selectedIndex == 1}"
						includeInLayout="{defaultRules.selectedIndex == 1}"
						label="Type:">
				<s:HGroup>
					<mx:ComboBox id="icmpTypeCB"
								 change="icmpTypeCB_changeHandler(event)"
								 dataProvider="{Ec2SecurityGroupRule.ICMP_TYPES}"/>
				</s:HGroup>
			</s:FormItem>
			<s:FormItem includeIn="icmpState"
						visible="{icmpTypeCB.selectedItem.codes.length > 1}"
						includeInLayout="{icmpTypeCB.selectedItem.codes.length > 1}"
						label="Code:">
				<mx:ComboBox id="icmpCodeCB"
							 dataProvider="{icmpTypeCB.selectedItem.codes}"
							 labelField="description"/>
			</s:FormItem>
			<s:FormItem label="Source:">
				<s:HGroup>
					<s:RadioButton id="cidripRB"
								   label="CIDR IP"
								   selected="true"
								   group="{sourceRBGroup}"/>
					<s:TextInput id="cidripTI"
								 enabled="{cidripRB.selected}"
								 text="{defaultRules.selectedItem.cidrIps}"
								 width="226"/>										
					<s:Image width="16" height="16"
							 source="{ImagePath.HELPER_ICON}"
							 toolTip="(e.g. 192.168.2.0/24)"/>
				</s:HGroup>
				<s:HGroup>
					<s:RadioButton id="existingGroupsRB"
								   label="Existing Group"
								   group="{sourceRBGroup}"/>
					<mx:ComboBox id="exisitingGroups" width="225"
								 prompt="Select Group"
								 dataProvider="{existingSecurityGroups}"
								 enabled="{existingGroupsRB.selected}"
								 labelField="name"/>
				</s:HGroup>									
			</s:FormItem>
			<s:HGroup width="100%" horizontalAlign="right" paddingRight="25"
					  paddingTop="10">
				<s:Button id="addRuleButton" 
						  label="Add Rule"
						  click="addRuleButton_clickHandler(event)"/>
			</s:HGroup>
		</s:Form>
	</s:BorderContainer>
	<s:VGroup width="504">
		<s:DataGrid id="securityGroupRules" minHeight="0" maxHeight="145"
					dataProvider="{securityGroupRulesCollection}"
					width="100%">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn headerText="Port" width="100" dataField="port" labelFunction="port_labelFunction"/>
					<s:GridColumn headerText="Protocol" width="80" dataField="ipProtocol"/>
					<s:GridColumn headerText="Source" dataField="source"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
		<s:HGroup horizontalAlign="right" paddingRight="25"
				  width="100%">
			<s:Button id="removeButton"
					  label="Remove Rule" 
					  enabled="{securityGroupRules.selectedItem != null}"
					  click="removeButton_clickHandler(event)"/>
		</s:HGroup>
	</s:VGroup>
</s:Group>
