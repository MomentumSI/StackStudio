<?xml version="1.0" encoding="utf-8"?>
<c9:DetailsBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:c9="com.momentumsi.c9.components.*"
		  width="100%" height="100%"
		  xmlns:diagrammer="fr.kapit.diagrammer.base.uicomponent.*">
	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.components.MainBox;
			import com.momentumsi.c9.utils.Helpers;
			import com.momentumsi.c9.models.ProvisionedInstance;
			import com.momentumsi.c9.services.MonitoringService;
			
			import fr.kapit.diagrammer.Diagrammer;
			import fr.kapit.diagrammer.base.uicomponent.DiagramSprite;
			
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.mxml.HTTPService;
			
			[Bindable]
			private var thisElcNodeEvents:ArrayCollection = new ArrayCollection();
			
			protected function faultHandler(event:FaultEvent):void
			{
				
			}
			
			protected function reboot_clickHandler(event:MouseEvent):void
			{
				var elcRebootNodePopUp:ElasticCacheNodeRebootPopUp = ElasticCacheNodeRebootPopUp(PopUpManager.createPopUp( UIComponent(this.parentApplication), ElasticCacheNodeRebootPopUp , true));
				elcRebootNodePopUp.cacheNode = cacheNode;
				//elcRebootNodePopUp.node = node;
			}
			
			protected function remove_clickHandler(event:MouseEvent):void
			{
				var elcRemoveNodePopUp:ElasticCacheNodeRemovePopUp = ElasticCacheNodeRemovePopUp(PopUpManager.createPopUp( UIComponent(this.parentApplication), ElasticCacheNodeRemovePopUp , true));
				elcRemoveNodePopUp.cacheNode = cacheNode;
				//elcRemoveNodePopUp.node = node;
			}
			
			protected function elcDetails_changeHandler(event:IndexChangedEvent):void
			{
				var monitorResource:ProvisionedInstance = node;
				monitorResource.instanceId = _cacheNodeObject.CacheNodeId;
				if(elcDetails.selectedChild == nodeMonitor)
				{
					monitoringBoxNode.resource = monitorResource;
					monitoringBoxNode.elcRefresh = MonitoringBox.ELC_REFRESH_NODE;
					monitoringBoxNode.getDefaultMonitorsCall(MonitoringService.ELC_NODE_DEFAULT);
				}else if(elcDetails.selectedChild == statsMonitor)
				{
					monitoringBoxNodeStat.resource = monitorResource;
					monitoringBoxNodeStat.elcRefresh = MonitoringBox.ELC_REFRESH_NODE_STATS;
					monitoringBoxNodeStat.getDefaultMonitorsCall(MonitoringService.ELC_NODE_STATS);
				}else if(elcDetails.selectedChild == cacheMonitor)
				{
					monitoringBox.resource = monitorResource;
					monitoringBox.elcRefresh = MonitoringBox.ELC_REFRESH_CACHE;
					monitoringBox.getDefaultMonitorsCall(MonitoringService.ELC_DEFAULT);
				}
			}
			
			[Bindable]
			private var _cacheNodeObject:Object = new Object();
			[Bindable]
			private var _clusterId:String;
			override public function set resourceObject(value:Object):void
			{
				if(value == null)
				{
					return;
				}
				_cacheNodeObject = value;
				if(_cacheNodeObject.CacheNodeCreateTime != null)
				{
					createTime.text = dateFormatter.format(Helpers.formatDate(_cacheNodeObject.CacheNodeCreateTime));
				}
				_clusterId = String(_cacheNodeObject.Address).split(".")[0];
			}
				
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<fx:XML id="cacheNode"/>
	</fx:Declarations>
	
	<s:HGroup id="elasticCacheButtonBar" height="25" paddingLeft="10">
		<s:Button id="rebootButton" label="Reboot" click="reboot_clickHandler(event)" enabled="{node.status == ProvisionedInstance.RUNNING}"/>
		<s:Button id="removeButton" label="Remove" click="remove_clickHandler(event)" enabled="{node.status == ProvisionedInstance.RUNNING}"/>
	</s:HGroup>
	<s:BorderContainer height="100%" width="100%" alpha="1" borderVisible="false">
		<c9:DetailsBoxTabNavigator id="elcDetails" change="elcDetails_changeHandler(event)">
			<s:NavigatorContent label="Details" width="100%" height="100%">
				<s:BorderContainer borderVisible="false"  id="details" height="100%" width="100%">
					<s:Scroller width="100%" height="100%">
						<s:viewport>
							<s:HGroup>
								<s:Form>
									<s:layout>
										<s:FormLayout gap="-7"/>
									</s:layout>
									<s:FormItem label="Node ID:">
										<mx:Text text="{_cacheNodeObject.CacheNodeId}"/>
									</s:FormItem>
									<s:FormItem label="Endpoint Address:">
										<mx:Text text="{_cacheNodeObject.Address}"/>
									</s:FormItem>
									<s:FormItem label="Port:">
										<mx:Text text="{_cacheNodeObject.Port}"/>
									</s:FormItem>
									<s:FormItem label="Status:">
										<mx:Text text="{_cacheNodeObject.CacheNodeStatus}"/>
									</s:FormItem>
									<s:FormItem label="Parameter Group Status:">
										<mx:Text text="{_cacheNodeObject.ParameterGroupStatus}"/>
									</s:FormItem>
									<s:FormItem label="Create Time:">
										<mx:Text id="createTime"/>
									</s:FormItem>
								</s:Form>
							</s:HGroup>
						</s:viewport>
					</s:Scroller>
				</s:BorderContainer>
			</s:NavigatorContent>
			<s:NavigatorContent id="nodeMonitor" label="Node Monitor" enabled="{node.status == ProvisionedInstance.RUNNING}" width="100%" height="100%">
				<c9:MonitoringBox id="monitoringBoxNode" clusterId="{_clusterId}" cloudAccountId="{cloudAccountId}" width="100%" height="100%"/>
			</s:NavigatorContent>
			<s:NavigatorContent id="statsMonitor" label="Stats Monitor" enabled="{node.status == ProvisionedInstance.RUNNING}" width="100%" height="100%">
				<c9:MonitoringBox id="monitoringBoxNodeStat" clusterId="{_clusterId}" cloudAccountId="{cloudAccountId}" width="100%" height="100%"/>
			</s:NavigatorContent>
			<s:NavigatorContent id="cacheMonitor" label="Cache Monitor" enabled="{node.status == ProvisionedInstance.RUNNING}" width="100%" height="100%">
				<c9:MonitoringBox id="monitoringBox" clusterId="{_clusterId}" cloudAccountId="{cloudAccountId}" width="100%" height="100%"/>
			</s:NavigatorContent>
			<s:NavigatorContent label="Recent Events" width="100%" height="100%">
				<s:BorderContainer borderVisible="false" id="recentEvents" height="100%" width="100%">
					<mx:DataGrid id="elasticCacheNodeEventsGrid" width="100%" height="100%" dataProvider="{thisElcNodeEvents}">
						<mx:columns>
							<mx:DataGridColumn headerText="Event Details" dataField="details" width="220"/>
							<mx:DataGridColumn headerText="Event Type" dataField="type" width="100"/>
							<mx:DataGridColumn headerText="Event Time" dataField="time"/>
						</mx:columns>
					</mx:DataGrid>
				</s:BorderContainer>
			</s:NavigatorContent>
		</c9:DetailsBoxTabNavigator>
	</s:BorderContainer>
</c9:DetailsBox>
