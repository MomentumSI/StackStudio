<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="100%" height="100%" 
		 xmlns:components="com.momentumsi.c9.components.*"
		 xmlns:itemRenderers="com.momentumsi.c9.itemRenderers.*" xmlns:cfn="com.momentumsi.c9.components.cfn.*" xmlns:services="com.momentumsi.c9.services.*">
	
	<fx:Style>
		.accordionHead {
			fontSize: 12;
			color: PropertyReference("Color.PURPLE");
		}
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSONEncoder;
			import com.maccherone.json.*;
			import com.momentumsi.c9.components.cfn.*;
			import com.momentumsi.c9.components.elc.ElasticCacheResource;
			import com.momentumsi.c9.constants.AlertMessage;
			import com.momentumsi.c9.constants.Color;
			import com.momentumsi.c9.constants.PermissionType;
			import com.momentumsi.c9.constants.ResourceType;
			import com.momentumsi.c9.itemRenderers.TranscendGridHeaderRenderer;
			import com.momentumsi.c9.models.*;
			import com.momentumsi.c9.services.CloudApiService;
			import com.momentumsi.c9.utils.Helpers;
			
			import fr.kapit.diagrammer.Diagrammer;
			import fr.kapit.diagrammer.base.uicomponent.DiagramSprite;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridHeader;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.*;
			import mx.logging.LogEvent;
			import mx.managers.*;
			import mx.rpc.events.*;
			import mx.rpc.http.mxml.HTTPService;
			
			import spark.events.IndexChangeEvent;
			
			private static const SNIPPET_DEFAULT_MESSAGE:String = "Select an element from the left to display it's code snippet."
			
			public var templateSource:Object = new Object();
			[Bindable]
			public var templateSourceString:String = new String();
			public var templateResources:Object = new Object();
			public var templateParameters:Object = new Object();
			[Bindable]
			public var environment:String;
			[Bindable]
			private var _projectVersion:ProjectVersion;
			[Bindable]
			private var host:String = FlexGlobals.topLevelApplication.GetConfiguration('serviceUrl');
			[Bindable]
			public var project:Project;
			[Bindable]
			public var user:User;
			[Bindable]
			private var parametersCollection:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var outputsCollection:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var resourcesCollection:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var mappingsCollection:ArrayCollection = new ArrayCollection();
			
			public function set projectVersion(value:ProjectVersion):void
			{
				_projectVersion = value;
				_projectVersion.addEventListener(ProjectVersion.REFRESH, updateElements);
			}
			
			public function reverseVolumeAzJson(volume:XML):void
			{
				//removeResourceJson(volume.child('volume-attachment-name').toString());
				for(var resource:* in templateResources)
				{
					if(volume.child('name').toString() == resource)
					{
						templateResources[resource]['Properties']['AvailabilityZone'] = volume.child('availability-zone').toString();
						break;
					}
				}
			}
			
			public function editVolumeAzJson(volumeName:String, instanceName:String):void
			{
				for(var resource:* in templateResources)
				{
					if(volumeName == resource)
					{
						templateResources[resource]['Properties']['AvailabilityZone'] = {"Fn::GetAtt" : [instanceName, "AvailabilityZone"]};
						break;
					}
				}
			}

			
			protected function cost_clickHandler(event:MouseEvent):void
			{
				if(templateDisplay.text != "" && templateResources != null && templateResources != {})
				{
					var validateStackSvc:CloudApiService = new CloudApiService();
					validateStackSvc.action = "validate_template";
					validateStackSvc.request = {}
					//validateStackSvc.url = Helpers.getHost() + "/cfn_stacks/validate_template/" + cloudFormationStack.child('id') + ".xml";
					validateStackSvc.method = "GET";
					validateStackSvc.resultFormat = "e4x";
					validateStackSvc.addEventListener(ResultEvent.RESULT, validateStackSvc_resultHandler);
					validateStackSvc.addEventListener(FaultEvent.FAULT, estimateTemplateCostSvc_faultHandler);
					validateStackSvc.send();
				}else
				{
					Alert.show("At least one configured resource is required to estimate the cost of a template.");
				}
			}
			
			protected function validateStackSvc_resultHandler(event:ResultEvent):void
			{
				var result:XML = event.result as XML;
				if(result.toString().split(" ")[0] != "ValidationError:")
				{
					var getEstimateTemplateCost:HTTPService = new HTTPService();
					getEstimateTemplateCost.url = Helpers.getHost() + "/cfn_stacks/estimate_template_cost/" + Helpers.currentAccount(this) + ".xml";
					getEstimateTemplateCost.method = "GET";
					getEstimateTemplateCost.resultFormat = "e4x";
					getEstimateTemplateCost.addEventListener(ResultEvent.RESULT, estimateTemplateCostSvc_resultHandler);
					getEstimateTemplateCost.addEventListener(FaultEvent.FAULT, estimateTemplateCostSvc_faultHandler);
					getEstimateTemplateCost.send({template_body: templateDisplay.text});
				}else
				{
					Alert.show("Validation Error: JSON is not well-formed.");
				}
			}
			
			protected function estimateTemplateCostSvc_resultHandler(event:ResultEvent):void
			{
				var result:String = String(event.result);
				if(result != "")
				{
					var resultArray:Array = result.split('"');
					ExternalInterface.call("window.open", resultArray[1], "_blank", "");
				}
			}
			
			private function estimateTemplateCostSvc_faultHandler(event:FaultEvent):void
			{
				Alert.show("Validation Error: JSON is not well-formed.");
			}
			
			protected function clearTemplateButton_clickHandler(event:MouseEvent):void
			{
				if(project.userHasPermission(user.id, PermissionType.EDIT_SOURCE, PermissionType.DEVELOPMENT))
				{
					Alert.show("This will remove all diagram nodes as well as clear template fields.  Are you sure you still want to clear?", "Clear Project", 3, Helpers.getMainBox(this), clearDesign);
				}else
				{
					Alert.show(AlertMessage.PERMISSION_DENIED);
				}
			}
			
			private function clearDesign(event:CloseEvent):void
			{
				if(event.detail == Alert.YES)
				{
					resetWorkspace();
				}
			}
			
			public function resetWorkspace(clearTemplateSource:Boolean = true):void
			{
				var designDiag:Diagrammer = Helpers.getDesignDiagram(this);
				var node:DiagramSprite;
				for each(node in designDiag.nodesMap)
				{
					designDiag.removeNodeElement(node.itemID);
				}
				_projectVersion.deleteAllItems();
			}		
			
			public function validateResourceName(name:String):Boolean
			{
				for(var resource:* in templateResources)
				{
					if(name == resource)
					{
						Alert.show("Instance identifier must be unique amongst all resources.");
						return false;
					}
				}
				return true;
			}
			
			public function saveWizardParameter(parameter:Object):void
			{
				delete templateParameters[parameter['oldParameterName']];
				templateParameters[parameter['parameter']] = parameter['properties'];
			}

			private var _resourceReferences:ArrayCollection;
			private function set resourceReferences(value:Object):void
			{
				var template:CloudFormationTemplate = new CloudFormationTemplate();
				template.resources = value;
				template.getResourceReferences();
				_resourceReferences = template.linkCollection;
				dispatchEvent(new Event("updatedTemplateReferences"));
			}
			
			[Bindable(event="updatedTemplateReferences")]
			public function get linkCollection():ArrayCollection
			{
				return _resourceReferences;
			}
			
			public function get templateResourcesObject():Object
			{
				return _templateResources;
			}
			
			private function removeAllFromCollections():void
			{
				parametersCollection.removeAll();
				mappingsCollection.removeAll();
				resourcesCollection.removeAll();
				outputsCollection.removeAll();
			}
			
			private var _template:String = new String();
			private var _templateResources:Object;
			private function updateElements(event:Event):void
			{
				_template = "";
				removeAllFromCollections();
				var resources:Object = new Object();
				var parameters:Object = new Object();
				var outputs:Object = new Object();
				var mappings:Object = new Object();
				var addElement:Boolean;
				
				for each(var element:Element in _projectVersion.elements)
				{
					if(element.properties is String)
					{
						element.properties = JSON.decode(element.properties.toString());
					}
					if(element.elementGroup == Element.ELEMENT_GROUP_RESOURCE){
						addElement = true;
						for each(var variant:ProjectVariant in _projectVersion.variants)
						{
							if(variant.environment == environment && variant.ruleType == ProjectVariant.REMOVE_TYPE && variant.rules.name == element.name)
							{
								addElement = false;
								break;
							}
						}
						if(addElement)
						{
							resourcesCollection.addItem(element);
							resources[element.name] = element.properties;
						}
					}else if(element.elementGroup == Element.ELEMENT_GROUP_PARAMETER){
						parametersCollection.addItem(element);
						parameters[element.name] = element.properties;
					}else if(element.elementGroup == Element.ELEMENT_GROUP_OUTPUT){
						outputsCollection.addItem(element);
						outputs[element.name] = element.properties;
					}else if(element.elementGroup == Element.ELEMENT_GROUP_MAPPING){
						mappingsCollection.addItem(element);
						mappings[element.name] = element.properties;
					}
					
				}
				var template:Object = new Object();
				template["AWSTemplateFormatVersion"] = "2010-09-09";
				template["Description"] = "This template was generated in StackStudio";					
				var isEmpty:Boolean = true;
				var n:*;
				for (n in parameters) { isEmpty = false; break; }
				if(!isEmpty){
					template['Parameters'] = parameters;
					isEmpty = true;
				}
				for (n in mappings) { isEmpty = false; break; }
				if(!isEmpty){
					template['Mappings'] = mappings;
					isEmpty = true;
				}
				for (n in resources) { isEmpty = false; break; }
				if(!isEmpty){
					template['Resources'] = resources;
					isEmpty = true;
				}
				for (n in outputs) { isEmpty = false; break; }
				if(!isEmpty){
					template['Outputs'] = outputs;
					isEmpty = true;
				}
				
				convertJsonDisplaySvc.setPost();
				convertJsonDisplaySvc.request = {template_body: template};
				convertJsonDisplaySvc.send();
				
				parametersGrid.templateParameters = parametersCollection;
				outputsGrid.templateOutputs = outputsCollection;
				
				resourceReferences = resources;
				_templateResources = resources;

			}
			
			[Bindable(event="templateElementsUpdated")]
			public function get template():String
			{
				return _template;
			}
			
			protected function convertJsonDisplaySvc_resultHandler(event:ResultEvent):void
			{
				_template = String(event.result);
				dispatchEvent(new Event("templateElementsUpdated"));
			}
			
			protected function convertJsonDisplaySvc_faultHandler(event:FaultEvent):void
			{
				Alert.show("Error displaying template source.", "Display Error");
			}
			
			protected function resourceSnippetList_valueCommitHandler(event:FlexEvent):void
			{
				if(resourceSnippetList.selectedIndex != -1)
				{
					snippetDisplay.text = JSON.encode(resourceSnippetList.selectedItem.properties, true);
				}else
				{
					snippetDisplay.text = SNIPPET_DEFAULT_MESSAGE;
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		
		<!-- Created service to convert template source to 'pretty print' json.  
			 No Flex libraries could handle such large strings, so functionality was moved to ruby. -->
		
		<services:ApiService id="convertJsonDisplaySvc"
							 url="{host}/helpers/convert_json"
							 resultFormat="text"
							 result="convertJsonDisplaySvc_resultHandler(event)"
							 fault="convertJsonDisplaySvc_faultHandler(event)"/>


	</fx:Declarations>
	<s:HGroup width="100%"
			  paddingLeft="20">
		<s:Label text="Cloud Formation Template" 
				 fontWeight="bold" fontSize="14"
				 color="white"
				 alpha="1"/>
		<s:HGroup horizontalAlign="right"
				  width="100%"
				  paddingRight="20">
			<s:Button id="clearTemplateButton"
					  label="Clear" 
					  click="clearTemplateButton_clickHandler(event)"/>
			<!--
			<s:Button id="costButton"
					  label="Cost $"
					  click="cost_clickHandler(event)"
					  enabled="{!this.parentApplication.headerBox.readOnly}"/>
			-->
		</s:HGroup>
	</s:HGroup>
	<mx:TabNavigator height="100%" width="100%"
					 creationPolicy="all" 
					 alpha="1.75">
		<s:NavigatorContent label="Resources" width="100%" height="100%">
			<mx:HDividedBox width="100%" height="100%">
				<s:List id="resourceSnippetList"
						minWidth="0" maxWidth="300" 
						width="175" height="100%"
						dataProvider="{resourcesCollection}" 
						labelField="name" 
						valueCommit="resourceSnippetList_valueCommitHandler(event)"/>
				<s:TextArea id="snippetDisplay"
							verticalScrollPolicy="auto"	
							horizontalScrollPolicy="auto" 
							paddingTop="10"						
							selectable="true"
						 	text="{SNIPPET_DEFAULT_MESSAGE}"
							editable="false"
							height="100%" width="100%" 
							alpha="1"/>
			</mx:HDividedBox>
		</s:NavigatorContent>
		<s:NavigatorContent label="Parameters" height="100%" width="100%">
			<s:Scroller height="100%" width="100%">
				<s:VGroup height="100%" width="100%" 
						  paddingLeft="10" paddingTop="10" paddingRight="10" paddingBottom="10">
					<cfn:CloudFormationParameterGrid id="parametersGrid" height="100%" width="100%" projectVersion="{_projectVersion}" project="{project}" user="{user}"/>
				</s:VGroup>
			</s:Scroller>
		</s:NavigatorContent>
		<s:NavigatorContent label="Outputs" height="100%" width="100%">
			<s:Scroller height="100%" width="100%">
				<s:VGroup height="100%" width="100%" paddingLeft="10" paddingBottom="10" paddingRight="10" paddingTop="10">				
					<cfn:CloudFormationOutputGrid id="outputsGrid" height="100%" width="100%" project="{project}" user="{user}"/>
				</s:VGroup>
			</s:Scroller>
		</s:NavigatorContent>
		<s:NavigatorContent label="Source" height="100%" width="100%">
			<s:VGroup height="100%" width="100%">
				<components:TextFinder id="templateTextFinder" mainTextArea="{templateDisplay}"/>
				<s:TextArea id="templateDisplay"
							verticalScrollPolicy="auto"
							horizontalScrollPolicy="auto"
							paddingTop="10"
							selectable="true"
							text="{template}"
							editable="false"
							height="100%" width="100%" 
							alpha="1"/>
			</s:VGroup>
		</s:NavigatorContent>
	</mx:TabNavigator>
</s:VGroup>
