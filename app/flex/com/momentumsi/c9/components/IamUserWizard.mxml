<?xml version="1.0" encoding="utf-8"?>
<wizard:WizardWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
					     xmlns:s="library://ns.adobe.com/flex/spark" 
					     xmlns:mx="library://ns.adobe.com/flex/mx"
					     xmlns:diagrammer="fr.kapit.diagrammer.base.uicomponent.*"
					     xmlns:components="com.momentumsi.c9.components.*"
					     close="PopUpManager.removePopUp(this)"
					     creationComplete="creationCompleteHandler(event)"
					     move="Helpers.doMove(this)"
					     wizardType="{ResourceTypeLabel.IAM_USER}"
					     width="700" height="500" xmlns:wizard="com.momentumsi.c9.components.wizard.*" xmlns:services="com.momentumsi.c9.services.*">
	<fx:Script>
		<![CDATA[
			import com.maccherone.json.*;
			import com.momentumsi.c9.constants.AlertMessage;
			import com.momentumsi.c9.constants.ImagePath;
			import com.momentumsi.c9.constants.ResourceType;
			import com.momentumsi.c9.constants.ResourceTypeLabel;
			import com.momentumsi.c9.models.CloudAccount;
			import com.momentumsi.c9.models.Element;
			import com.momentumsi.c9.models.ProjectVersion;
			import com.momentumsi.c9.utils.Helpers;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.IVisualElement;
			import mx.events.CollectionEvent;
			import mx.events.DropdownEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.StringUtil;
			
			[Bindable]
			public var accountId:int = 0;
			[Bindable]
			private var projectId:int = 0;
			private var generateKeys:Boolean = false;
			[Bindable]
			private var generateKeysReviewValue:String = "";
			private var currentAccessKey:Element;
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				PopUpManager.centerPopUp(this);
				projectId = Helpers.currentProject(this);
			}
			
			override public function applyConfigurations():void
			{
				if(element.id == null)
				{
					return;
				}
				
				userName.text = element.name;
				
				if(element.properties.hasOwnProperty('Properties') && element.properties['Properties'].hasOwnProperty('LoginProfile') && element.properties['Properties']['LoginProfile'].hasOwnProperty('Password'))
				{
					var passwordString:String = element.properties['Properties']['LoginProfile']['Password'];
					password.text = passwordString;
					confirmPassword.text = passwordString;
				}
				
				var accessKeyElement:Element = projectVersion.getElementByReference(ResourceType.IAM_ACCESS_KEY, "UserName", element.name);
				if(accessKeyElement != null)
				{
					generateAccessKey.selected = true;
					currentAccessKey = accessKeyElement;
				}else
				{
					generateAccessKey.selected = false;
				}
			}
			
			protected function previousButton_clickHandler(event:MouseEvent):void
			{
				if(iamUserWizardViewStack.selectedIndex > 0)
				{
					iamUserWizardViewStack.selectedIndex--;
				}
			}
			
			protected function nextButton_clickHandler(event:MouseEvent):void
			{
				var alert:Boolean = false;
				
				if(iamUserWizardViewStack.selectedChild == userDetailsContent)
				{
					if(userName.text.replace(" ", "") != "")
					{
						if(Helpers.validateAlphanumeric(userName.text))
						{
							if(objectManagementCreate)
							{
								userNameAlert.visible = false;						
							}else
							{
								if(projectVersion.validateUniqueName(userName.text, element))
								{
									userNameAlert.visible = false;
								}else
								{
									userNameAlert.text = AlertMessage.NOT_UNIQUE;
									userNameAlert.visible = true;
									alert = true;
								}
							}
						}else
						{
							userNameAlert.text = AlertMessage.NOTALPHANUMERIC;
							userNameAlert.visible = true;
							alert = true;
						}
					}else
					{
						userNameAlert.text = AlertMessage.INVALID;
						userNameAlert.visible = true;
						alert = true;
					}
					
					if(password.text != "")
					{
						if(password.text != confirmPassword.text)
						{
							Alert.show("Password and confirm password do not match.");
							alert = true;
						}
					}
					
					if(generateAccessKey.selected)
					{
						generateKeysReviewValue = "Yes";
					}else
					{
						generateKeysReviewValue = "No";
					}
				}
				
				if(!alert)
				{
					iamUserWizardViewStack.selectedIndex++;
				}
			}
			
			protected function submitButton_clickHandler(event:MouseEvent):void
			{
				submitButton.enabled = false;
				submitButton.label = "Saving";
				
				if(objectManagementCreate)
				{
					if(generateAccessKey.selected)
					{
						generateKeys = true;
					}
					
					var parameters:Object = {
						name: userName.text,
						password: password.text,
						generate_keys: generateKeys,
						email: userEmail.text};
					
					iamService.createUser(parameters);
				}else
				{
					var userAttributes:Object = new Object();
					userAttributes['Type'] = ResourceType.IAM_USER;
					
					if(password.text != "")
					{	
						userAttributes['Properties'] = {"LoginProfile": {"Password": password.text}};				
					}
					
					if(generateAccessKey.selected)
					{
						var accessKeyAttributes:Object = new Object();
						accessKeyAttributes['Type'] = ResourceType.IAM_ACCESS_KEY;
						accessKeyAttributes['Properties'] = {"UserName": {"Ref": userName.text}};
						
						var accessKeyElement:Element = new Element(null, userName.text + "AccessKey", ResourceType.IAM_ACCESS_KEY, element.projectId);
						accessKeyElement.properties = accessKeyAttributes;
						if(currentAccessKey != null)
						{
							accessKeyElement.id = currentAccessKey.id;
						}
						accessKeyElement.save(projectVersion);
					}else
					{
						if(currentAccessKey != null)
						{
						   projectVersion.deleteElementByName(currentAccessKey.name);
						   projectVersion.dispatchEvent(new Event(ProjectVersion.REFRESH));
						}
					}
					saveElement(userName.text, userAttributes);
					//createVariants(userName.text, statesToApply.ignoredEnvironments);
				}
			}
			
			protected function userCreated_resultHandler(event:ResultEvent):void
			{
				var objectManagement:ObjectManagementTab = Helpers.getObjectManagement(this);
				objectManagement.refreshResourceList();
				if(generateKeys && cloudAccount.cloud_provider == CloudAccount.AMAZON)
				{
					objectManagement.displayUserAccessKeys(event.result);
				}
				PopUpManager.removePopUp(this);
			}
			
			protected function objectManagementLaunchSvc_faultHandler(event:FaultEvent):void
			{
				submitButton.label = "Finish";
				submitButton.enabled = true;
			}
			
			protected function hidePasswords_changeHandler(event:Event):void
			{
				if(hidePasswords.selected)
				{
					password.displayAsPassword = true;
					confirmPassword.displayAsPassword = true;
				}else
				{
					password.displayAsPassword = false;
					confirmPassword.displayAsPassword = false;
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>	
		<services:IamService id="iamService"
							 cloudAccountId="{cloudAccount.id}"
							 userCreated="userCreated_resultHandler(event)"/>

	</fx:Declarations>
	
	<s:VGroup width="100%" height="90%" gap="0">
		<wizard:WizardWindowTitle id="iamUserWizardTitle" includeInLayout="false"
								  width="100%"
								  resourceImage="{ImagePath.NEW_IAM_USER}"
								  resourceLabel="{wizardDisplayName}"
								  wizardStack="{iamUserWizardViewStack}"/>
		<wizard:CookieTrail id="iamUserCookieTrail"
							wizardStack="{iamUserWizardViewStack}"
							width="100%"/>
		<mx:ViewStack id="iamUserWizardViewStack" width="100%" height="100%" paddingTop="10" paddingLeft="20" paddingRight="20" creationPolicy="all">
			<s:NavigatorContent id="userDetailsContent" label="User Details" width="100%" height="100%">
				<s:Form textAlign="right">
					<s:FormItem label="User Name*:">
						<s:HGroup textAlign="left">
							<s:TextInput id="userName" width="193"/>
							<mx:Text id="userNameAlert" text="Invalid Input." color="red" visible="false"/>
						</s:HGroup>
					</s:FormItem>
					<s:FormItem label="Email:"
								visible="{cloudAccount.cloud_provider != CloudAccount.AMAZON}"
								includeInLayout="{cloudAccount.cloud_provider != CloudAccount.AMAZON}">
						<s:TextInput id="userEmail" width="271" textAlign="left"/>
					</s:FormItem>
					<s:FormItem label="Login Profile:"
								visible="{cloudAccount.cloud_provider == CloudAccount.AMAZON}"
								includeInLayout="{cloudAccount.cloud_provider == CloudAccount.AMAZON}">
						<mx:Text text="A password is not requred to create a user. Leave the following fields blank if you do not wish to create a login profile." width="530" textAlign="left"/>
						<s:HGroup>
							<mx:Text text="Password:" width="125" textAlign="right"/>
							<s:TextInput id="password" textAlign="left" displayAsPassword="true"/>
							<s:CheckBox id="hidePasswords" label="Hide Passwords" change="hidePasswords_changeHandler(event)" selected="true"/>
						</s:HGroup>
						<s:HGroup>
							<mx:Text text="Confirm Password:" width="125" textAlign="right"/>
							<s:TextInput id="confirmPassword" textAlign="left" displayAsPassword="true"/>
						</s:HGroup>
					</s:FormItem>
					<s:FormItem label="Access Key:"
								visible="{cloudAccount.cloud_provider == CloudAccount.AMAZON}"
								includeInLayout="{cloudAccount.cloud_provider == CloudAccount.AMAZON}">
						<s:CheckBox id="generateAccessKey" label="Generate access key for this user" selected="true"/>
						<mx:Text text="Access keys are required to make secure REST requests to the service APIs."/>
					</s:FormItem>
				</s:Form>
			</s:NavigatorContent>
			<s:NavigatorContent id="reviewContent" label="Review" width="100%" height="100%">
				<s:VGroup paddingLeft="20" height="100%" width="100%" paddingTop="10">
					<mx:Text text="Please Review Your IAM User" y="20" fontWeight="bold"/>
					<s:Form>
						<s:FormItem label="User Name:">
							<s:Label text="{userName.text}"/>
						</s:FormItem>
						<s:FormItem label="Generate Access Key:"
									visible="{cloudAccount.cloud_provider == CloudAccount.AMAZON}"
									includeInLayout="{cloudAccount.cloud_provider == CloudAccount.AMAZON}">
							<s:Label text="{generateKeysReviewValue}"/>
						</s:FormItem>
					</s:Form>					
				</s:VGroup>
			</s:NavigatorContent>
		</mx:ViewStack>
	</s:VGroup>
	<s:Button id="previousButton" x="10" y="436" label="Previous" click="previousButton_clickHandler(event)" enabled="{iamUserWizardViewStack.selectedIndex != 0}"/>
	<s:Button id="nextButton" x="92" y="436" label="Next" click="nextButton_clickHandler(event)" enabled="{iamUserWizardViewStack.selectedChild != reviewContent}"/>
	<s:Button id="submitButton" x="169" y="436" label="Finish" click="submitButton_clickHandler(event)" enabled="{iamUserWizardViewStack.selectedChild == reviewContent}"/>
	<s:Button id="cancelButton" x="619" y="436" label="Cancel" click="{PopUpManager.removePopUp(this)}"/>
</wizard:WizardWindow>
