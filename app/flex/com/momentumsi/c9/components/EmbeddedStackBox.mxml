<?xml version="1.0" encoding="utf-8"?>
<components:ObjectManagementDetailsBox xmlns:fx="http://ns.adobe.com/mxml/2009"
									   xmlns:s="library://ns.adobe.com/flex/spark" 
									   xmlns:mx="library://ns.adobe.com/flex/mx"
									   width="100%" height="100%"
									   xmlns:diagrammer="fr.kapit.diagrammer.base.uicomponent.*"
									   xmlns:components="com.momentumsi.c9.components.*">
	<fx:Script>
		<![CDATA[
			import com.maccherone.json.*;
			import com.momentumsi.c9.utils.Helpers;
			
			import fr.kapit.diagrammer.Diagrammer;
			import fr.kapit.diagrammer.base.uicomponent.DiagramSprite;
			
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]
			private var embeddedStackObject:Object = new Object();
			[Bindable]
			private var stackStatusReason:String = "";
			[Bindable]
			private var stackStatusReasonVisible:Boolean = false;
			[Bindable]
			private var outputsList:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var resourcesList:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var eventsList:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var parametersList:ArrayCollection = new ArrayCollection();
			
			override public function set resourceData(value:Object):void
			{
				embeddedStackObject = value;
				if(embeddedStackObject["Properties"] == null)
				{
					displaySetups();
				}
			}
			
			public function displaySetups():void
			{
				if(embeddedStackObject.hasOwnProperty('stack'))
				{
					if(embeddedStackObject.stack.hasOwnProperty('stack_status_reason') && embeddedStackObject.stack.stack_status_reason != null)
					{
						stackStatusReasonVisible = true;
						stackStatusReason = embeddedStackObject.stack.stack_status_reason;
					}
					
					outputsList.removeAll();
					if(embeddedStackObject.stack.hasOwnProperty('outputs'))
					{
						for each(var output:Object in embeddedStackObject.stack.outputs)
						{
							outputsList.addItem({key: output.output_key, description: output.description, value: output.output_value});
						}
					}
					
					var creationDataString:String =  embeddedStackObject.stack.creation_time.toString();
					if(creationDataString != "")
					{
						creationDate.text = dateFormatter.format(Helpers.formatDate(creationDataString));
					}
					
					parametersList.removeAll();
					if(embeddedStackObject.stack.hasOwnProperty('parameters'))
					{
						for each(var parameter:Object in embeddedStackObject.stack.parameters)
						{
							parametersList.addItem({name: parameter.parameter_key, value: parameter.parameter_value});
						}
					}
				}
				
				resourcesList.removeAll();
				if(embeddedStackObject.hasOwnProperty('resources') && embeddedStackObject.resources.hasOwnProperty('data'))
				{
					for each(var resource:Object in embeddedStackObject.resources.data)
					{
						var reason:String = "";
						if(resource.hasOwnProperty('resource_status_reason'))
						{
							reason = resource.resource_status_reason;
						}
						resourcesList.addItem({ logicalId: resource.logical_resource_id,
												physicalId: resource.physical_resource_id,
												type: resource.resource_type,
												status: resource.resource_status,
												reason: reason});
					}
				}
				
				eventsList.removeAll();
				if(embeddedStackObject.hasOwnProperty('events')&& embeddedStackObject.events.hasOwnProperty('data'))
				{
					for each(var event:Object in embeddedStackObject.events.data)
					{
						var time:String = dateFormatter.format(Helpers.formatDate(event.timestamp));
						var eventReason:String = "";
						if(event.hasOwnProperty('resource_status_reason'))
						{
							eventReason = event.resource_status_reason;
						}
						eventsList.addItem({time: time,
											type: event.resource_type,
											logicalId: event.logical_resource_id,
											physicalId: event.physical_resource_id,
											status: event.resource_status,
											reason: eventReason});
					}
				}
				
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:DateTimeFormatter id="dateFormatter" dateTimePattern="MM/dd/yyyy hh:mm:ss a"/>
	</fx:Declarations>
	
	<s:HGroup id="embeddedStackButtonBar" height="25" paddingLeft="10">
	</s:HGroup>
	<s:BorderContainer height="100%" width="100%" alpha="1" borderVisible="false">
		<components:DetailsBoxTabNavigator id="stackDetails">
			<s:NavigatorContent label="Details" width="100%" height="100%">
				<s:BorderContainer borderVisible="false"  id="details" height="100%" width="100%">
					<s:Scroller width="100%" height="100%">
						<s:viewport>
							<s:HGroup>
								<s:Form>
									<s:layout>
										<s:FormLayout gap="-7"/>
									</s:layout>
									<s:FormItem label="Stack Name:">
										<mx:Text text="{embeddedStackObject.stack.stack_name}"/>
									</s:FormItem>
									<s:FormItem label="Stack ID:">
										<mx:Text text="{embeddedStackObject.stack.stack_id}"/>
									</s:FormItem>
									<s:FormItem label="Status:">
										<mx:Text text="{embeddedStackObject.stack.stack_status}"/>
									</s:FormItem>
									<s:FormItem label="Status Reason:" visible="{stackStatusReasonVisible}" includeInLayout="{stackStatusReasonVisible}">
										<mx:Text text="{stackStatusReason}"/>
									</s:FormItem>
									<s:FormItem label="Creation Date:">
										<mx:Text id="creationDate"/>
									</s:FormItem>
								</s:Form>
							</s:HGroup>
						</s:viewport>
					</s:Scroller>
				</s:BorderContainer>
			</s:NavigatorContent>
			<s:NavigatorContent label="Outputs" width="100%" height="100%">
				<s:VGroup width="100%" height="100%" paddingLeft="10" paddingRight="10">
					<s:DataGrid id="outputsDataGrid" width="100%" height="100%" dataProvider="{outputsList}">
						<s:columns>
							<s:ArrayList id="outputsGridColumns">
								<s:GridColumn headerText="Key" dataField="key"/>
								<s:GridColumn headerText="Description" dataField="description"/>
								<s:GridColumn headerText="Value" dataField="value"/>
							</s:ArrayList>
						</s:columns>
					</s:DataGrid>
				</s:VGroup>
			</s:NavigatorContent>
			<s:NavigatorContent label="Resources" width="100%" height="100%">
				<s:VGroup width="100%" height="100%" paddingLeft="10" paddingRight="10">
					<s:DataGrid id="resourcesDataGrid" width="100%" height="100%" dataProvider="{resourcesList}">
						<s:columns>
							<s:ArrayList id="resourcesGridColumns">
								<s:GridColumn headerText="Logical ID" dataField="logicalId"/>
								<s:GridColumn headerText="PhysicalId" dataField="physicalId"/>
								<s:GridColumn headerText="Type" dataField="type"/>
								<s:GridColumn headerText="Status" dataField="status"/>
								<s:GridColumn headerText="Reason" dataField="reason"/>
							</s:ArrayList>
						</s:columns>
					</s:DataGrid>
				</s:VGroup>
			</s:NavigatorContent>
			<s:NavigatorContent label="Events" width="100%" height="100%">
				<s:VGroup width="100%" height="100%" paddingLeft="10" paddingRight="10">
					<s:DataGrid id="eventsDataGrid" width="100%" height="100%" dataProvider="{eventsList}" variableRowHeight="true">
						<s:columns>
							<s:ArrayList id="eventsGridColumns">
								<s:GridColumn headerText="Time" dataField="time" width="100"/>
								<s:GridColumn headerText="Type" dataField="type"/>
								<s:GridColumn headerText="Logical ID" dataField="logicalId"/>
								<s:GridColumn headerText="Physical ID" dataField="physicalId" width="300"/>
								<s:GridColumn headerText="Status" dataField="status"/>
								<s:GridColumn headerText="Reason" dataField="reason"/>
							</s:ArrayList>
						</s:columns>
					</s:DataGrid>
				</s:VGroup>
			</s:NavigatorContent>
			<s:NavigatorContent label="Template" width="100%" height="100%">
				<s:TextArea id="templatText" width="100%" height="100%" text="{embeddedStackObject.template}"/>
			</s:NavigatorContent>
			<s:NavigatorContent label="Parameters" width="100%" height="100%">
				<s:VGroup width="100%" height="100%" paddingLeft="10" paddingRight="10">
					<s:DataGrid id="parametersDataGrid" width="100%" height="100%" dataProvider="{parametersList}">
						<s:columns>
							<s:ArrayList id="parametersGridColumns">
								<s:GridColumn headerText="Name" dataField="name"/>
								<s:GridColumn headerText="Value" dataField="value"/>
							</s:ArrayList>
						</s:columns>
					</s:DataGrid>
				</s:VGroup>
			</s:NavigatorContent>
		</components:DetailsBoxTabNavigator>
	</s:BorderContainer>
</components:ObjectManagementDetailsBox>