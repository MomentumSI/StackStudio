<?xml version="1.0" encoding="utf-8"?>
<wizard:WizardWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="780" height="526"
		 creationComplete="creationCompleteHandler(event)"
		 wizardType="{ResourceTypeLabel.BEANSTALK}"
		 xmlns:diagrammer="fr.kapit.diagrammer.base.uicomponent.*" 
		 xmlns:components="com.momentumsi.c9.components.*"
		 xmlns:wizard="com.momentumsi.c9.components.wizard.*"
		 xmlns:services="com.momentumsi.c9.services.*" xmlns:resources="com.momentumsi.c9.models.resources.*">
	
	<fx:Metadata>
		[Event(name="createEnvironmentResult", type="com.momentumsi.c9.events.beanstalk.CreateEnvironmentResultEvent")]
	</fx:Metadata>

	
	<fx:Script>
		<![CDATA[
			import com.maccherone.json.JSON;
			import com.momentumsi.c9.components.s3.SimpleStorageWizard;
			import com.momentumsi.c9.constants.AlertMessage;
			import com.momentumsi.c9.constants.ImagePath;
			import com.momentumsi.c9.constants.ResourceType;
			import com.momentumsi.c9.constants.ResourceTypeLabel;
			import com.momentumsi.c9.events.beanstalk.*;
			import com.momentumsi.c9.events.storage.CreateBucketResultEvent;
			import com.momentumsi.c9.events.storage.DescribeBucketsFaultEvent;
			import com.momentumsi.c9.events.storage.DescribeBucketsResultEvent;
			import com.momentumsi.c9.models.CloudAccount;
			import com.momentumsi.c9.models.Element;
			import com.momentumsi.c9.models.resources.ElasticBeanstalkApplication;
			import com.momentumsi.c9.models.resources.ElasticBeanstalkApplicationVersion;
			import com.momentumsi.c9.models.resources.ElasticBeanstalkConfigurationTemplate;
			import com.momentumsi.c9.models.resources.ElasticBeanstalkEnvironment;
			import com.momentumsi.c9.representers.BeanstalkApplicationRepresenter;
			import com.momentumsi.c9.utils.Helpers;
			import com.momentumsi.c9.utils.IntrinsicFunctionUtil;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.events.MoveEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.StringUtil;
			
			import spark.events.IndexChangeEvent;

			[Bindable]
			private var fileRef:FileReference;
			[Bindable]
			private var keyPairCollection:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var selectedContainer:String;
			private var selectedFile:String;
			private var selectedBucket:String;
			private var allowedContainerFileTypes:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var consumptionCost:String = "N/A";
			private var applicationElement:ElasticBeanstalkApplication;
			private var environmentElement:ElasticBeanstalkEnvironment;
			private var appVersion:ElasticBeanstalkApplicationVersion;
			private var configurationTemplate:ElasticBeanstalkConfigurationTemplate;
			[Bindable]
			public var newEnvironmentLaunch:Boolean = false;
			[Bindable]
			private var loadingResources:Boolean = true;
			[Bindable]
			private var uploadingFile:Boolean = false;
			[Bindable]
			public var applicationRepresenter:BeanstalkApplicationRepresenter;
			private var urlAvailable:Boolean = false; 
			[Bindable]
			private var buckets:ArrayCollection = new ArrayCollection();
						
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				beanstalkService.getBeanstalkResources();
				setAvailableInstanceTypes();
				instanceType.selectedIndex = 0;
				appVersion = new ElasticBeanstalkApplicationVersion();
				
				if(newEnvironmentLaunch)
				{
					currentState = "environmentState";
				}else{
					currentState = "defaultState";
					creationStack.selectedIndex = 0;
				} 
				
				PopUpManager.centerPopUp(this);
			}
			
			override public function applyConfigurations():void
			{
				if(element.id != null)
				{
					applicationElement = new ElasticBeanstalkApplication(element);
					applicationName.text = applicationElement.name;
					applicationDescription.text = applicationElement.description;
					appVersion = applicationElement.applicationVersions.getItemAt(0) as ElasticBeanstalkApplicationVersion;
					if(applicationElement.configurationTemplates.length > 0)
					{
						configurationTemplate = applicationElement.configurationTemplates.getItemAt(0) as ElasticBeanstalkConfigurationTemplate;
					}
					var holder:Element = projectVersion.getElementByReference(ResourceType.BEANSTALK_ENV, "ApplicationName", applicationElement.name);
					if(holder != null)
					{
						launchNewEnvironment.selected = true;
						environmentElement = new ElasticBeanstalkEnvironment(holder);
						environmentName.text = environmentElement.name;
						environmentDescription.text = environmentElement.description;
						environmentURL.text = environmentElement.cname;
						if(environmentElement.solutionStackName != null)
						{
							setComboBoxSelection(environmentElement.instanceType, instanceType, "type");
							emailAddress.text = environmentElement.email;
							
							//Check for results that have come back
							if(beanstalkService.solutionStacks.length > 0)
							{
								if(!(environmentElement.keyName is String))
								{
									beanstalkService.keyPairs.addItemAt(environmentElement.keyName, 1);
								}
								setComboBoxSelection(environmentElement.keyName, keyPairsCB, "name");
								setComboBoxSelection(environmentElement.solutionStackName, containerType, "SolutionStackName");
							}
						}else{
							setComboBoxSelection(configurationTemplate.instanceType, instanceType, "type");
							emailAddress.text = configurationTemplate.email;
							if(beanstalkService.solutionStacks.length > 0)
							{
								if(!(configurationTemplate.keyName is String))
								{
									beanstalkService.keyPairs.addItemAt(configurationTemplate.keyName, 1);
								}
								setComboBoxSelection(configurationTemplate.keyName, keyPairsCB, "name");
								setComboBoxSelection(configurationTemplate.solutionStackName, containerType, "SolutionStackName");
							}
						}
					}else{
						launchNewEnvironment.selected = false;
					}
				}
			}
			
			protected function setConsumptionCost():void
			{
				if(instanceType.selectedIndex != -1 && cloudAccount.cloud_provider == CloudAccount.AMAZON)
				{
					var found:Boolean = false;
					for each(var price:Object in beanstalkService.prices)
					{
						price = price.price;
						if(!found)
						{
							if(instanceType.selectedItem.type == price.name)
							{
								found = true;
								consumptionCost = "$" + (price.effective_price as Number).toFixed(2) + "/" + price.properties.denominator;
							}
						}
					}
					if(!found)
					{
						consumptionCost = "N/A";
					}
				}else
				{
					consumptionCost = "N/A";
				}
			}

			protected function next_clickHandler(event:MouseEvent):void
			{
				cnameUnavailableAlert.visible = false;
				var alert:Boolean = false;
				
				if(creationStack.selectedChild == applicationDetails)
				{
					if(applicationName.text.replace(/\s/g,"") == "")
					{
						applicationNameAlert.text = AlertMessage.INVALID;
						applicationNameAlert.visible = true;
						alert = true;
					}
				}else{
					if(Helpers.validateAlphanumeric(applicationName.text))
					{
						if(objectManagementCreate)
						{
							applicationNameAlert.visible = false;						
						}else
						{
							if(projectVersion.validateUniqueName(applicationName.text, element))
							{
								applicationNameAlert.visible = false;
							}else
							{
								applicationNameAlert.text = AlertMessage.NOT_UNIQUE;
								applicationNameAlert.visible = true;
								alert = true;
							}
						}
					}else
					{
						applicationNameAlert.text = AlertMessage.NOTALPHANUMERIC;
						applicationNameAlert.visible = true;
						alert = true;
					}
				}
				if(creationStack.selectedChild == applicationDetails && selectBucketRB.selected == true)
				{
					if(!(bucketList.selectedItem != null && selectedFile != null))
					{
						chooseApplicationAlert.visible = true;
						alert = true;
					}
				}else{
					chooseApplicationAlert.visible = false;
				}
				if(creationStack.selectedChild == environmentDetails)
				{
					setConsumptionCost();
					if(launchNewEnvironment.selected == false)
					{
						selectedContainer = "None";
						creationStack.selectedChild = reviewContent;
						alert = true;
					}else{
						if(!urlAvailable)
						{
							dnsCheckHG.visible=true;
							dnsCheckHG.includeInLayout=true;
							beanstalkService.checkDnsAvailability(environmentURL.text);
							return;
						}
					}
				}
				
				if(!alert)
				{
					creationStack.selectedIndex++;
				}
			}

			protected function prev_clickHandler(event:MouseEvent):void
			{
				if(creationStack.selectedIndex == 3 && launchNewEnvironment.selected == false)
				{
					creationStack.selectedIndex = 1;
					return;
				}
				creationStack.selectedIndex = creationStack.selectedIndex - 1;
			}
			
			private function closeHandler():void
			{
				PopUpManager.removePopUp(this);
			}


			protected function createApplication_clickHandler(event:MouseEvent):void
			{
				buttonGroup.createButton.label = "Saving";
				buttonGroup.createButton.enabled = false;
				
				if(applicationElement == null)
				{
					applicationElement = new ElasticBeanstalkApplication();
				}
				applicationElement.name = applicationName.text;
				applicationElement.description = applicationDescription.text;
				if(selectedFile != null)
				{
					appVersion.s3Key = selectedFile;
				}
				applicationElement.addAppVersion(appVersion);
				
				if(launchNewEnvironment.selected)
				{
					if(environmentElement == null)
					{
						environmentElement = new ElasticBeanstalkEnvironment();
					}
					environmentElement.name = environmentName.text;
					environmentElement.description = environmentDescription.text;
					environmentElement.cname = environmentURL.text;
					if(configurationTemplate == null)
					{
						//0 index is default value of None
						if(keyPairsCB.selectedIndex == 0 || keyPairsCB.selectedIndex == -1)
						{
							environmentElement.keyName = null;
						}else{
							environmentElement.keyName = keyPairsCB.selectedItem.name;
						}
						environmentElement.instanceType = instanceType.selectedLabel;
						environmentElement.email = emailAddress.text;
						environmentElement.appHealthCheck = healthCheckTI.text;
						environmentElement.solutionStackName = selectedContainer;
					}else{
						environmentElement.templateName = configurationTemplate.templateName;
					}
					environmentElement.applicationName = applicationElement.name;
					
					if(!objectManagementCreate)
					{
						if(environmentElement.projectId == null)
						{
							environmentElement.projectId = element.projectId;
						}
						environmentElement.save(projectVersion);
					}	
				}
				if(configurationTemplate != null)
				{
					//0 index is default value of None
					if(keyPairsCB.selectedIndex == 0)
					{
						configurationTemplate.keyName = null;
					}else{
						configurationTemplate.keyName = keyPairsCB.selectedItem;
					}
					configurationTemplate.instanceType = instanceType.selectedLabel;
					configurationTemplate.email = emailAddress.text;
					configurationTemplate.appHealthCheck = healthCheckTI.text;
					configurationTemplate.solutionStackName = containerType.selectedLabel;
					applicationElement.addConfigTemplate(configurationTemplate);
				}
				if(fileRef != null)
				{
					uploadingFile = true;
					beanstalkService.uploadApplication(fileRef, selectedBucket);
					beanstalkService.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA, fileUpload_completeHandler);
				}else{
					if(objectManagementCreate)
					{
						beanstalkService.createApplication(applicationName.text, applicationElement.attributes, environmentName.text, environmentElement.attributes);
					}else{			
						saveElement(applicationName.text, applicationElement.properties);
						//createVariants(applicationName.text, statesToApply.ignoredEnvironments);
					}
				}
			}
			
			private var _selectedAppButton:Button;
			protected function chooseApplicationButton_clickHandler(event:MouseEvent):void
			{
				fileRef = new FileReference();
				_selectedAppButton = event.target as Button;
				
				var appFilter:FileFilter = new FileFilter("*.zip;*.war", "*.zip;*.war");
				
				fileRef.addEventListener(Event.SELECT, uploadSelectHandler);
				//fileRef.addEventListener(Event.COMPLETE, completeHandler);
				try
				{
					var success:Boolean = fileRef.browse([appFilter]);
				}
				catch (error:Error)
				{
					Alert.show("Unable to browse for files.");
				}
			}
			
			protected function uploadSelectHandler(event:Event):void
			{
				trace(fileRef.type);
				/* if(fileRef.type == '.war' || fileRef.type == '.zip')
				{ */
					fileName.text = fileRef.name;
					unsupportedTypeAlert.visible = false;
					try
					{
						_selectedAppButton.label = "Loading File";
						_selectedAppButton.enabled = false;
						buttonGroup.nextButton.enabled = false;
						
						fileRef.addEventListener(ProgressEvent.PROGRESS, uploadProgress_handler);
						fileRef.addEventListener(IOErrorEvent.IO_ERROR, uploadFailed_handler);
						fileRef.load();
					} catch (error:Error)
					{
						Alert.show("Unable to upload file.");
						trace(error);
					}
				/* } else{
					selectedFile = null;
					fileRef = null;
					unsupportedTypeAlert.visible = true;
				}  */
			}
			
			private function uploadFailed_handler(event:IOErrorEvent):void
			{
				selectedFile = null;
				_selectedAppButton.label = "Choose File";
				_selectedAppButton.enabled = true;
				buttonGroup.nextButton.enabled = true;
				Alert.show("Unable to load file.", event.type);
				trace(event.text);
			}
			
			private function uploadProgress_handler(event:ProgressEvent):void
			{
				trace("Bytes loaded: " + event.bytesLoaded);
				trace("Total bytes: " + event.bytesTotal);
				if(event.bytesLoaded == event.bytesTotal)
				{
					selectedFile = fileName.text;
					_selectedAppButton.label = "Choose File";
					_selectedAppButton.enabled = true;
					buttonGroup.nextButton.enabled = true;
				}
			}
			
			protected function newConfigTemplate_clickHandler(event:MouseEvent):void
			{
				var templateConfig:BeanstalkConfigurationTemplate = new BeanstalkConfigurationTemplate();
				PopUpManager.addPopUp(templateConfig, UIComponent(parentApplication), true);
				templateConfig.parentWizard = this;
			}
			
			private function fileUpload_completeHandler(event:DataEvent):void
			{
				if(objectManagementCreate)
				{
					uploadLabel.text = "Creating application...";
					beanstalkService.createApplication(applicationName.text, applicationElement.attributes, environmentName.text, environmentElement.attributes);
				}else{
					uploadLabel.text = "Saving configurations...";
					saveElement(applicationName.text, applicationElement.properties);
					//createVariants(applicationName.text, statesToApply.ignoredEnvironments);
				}
			}
			
			protected function beanstalkService_applicationCreatedHandler(event:Event):void
			{
				uploadingFile = false;
				Helpers.getObjectManagement(this).refreshResourceList();
				PopUpManager.removePopUp(this);
			}
			
			protected function beanstalkService_createApplicationFaultHandler(event:FaultEvent):void
			{
				buttonGroup.createButton.label = "Finish";
				buttonGroup.createButton.enabled = true;
				Alert.show(AlertMessage.UNABLE_TO_CREATE);
				uploadingFile = false;
			}
			
			protected function instanceType_changeHandler(event:ListEvent):void
			{
				setConsumptionCost();
			}
			
			protected function beanstalkService_applicationResourcesSetHandler(event:Event):void
			{
				buckets = beanstalkService.buckets;
				loadingResources = false;
				
				if(!objectManagementCreate)
				{
					applyConfigurations();
				}
			}

			
			protected function bucketList_changeHandler(event:IndexChangeEvent):void
			{
				selectedBucket = bucketList.selectedItem.key;
				if(appVersion == null)
				{
					appVersion = new ElasticBeanstalkApplicationVersion();
				}
				appVersion.s3Bucket = bucketList.selectedItem.key;
				storageService.listBucket(bucketList.selectedItem.key);
			}
			
			protected function bucketItemsList_changeHandler(event:IndexChangeEvent):void
			{
				selectedFile = bucketItemsList.selectedItem.key;
			}
			
			protected function environmentState_nextButtonClickHandler(event:MouseEvent):void
			{
				if(!urlAvailable)
				{
					dnsCheckHG.visible=true;
					dnsCheckHG.includeInLayout=true;
					beanstalkService.checkDnsAvailability(environmentURL.text);
				}
			}
			
			protected function containerType_valueCommitHandler(event:FlexEvent):void
			{
				var cb:ComboBox = event.target as ComboBox;
				selectedContainer = cb.selectedLabel;
				allowedContainerFileTypes = new ArrayCollection(cb.selectedItem.PermittedFileTypes as Array);
				setAvailableInstanceTypes();
			}
			
			private function setAvailableInstanceTypes():void
			{
				if(cloudAccount.cloud_provider == CloudAccount.AMAZON)
				{
					if(selectedContainer == null || selectedContainer.search("32") != -1)
					{
						instanceType.dataProvider = BeanstalkService.AWS_32_INSTANCE_TYPES;
					}else{
						instanceType.dataProvider = BeanstalkService.AWS_64_INSTANCE_TYPES;
					}
				}else{
					instanceType.dataProvider = BeanstalkService.TOPSTACK_INSTANCE_TYPES;
				}
			}
			
			protected function createEnvironment_finishButtonClickHandler(event:MouseEvent):void
			{
				buttonGroup.createButton.label = "Saving";
				buttonGroup.createButton.enabled = false;
				
				if(environmentElement == null)
				{
					environmentElement = new ElasticBeanstalkEnvironment();
				}
				environmentElement.name = environmentName.text;
				environmentElement.description = environmentDescription.text;
				environmentElement.cname = environmentURL.text;
				if(configurationTemplate == null)
				{
					environmentElement.instanceType = instanceType.selectedLabel;
					environmentElement.email = emailAddress.text;
					environmentElement.appHealthCheck = healthCheckTI.text;
					environmentElement.solutionStackName = selectedContainer
				}else{
					environmentElement.templateName = configurationTemplate.templateName;
				}
				environmentElement.applicationName = applicationRepresenter.name;
				
				beanstalkService.createEnvironment(environmentName.text, environmentElement.attributes);
			}
			
			protected function beanstalkService_createEnvironmentFaultHandler(event:CreateEnvironmentFaultEvent):void
			{
				buttonGroup.createButton.label = "Finish";
				buttonGroup.createButton.enabled = true;
			}
			
			protected function beanstalkService_createEnvironmentResultHandler(event:CreateEnvironmentResultEvent):void
			{
				dispatchEvent(new CreateEnvironmentResultEvent(event.result));
			}
			
			protected function keyPairsCB_valueCommitHandler(event:FlexEvent):void
			{
				var cb:ComboBox = event.target as ComboBox;
				if(cb.selectedItem != null && cb.selectedIndex != 0)
				{
					if(environmentElement == null)
					{
						environmentElement = new ElasticBeanstalkEnvironment();
					}
					environmentElement.keyName = cb.selectedItem.name;
				}
			}
			
			protected function beanstalkService_checkDnsAvailabilityResultHandler(event:CheckDnsAvailabilityResultEvent):void
			{
				dnsCheckHG.visible=false;
				dnsCheckHG.includeInLayout=false;
				var alert:Boolean = false;
				if(environmentName.text == "")
				{
					environmentNameAlert.visible = true;
					alert = true;
				}else{
					environmentNameAlert.visible = false;
				}
				if(StringUtil.trim(environmentURL.text) != "")
				{
					if(environmentURL.text.toString().length < 4 || environmentURL.text.toString().length > 63)
					{
						environmentURLAlert.visible = true;
						alert = true;
					}else{
						environmentURLAlert.visible = false;
					}
				}
				
				if(event.available)
				{
					urlAvailable = true;
					creationStack.selectedIndex++;
				}else{
					urlAvailable = false;
					cnameUnavailableAlert.visible = true;
				}
			}
			
			protected function environmentName_textInputHandler(event:TextEvent):void
			{
				urlAvailable = false;
			}
			
			protected function createBucketButton_clickHandler(event:MouseEvent):void
			{
				var storageWizard:SimpleStorageWizard = new SimpleStorageWizard();
				storageWizard.objectManagementCreate = true;
				storageWizard.cloudAccount = cloudAccount;
				storageWizard.addEventListener(CreateBucketResultEvent.RESULT, addNewBucket);
				storageWizard.promptedFromWindow = true
				PopUpManager.addPopUp(storageWizard, UIComponent(parentApplication), true);
			}
			
			private function addNewBucket(event:ResultEvent=null):void
			{
				buckets.addItemAt(event.result, 0);
			}
			
		]]>
	</fx:Script>
	<wizard:states>
		<s:State name="defaultState"/>
		<s:State name="environmentState"/>
	</wizard:states>

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->		
		<s:RadioButtonGroup id="applicationSourceRBG"/>
		
		<services:S3Service id="storageService"
							cloudAccountId="{cloudAccount.id}"
							region="{region}"/>
							
							
		<services:BeanstalkService id="beanstalkService"
								   applicationCreated="beanstalkService_applicationCreatedHandler(event)"
								   createApplicationFault="beanstalkService_createApplicationFaultHandler(event)"
								   applicationResourcesSet="beanstalkService_applicationResourcesSetHandler(event)"
								   createEnvironmentFault="beanstalkService_createEnvironmentFaultHandler(event)"
								   createEnvironmentResult="beanstalkService_createEnvironmentResultHandler(event)"
								   checkDnsAvailabilityResult="beanstalkService_checkDnsAvailabilityResultHandler(event)"
								   cloudAccountId="{cloudAccount.id}"
								   region="{region}"/>
	</fx:Declarations>
	<fx:Binding source="environmentName.text" destination="environmentURL.text"/>
	<s:VGroup height="100%" width="100%" gap="0">
		<wizard:WizardWindowTitle id="beanstalkWizardWindowTitle"
								  resourceImage="{ImagePath.NEW_BEAN}"
								  resourceLabel="{wizardDisplayName}"
								  wizardStack="{creationStack}"
								  includeIn="defaultState"/>
		<wizard:CookieTrail wizardStack="{creationStack}"/>
		<mx:ViewStack id="creationStack" 
					  height="100%" width="100%"
					  creationPolicy="all" 
					  paddingTop="10" paddingLeft="20">
			<s:NavigatorContent id="applicationDetails"
								label="Application Details"
								height="100%" width="100%"
								excludeFrom="environmentState">
				<s:VGroup width="100%" height="100%" 
						  visible="{loadingResources}"
						  includeInLayout="{loadingResources}" 
						  horizontalAlign="center" verticalAlign="middle">
					<s:BusyIndicator width="100" height="100"/>
					<s:Label text="Loading Resources..." fontSize="16"/>
				</s:VGroup>
				<s:VGroup visible="{!loadingResources}"
						  includeInLayout="{!loadingResources}"
						  height="322" width="748">
					<s:Label text="   To create a new application, enter the details of your application below."/>
					<s:Form width="100%"
							textAlign="right">
						<s:layout>
							<s:FormLayout gap="-5"/>
						</s:layout>
						<s:FormItem label="Application Name:">
							<s:HGroup textAlign="left">
								<s:TextInput id="applicationName"
											 maxChars="120"
											 width="200"/>
								<mx:Text id="applicationNameAlert" 
										 color="red" 
										 text="You must specify a name for your application." 
										 visible="false"/>
							</s:HGroup>							
						</s:FormItem>
						<s:FormItem label="Description:">
							<s:HGroup textAlign="left">
								<s:TextInput id="applicationDescription"
											 maxChars="200"
											 width="350"/>
								<s:Label text="(optional, 200 char maximum)" 
										 enabled="false"/>
							</s:HGroup>
						</s:FormItem>
						<s:FormItem id="containerTypeFI"
									label="Container Type:">
							<mx:ComboBox id="containerType"
										 labelField="SolutionStackName"
										 dataProvider="{beanstalkService.solutionStacks}"
										 valueCommit="containerType_valueCommitHandler(event)"
										 width="387" 
										 textAlign="left"/>
						</s:FormItem>
						<s:FormItem width="738" height="139" label="Application Source:">
							<s:VGroup textAlign="left">
								<s:RadioButton id="sampleApp"
											   group="{applicationSourceRBG}"
											   label="Use the sample application"
											   selected="true"/>
								<s:VGroup>									
									<s:RadioButton id="selectBucketRB"
												   label="Select Existing S3 File"
												   group="{applicationSourceRBG}"/>
									<s:VGroup gap="-5"
											  enabled="{selectBucketRB.selected == true}">
										<s:FormItem label="Bucket:">
											<s:HGroup>
												<s:DropDownList id="bucketList" width="200"
																prompt="Select Bucket"
																dataProvider="{buckets}"
																labelField="key"
																change="bucketList_changeHandler(event)"/>
												<s:Button id="createBucketButton"
														  label="Create Bucket"
														  click="createBucketButton_clickHandler(event)"/>
											</s:HGroup>
										</s:FormItem>
										<s:FormItem label="Item:"
													enabled="{bucketList.selectedItem != null}">
											<s:VGroup>
												<s:HGroup>
													<s:RadioButton id="bucketItemRB"
																   selected="true"
																   groupName="itemSelectionGroup"/>
													<s:DropDownList id="bucketItemsList"
																	width="213"
																	enabled="{bucketItemRB.selected}"
																	prompt="Select File"
																	change="bucketItemsList_changeHandler(event)"
																	labelField="key"
																	dataProvider="{storageService.bucketContents}"/>
												</s:HGroup>
												<s:HGroup verticalAlign="middle">
													<s:RadioButton id="localItemRB"
																   groupName="itemSelectionGroup"/>
													<s:Button id="chooseApplicationButton"
															  enabled="{localItemRB.selected}"
															  label="Choose File"
															  toolTip="Select a new file to upload into selected bucket."
															  click="chooseApplicationButton_clickHandler(event)"/>
													<s:Label id="fileName"/>
												</s:HGroup>
												<s:Label id="unsupportedTypeAlert" 
														 text="File must be of type .war or .zip"
														 color="red" 
														 visible="false"/>
											</s:VGroup>
										</s:FormItem>
									</s:VGroup>
								</s:VGroup>
								<mx:Text id="chooseApplicationAlert" 
										 color="red" 
										 visible="false"
										 text="Please choose a file or select 'Use Sample Application'"/>
							</s:VGroup>
						</s:FormItem>
					</s:Form>
				</s:VGroup>
			</s:NavigatorContent>
			<s:NavigatorContent id="environmentDetails"
								height="100%" width="100%"
								label="Environment Details">
				<s:VGroup width="100%" height="100%" 
						  visible="{loadingResources}"
						  includeInLayout="{loadingResources}"
						  includeIn="environmentState"
						  horizontalAlign="center" verticalAlign="middle">
					<s:BusyIndicator width="100" height="100"/>
					<s:Label text="Loading Resources..." fontSize="16"/>
				</s:VGroup>
				<s:VGroup id="environmentDetailsVG"
						  visible.environmentState="{!loadingResources}"
						  includeInLayout.environmentState="{!loadingResources}" 
						  width="100%" height="100%">
					<mx:Text text="Enter the details of your environment below. If you choose to not launch an environment now, no details are needed. You can always launch environments after this application has been created." 
							 width="100%"/>
					<s:Form id="environmentDetailsFrom"
							textAlign="right"
							width="755">
						<s:layout>
							<s:FormLayout gap.environmentState="-5"/>
						</s:layout>
						<s:FormItem includeIn="defaultState"
									label="Environment:">
							<s:HGroup textAlign="left">
								<s:CheckBox id="launchNewEnvironment" 
											selected="true"/>
								<mx:Text text="Launch a new environment running this application"/>
							</s:HGroup>
						</s:FormItem>
						<s:FormItem label="Name:" 
									enabled="{launchNewEnvironment.selected == true}">
							<s:HGroup textAlign="left">
								<s:TextInput id="environmentName"
											 textInput="environmentName_textInputHandler(event)"
											 maxChars="120" 
											 width="250"/>
								<mx:Text id="environmentNameAlert"
										 color="red" 
										 visible="false" 
										 text="You must specify a name for your environment."/>
							</s:HGroup>
						</s:FormItem>
						<s:FormItem label="URL:" enabled="{launchNewEnvironment.selected == true}">
							<s:VGroup>
								<s:HGroup textAlign="left">
									<mx:Text text="http://"/>
									<s:TextInput id="environmentURL"
												 textInput="environmentName_textInputHandler(event)"
												 prompt="(optional)"
												 width="350"/>
									<s:Label id="envUrlDomain"
											 visible="{cloudAccount.cloud_provider == CloudAccount.AMAZON}"
											 includeInLayout="{cloudAccount.cloud_provider == CloudAccount.AMAZON}"
											 text=".elasticbeanstalk.com"/>
								</s:HGroup>
								<s:HGroup verticalAlign="middle">
									<s:Label id="environmentURLAlert" 
											 color="red"
											 visible="false"
											 includeInLayout="{environmentURLAlert.visible}"
											 text="Invalid Input."/>
									<s:Label id="cnameUnavailableAlert" 
											 color="red"
											 visible="false"
											 includeInLayout="{cnameUnavailableAlert.visible}"
											 text="Url is not available."/>
									<s:HGroup id="dnsCheckHG"
											  visible="false"
											  includeInLayout="false"
											  verticalAlign="middle">
										<s:BusyIndicator id="dnsCheckLoader"/>
										<s:Label id="dnsCheckLoaderLabel"
												 text="Checking if url is available.."/>
									</s:HGroup>
								</s:HGroup>
							</s:VGroup>
						</s:FormItem>
						<s:FormItem label="Description:" 
									enabled="{launchNewEnvironment.selected == true}">
							<s:HGroup textAlign="left">
								<s:TextInput id="environmentDescription" 
											 maxChars="200"
											 width="400"/>
								<s:Label fontSize="10"
										 text="(optional, 200 char maximium)" 
										 enabled="false"/>
							</s:HGroup>
						</s:FormItem>
						<s:FormItem id="containerTypeEnvFI"
									label="Container Type:"
									includeIn="environmentState">
							<mx:ComboBox id="containerType2"
										 labelField="SolutionStackName"
										 dataProvider="{beanstalkService.solutionStacks}"
										 valueCommit="containerType_valueCommitHandler(event)"
										 width="387" 
										 textAlign="left"/>
						</s:FormItem>
						<s:FormItem id="versionFI"
									includeIn="environmentState"
									width="738" height="139"
									label="Version:">
							<s:VGroup textAlign="left">
								<s:HGroup verticalAlign="middle">
									<s:RadioButton id="existingVersionRB"
												   groupName="versionSourceRBG"
												   label="Select existing application version"
												   selected="true"/>
									<s:FormItem enabled="{existingVersionRB.selected}">
										<s:DropDownList id="versionsList"
														selectedIndex="0"
														dataProvider="{applicationRepresenter.versionsCollection}"/>
									</s:FormItem>
								</s:HGroup>
								<s:HGroup verticalAlign="middle"
										  width="100%">									
									<s:RadioButton id="selectBucketRB2"
												   label="Use a new application version"
												   groupName="versionSourceRBG"/>
									<s:VGroup gap="-5"
											  enabled="{selectBucketRB2.selected == true}">
										<s:FormItem label="Bucket:">
											<s:HGroup>
												<s:DropDownList id="bucketList2" width="200"
																prompt="Select Bucket"
																dataProvider="{buckets}"
																labelField="key"
																change="bucketList_changeHandler(event)"/>
												<s:Button id="createBucketButton2"
														  label="Create Bucket"
														  click="createBucketButton_clickHandler(event)"/>
											</s:HGroup>
										</s:FormItem>
										<s:FormItem width="100%" label="Item:">
											<s:HGroup>
												<s:DropDownList id="bucketItemsList2" width="213"
																prompt="Select File"
																change="bucketItemsList_changeHandler(event)"
																labelField="key"
																dataProvider="{storageService.bucketContents}"/>
												<s:HGroup>
													<s:Button id="chooseApplicationButton2"
															  enabled="{selectBucketRB.selected}"
															  label="Upload File"
															  toolTip="Select a new file to upload into selected bucket."
															  click="chooseApplicationButton_clickHandler(event)"/>	
												</s:HGroup>
												<mx:Text id="fileName2"/>
												<mx:Text id="unsupportedTypeAlert2" 
														 text="File must be of type .war or .zip"
														 color="red" 
														 visible="false"/>
											</s:HGroup>
										</s:FormItem>
									</s:VGroup>
								</s:HGroup>
								<mx:Text id="chooseApplicationAlert2" 
										 color="red" 
										 visible="false"
										 text="Please choose a file or select 'Use Sample Application'"/>
							</s:VGroup>
						</s:FormItem>
					</s:Form>
				</s:VGroup>							
			</s:NavigatorContent>
			<s:NavigatorContent id="configurationDetails" height="100%" width="100%" label="Configuration Details">
				<s:VGroup height="100%" width="100%">
					<mx:Text width="100%" text="We will be launching your environment with the following default configuration. Modify the defaults before launch or just click Next." />
					<s:Form width="100%" textAlign="right">
						<s:FormItem includeIn="environmentState"
									label="Load a Saved Configuration:">
							<mx:ComboBox/>
						</s:FormItem>
						<s:FormItem label="Instance Type:" width="100%">
							<s:HGroup width="100%" textAlign="left">
								<mx:ComboBox id="instanceType" 
											 fontWeight="normal" 
											 labelField="type" 
											 width="161" 
											 change="instanceType_changeHandler(event)"/>
								<s:Image width="16" height="16"
										 source="{ImagePath.HELPER_ICON}"
										 toolTip="The instance type determines the processing power of the servers in your environment."/>
								<mx:Text text="Cost: {consumptionCost}" 
										 visible="{cloudAccount.cloud_provider == CloudAccount.AMAZON}" 
										 includeInLayout="{cloudAccount.cloud_provider == CloudAccount.AMAZON}"/>
							</s:HGroup>
						</s:FormItem>
						<s:FormItem label="Existing Key Pair:" width="100%">
							<s:HGroup textAlign="left">
								<mx:ComboBox id="keyPairsCB" 
											 width="161"
											 dataProvider="{beanstalkService.keyPairs}"
											 labelFunction="{wizardLabelFunction}"
											 fontWeight="normal"
											 valueCommit="keyPairsCB_valueCommitHandler(event)"
											 prompt="Select Key (optional)"/>
								<s:Image width="16" height="16"
										 source="{ImagePath.HELPER_ICON}"
										 toolTip="Key pairs are used to enable remote login to your instances."/>
							</s:HGroup>
						</s:FormItem>
						<s:FormItem label="Email Address:" width="100%">
							<s:HGroup textAlign="left">
								<s:TextInput id="emailAddress"
											 prompt="(optional)"
											 width="230"
											 fontWeight="normal"/>
								<s:Image width="16" height="16"
										 source="{ImagePath.HELPER_ICON}"
										 toolTip="We can notify you via email of any major changes to your environment."/>
							</s:HGroup>
						</s:FormItem>
						<!--<s:FormItem textAlign="left">
							<s:Button label="Create New Template" 
									  click="newConfigTemplate_clickHandler(event)" 
									  visible="{!objectManagementCreate}"/>
						</s:FormItem>-->
						<s:FormItem id="healthCheckFI" 
									label="Application Health Check URL:"
									fontWeight="bold"
									width="100%">
							<s:HGroup>
								<s:TextInput id="healthCheckTI"
											 textAlign="left"
											 text="/"
											 width="230"
											 fontWeight="normal"/>
								<s:Image width="16" height="16"
										 source="{ImagePath.HELPER_ICON}"
										 toolTip="We continually monitor your application to make sure it's available. What relative URL would you like us to monitor?"/>
							</s:HGroup>
						</s:FormItem>
					</s:Form>
				</s:VGroup>
			</s:NavigatorContent>
			<s:NavigatorContent id="reviewContent" height="100%" width="100%" label="Review">
				<s:VGroup gap="-5" width="100%">
					<mx:Text text="Please Review Your Beanstalk Application" y="20" fontWeight="bold"/>
					<s:Form>
						<s:layout>
							<s:FormLayout gap="-5"/>
						</s:layout>
						<s:FormItem label="Application Name:"
									includeIn="defaultState">
							<s:Label text="{applicationName.text}"/>
						</s:FormItem>
						<s:FormItem label="Description:"
									includeIn="defaultState">
							<s:Label text="{applicationDescription.text}"/>
						</s:FormItem>
						<s:FormItem label="Environment:"
									visible="{launchNewEnvironment.selected == false}"
									includeInLayout="{launchNewEnvironment.selected == false}">
							<s:Label text="Environment will not be launched."/>
						</s:FormItem>
						<s:FormItem label="Environment Name:"
									visible="{launchNewEnvironment.selected}"
									includeInLayout="{launchNewEnvironment.selected}">
							<s:Label text="{environmentName.text}"/>
						</s:FormItem>
						<s:FormItem label="Environment Url:"
									visible="{environmentURL.text != ''}"
									includeInLayout="{environmentURL.text != ''}">
							<s:Label text="http://{environmentURL.text}.elacticbeanstalk.com"/>
						</s:FormItem>
						<s:FormItem label="Environment Description:"
									visible="{launchNewEnvironment.selected}"
									includeInLayout="{launchNewEnvironment.selected}">
							<s:Label text="{environmentDescription.text}"/>
						</s:FormItem>
						<s:FormItem label="Container Type:"
									visible="{launchNewEnvironment.selected}"
									includeInLayout="{launchNewEnvironment.selected}">
							<s:Label text="{selectedContainer}"/>
						</s:FormItem>	
					</s:Form>
					<mx:Text text="Cost: {consumptionCost}" y="20" fontWeight="bold" visible="{cloudAccount.cloud_provider == CloudAccount.AMAZON}" includeInLayout="{cloudAccount.cloud_provider == CloudAccount.AMAZON}"/>
					<s:VGroup width="100%" height="100%"
							  visible="{uploadingFile}"
							  includeInLayout="{uploadingFile}" 
							  horizontalAlign="center" verticalAlign="middle">
						<s:BusyIndicator width="100" height="100"/>
						<s:Label id="uploadLabel" text="Uploading File..." fontSize="16"/>
					</s:VGroup>
				</s:VGroup>
			</s:NavigatorContent>
		</mx:ViewStack>
		<wizard:WizardButtonGroup id="buttonGroup"
								  wizardStack="{creationStack}"
								  previousButtonClick="prev_clickHandler(event)"
								  nextButtonClick.environmentState="environmentState_nextButtonClickHandler(event)"
								  nextButtonClick.defaultState="next_clickHandler(event)"
								  finishButtonClick.defaultState="createApplication_clickHandler(event)"
								  finishButtonClick.environmentState="createEnvironment_finishButtonClickHandler(event)"/>
	</s:VGroup>
</wizard:WizardWindow>
