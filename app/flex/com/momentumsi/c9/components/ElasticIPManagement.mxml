<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 initialize="init(event)" width="100%" height="100%">
	
	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.utils.Helpers;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			[Bindable]
			private var addressCollection:ArrayCollection = new ArrayCollection();
			
			protected function allocateAddressButton_clickHandler(event:MouseEvent):void
			{
				var allocateWindow:ElasticIPAllocateAddress = ElasticIPAllocateAddress(PopUpManager.createPopUp( UIComponent(this.parentApplication), ElasticIPAllocateAddress , true));
				allocateWindow.ipManagement = this;
			}
			
			protected function releaseAddressButton_clickHandler(event:MouseEvent):void
			{
				var addr:String = addressGrid.selectedItem.address;
				releaseAddressSvc.send({addr: addr});
			}
			
			protected function associateAddressButton_clickHandler(event:MouseEvent):void
			{
				var associateWindow:ElasticIPAssociateAddress = ElasticIPAssociateAddress(PopUpManager.createPopUp( UIComponent(this.parentApplication), ElasticIPAssociateAddress , true));
				associateWindow.address = addressGrid.selectedItem.address;
			}
			
			protected function diassociateAddressButton_clickHandler(event:MouseEvent):void
			{
				var address:String = addressGrid.selectedItem.address;
				disassociateAddrSvc.send({address: address});
			}
			
			protected function addressGrid_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function describeAddressesSvc_resultHandler(event:ResultEvent):void
			{
				loader.visible = false;
				addressGrid.visible = true;
				addressCollection.removeAll();
				var result:XMLList = Helpers.xmlChildrenFromEvent(event);
				for each(var address:XML in result)
				{
					addressCollection.addItem({address: address.child('public-ip'), owner: address.child('instance-id')});	
				}
				addressGrid.dataProvider = addressCollection;
			}
			
			protected function init(event:FlexEvent):void
			{
				accountId = Helpers.currentAccount(this);
				describeAddressesSvc.send();				
			}
			
			protected function describeAddressesSvc_faultHandler(event:FaultEvent):void
			{
				Alert.show('We were unable to receive the addresses from the server.  Please try again or contact your administrator.');
			}
			
			
			protected function filterButton_clickHandler():void
			{
				addressCollection.filterFunction = _sortRows;
				addressCollection.refresh();
			}
			
			protected function resetButton_clickHandler(event:MouseEvent):void
			{
				keyword.text = "";
				filterButton_clickHandler();
			}

			private function _sortRows(item:Object):Boolean
			{
				var col:String = filterCollection.selectedItem.data as String;
				var key:String = keyword.text;
				
				key = key.toLowerCase();
				
				if (key != "")
				{
					if (col != "any")
					{
						var value:String = item[col];
						value = value.toLowerCase();
						
						if (value.indexOf(key) >= 0)
						{
							return true;
						}
					} else {
						for (var o:String in item)
						{
							value = item[o];
							value = value.toLowerCase();
							if (value.indexOf(key) >= 0)
							{
								return true;
							}
						}
					}
				} else {
					return true;
				}
				
				return false;
			}
			
			protected function releaseAddressSvc_faultHandler(event:FaultEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<fx:int id="accountId"/>
		
		<s:HTTPService id="describeAddressesSvc"
					   url="{Helpers.getHost()}/ec2_accounts/describe_addresses/{accountId}.xml"
					   resultFormat="e4x"
					   method="GET"
					   showBusyCursor="true"
					   result="describeAddressesSvc_resultHandler(event)"
					   fault="describeAddressesSvc_faultHandler(event)"/>
		
		<s:HTTPService id="releaseAddressSvc"
					   url="{Helpers.getHost()}/ec2_accounts/release_address/{accountId}.xml"
					   resultFormat="e4x"
					   method="GET"
					   showBusyCursor="true"
					   result="describeAddressesSvc_resultHandler(event)"
					   fault="releaseAddressSvc_faultHandler(event)"/>
		
		<s:HTTPService id="disassociateAddrSvc"
					   url="{Helpers.getHost()}/ec2_accounts/disassociate_address/{accountId}.xml"
					   resultFormat="e4x"
					   method="GET"
					   showBusyCursor="true"
					   result="describeAddressesSvc_resultHandler(event)"
					   fault="describeAddressesSvc_faultHandler(event)"/>
				
	</fx:Declarations>
	<s:VGroup height="100%" width="100%">
		<s:HGroup paddingTop="5" paddingBottom="5" paddingLeft="5">
			<s:Button id="allocateAddressButton" label="Allocate New Address" click="allocateAddressButton_clickHandler(event)"/>
			<s:Button id="releaseAddressButton" label="Release Address" click="releaseAddressButton_clickHandler(event)"/>
			<s:Button id="associateAddressButton" label="Associate Address" click="associateAddressButton_clickHandler(event)" enabled="{addressGrid.selectedItem != null}"/>
			<s:Button id="diassociateAddressButton" label="Disassociate Address" click="diassociateAddressButton_clickHandler(event)" enabled="{addressGrid.selectedItem != null}"/>
		</s:HGroup>
		<s:HGroup>
			<s:HGroup verticalAlign="middle" paddingLeft="5" paddingBottom="3">
				<s:Label text="Viewing:" fontSize="12"/>
				<mx:ComboBox id="filterCollection" width="149" color="black" selectedIndex="0">
					<s:ArrayCollection>
						<fx:Object data="address" label="Addresses"/>
						<fx:Object data="owner" label="Instance ID"/>
						<fx:Object data="owner" label="Owner"/>
					</s:ArrayCollection>
				</mx:ComboBox>
				<s:TextInput prompt="Search" id="keyword" width="150" height="25"/>
				<s:Button label="Filter" click="filterButton_clickHandler()"/>
				<s:Button label="Reset" click="resetButton_clickHandler(event)"/>
			</s:HGroup>
		</s:HGroup>
		<mx:VDividedBox width="100%" height="100%" color="black">
			<s:BorderContainer width="100%" height="100%">
				<s:Group height="100%" width="100%">
					<s:HGroup height="100%" width="100%" horizontalAlign="center">
						<s:BusyIndicator id="loader" height="150" width="150" visible="true"/>
					</s:HGroup>
					<s:DataGrid id="addressGrid" fontSize="13" click="addressGrid_clickHandler(event)" height="100%" width="100%" visible="false">
						<s:columns>
							<s:ArrayList id="addressGridColumns">
								<s:GridColumn headerText="Address" dataField="address" width="175"/>
								<s:GridColumn headerText="Owner" dataField="owner"/>
							</s:ArrayList>
						</s:columns>
					</s:DataGrid>
				</s:Group>
			</s:BorderContainer>
			<s:BorderContainer height="100%" width="100%">
				<s:VGroup paddingTop="10" paddingLeft="10">
					<s:Label text="Address: {addressGrid.selectedItem.address}" fontSize="16" fontWeight="bold"/>
					<s:Form fontSize="12">
						<s:FormItem label="Owner:">
							<mx:Text text="{addressGrid.selectedItem.owner}"/>
						</s:FormItem>
						<s:FormItem label="Public DNS:">
							<mx:Text text=""/>
						</s:FormItem>
					</s:Form>
				</s:VGroup>
			</s:BorderContainer>
		</mx:VDividedBox>
	</s:VGroup>
</s:Group>
