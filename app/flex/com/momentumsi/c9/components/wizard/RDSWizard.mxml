<?xml version="1.0" encoding="utf-8"?>
<wizard:WizardWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" width="725" height="{buttonGroup.y + 65}"
			   wizardType="{ResourceTypeLabel.RDS}"
			   initialize="init(event)"
			   xmlns:diagrammer="fr.kapit.diagrammer.base.uicomponent.*"
			   xmlns:components="com.momentumsi.c9.components.*" 
			   xmlns:services="com.momentumsi.c9.services.*" xmlns:wizard="com.momentumsi.c9.components.wizard.*">

	<fx:Script>
		<![CDATA[		
			import com.adobe.utils.StringUtil;
			import com.maccherone.json.JSON;
			import com.momentumsi.c9.components.MainBox;
			import com.momentumsi.c9.components.NewPropertyValue;
			import com.momentumsi.c9.components.ParameterGroupCreatePopUp;
			import com.momentumsi.c9.components.cfn.CloudFormationNewParameter;
			import com.momentumsi.c9.components.CreateSecurityGroupWindow;
			import com.momentumsi.c9.constants.AlertMessage;
			import com.momentumsi.c9.constants.ImagePath;
			import com.momentumsi.c9.constants.ResourceType;
			import com.momentumsi.c9.constants.ResourceTypeLabel;
			import com.momentumsi.c9.events.rds.CreateDBInstanceFaultEvent;
			import com.momentumsi.c9.events.rds.CreateDBInstanceResultEvent;
			import com.momentumsi.c9.events.rds.CreateDBSecurityGroupResultEvent;
			import com.momentumsi.c9.models.CloudAccount;
			import com.momentumsi.c9.models.ProjectVariant;
			import com.momentumsi.c9.models.resources.DbInstance;
			import com.momentumsi.c9.utils.Helpers;
			import com.momentumsi.c9.utils.IntrinsicFunctionUtil;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.events.MoveEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;

			[Bindable]
			private var engine:String;
			[Bindable]
			private var licenseModelCollection:ArrayCollection = new ArrayCollection([ {license: "general-public-license"} ]);
			[Bindable]
			private var secGroupCollection:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var awsInstanceClassCollection:ArrayCollection = new ArrayCollection([
				{instanceClass: "db.t1.micro"},
				{instanceClass: "db.m1.small"},
				{instanceClass: "db.m1.large"},
				{instanceClass: "db.m1.xlarge"},
				{instanceClass: "db.m2.xlarge"},
				{instanceClass: "db.m2.2xlarge"},
				{instanceClass: "db.m2.4xlarge"}]);
			
			[Bindable]
			private var eucaInstanceClassCollection:ArrayCollection = new ArrayCollection([ 
				{instanceClass: "db.m1.large"},
				{instanceClass: "db.m1.xlarge"}]);
			
			[Bindable]
			private var openstackInstanceClassCollection:ArrayCollection = new ArrayCollection([ 
				{instanceClass: "db.m1.medium"},
				{instanceClass: "db.m1.large"},
				{instanceClass: "db.m1.xlarge"}]);
			
			[Bindable]
			public var daysOfWeek:ArrayCollection = new ArrayCollection([  {label: "Monday", value: "mon" },
												  	   					   {label: "Tuesday", value: "tue" },
												  	   					   {label: "Wednesday", value: "wed" },
												  	   					   {label: "Thursday", value: "thu" },
												  	   					   {label: "Friday", value: "fri" },
												  	   					   {label: "Saturday", value: "sat" },
												  	   					   {label: "Sunday", value: "sun" }]);
			[Bindable]
			public var engineVersionRequestParam:String;
			[Bindable]
			private var configEngine:String;
			[Bindable]
			private var securityGroupsStr:String;
			[Bindable]
			private var parameterGroup:String;
			[Bindable]
			private var selectedAvailabilityZone:String;
			[Bindable]
			private var zones:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var selectedReplicaCount:int = 0;
			[Bindable]
			private var replicaInstanceIdentifier:String = "";
			[Bindable]
			private var replicaSourceId:int = 0;
			[Bindable] 
			private var passwordDisplay:String;
			[Bindable]
			private var maintenanceWindowString:String;
			[Bindable]
			private var backupWindowString:String;
			public var rdsObject:Object;
			private var currentRdsName:String;
			
			[Bindable]
			private var parameterGroupsCollection:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var securityGroupsList:ArrayList = new ArrayList();
			[Bindable]
			private var engineVersionsCollection:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var consumptionCost:String = "N/A";
			[Bindable]
			private var dbInstance:DbInstance = new DbInstance();
			
			private function init(event:Event):void
			{
				setInitialInstanceClassDataProvider();
					
				rdsService.getRdsResources();
			}
			
			private function setInitialInstanceClassDataProvider():void
			{
				switch(cloudAccount.cloud_provider)
				{
					case CloudAccount.AMAZON:
						instanceClass.defaultDataProvider = awsInstanceClassCollection;
						instanceClass.dataProvider = awsInstanceClassCollection;
						break;
					case CloudAccount.EUCALYPTUS:
						dbInstanceSetupStack.removeElement(managementContent);
						instanceClass.defaultDataProvider = eucaInstanceClassCollection
						instanceClass.dataProvider = eucaInstanceClassCollection;
						break;
					case CloudAccount.OPENSTACK:
					case CloudAccount.ESSEX_OPENSTACK:
						dbInstanceSetupStack.removeElement(managementContent);
						instanceClass.defaultDataProvider = openstackInstanceClassCollection;
						instanceClass.dataProvider = openstackInstanceClassCollection;
						break;
				}
			}
			
			override public function applyConfigurations():void
			{	
				if(element.id == null)
				{
					return;
				}
				dbInstance = new DbInstance(element);
				
				dbInstanceIdentifier.text = dbInstance.name;
				allocatedStorage.text = IntrinsicFunctionUtil.toDisplay(dbInstance.allocatedStorage);
				masterUsername.text = IntrinsicFunctionUtil.toDisplay(dbInstance.masterUsername);
				masterUserPassword.text = IntrinsicFunctionUtil.toDisplay(dbInstance.masterUserPassword);				
				dbName.text = IntrinsicFunctionUtil.toDisplay(dbInstance.dbName);
				dbPort.text = IntrinsicFunctionUtil.toDisplay(dbInstance.port);
				setInputComboBoxSelection(dbInstance.licenseModel, licenseModel, licenseModel.labelField);
				setInputComboBoxSelection(dbInstance.dbInstanceClass, instanceClass, instanceClass.labelField);
				setInputComboBoxSelection(dbInstance.multiAZ, multiAvailZone, multiAvailZone.labelField);
				setComboBoxSelection(dbInstance.backupRetentionPeriod, backupPeriod, backupPeriod.labelField);
				
				if(rdsService.result != null)
				{
					setResourceDependentValues();				
				}
				//TODO: Create function for setting dates
					
				if(dbInstance.preferredBackupWindow != null)
				{
					 backupWindow.selected = true;
					var fullBackup:String = String(dbInstance.preferredBackupWindow);
					var backupTimes:Array = fullBackup.split("-");
					var firstBackupTime:Array = backupTimes[0].split(":");
					var secondBackupTime:Array = backupTimes[1].split(":");
					var hourDuration:Number = (Number(secondBackupTime[0]) - Number(firstBackupTime[0])) % 12;
					var minuteDuration:Number = (Number(secondBackupTime[1]) - Number(firstBackupTime[1])) % 60;
					if(minuteDuration == 30)
					{
						hourDuration = hourDuration + .5;
					}
					setComboBoxSelection(firstBackupTime[0], backupHour);
					setComboBoxSelection(firstBackupTime[1], backupMinute);
					setComboBoxSelection(hourDuration.toString(), backupDuration);
				}
				if(dbInstance.preferredMaintenanceWindow != null)
				{
					 maintenanceWindow.selected = true;
					var fullMaint:String = String(dbInstance.preferredMaintenanceWindow);
					var maintTimes:Array = fullMaint.split("-");
					var firstMaintTime:Array = maintTimes[0].split(":");
					var secondMaintTime:Array = maintTimes[1].split(":");
					var maintHourDuration:Number = (Number(secondMaintTime[1]) - Number(firstMaintTime[1])) % 12;
					var maintMinuteDuration:Number = (Number(secondMaintTime[2]) - Number(firstMaintTime[2])) % 60;
					if(maintMinuteDuration == 30)
					{
						maintHourDuration = maintHourDuration + .5;
					}
					setComboBoxSelection(firstMaintTime[1], maintenanceHour);
					setComboBoxSelection(firstMaintTime[0], maintenanceDay);
					setComboBoxSelection(firstMaintTime[2], maintenanceMinute);
					setComboBoxSelection(maintHourDuration.toString(), maintenanceDuration);
				}
			}
			
			private function setResourceDependentValues():void
			{
				if(dbInstance.engine != null)
				{
					dbEngineSelect_clickHandler(String(dbInstance.engine));
				}
				setInputComboBoxSelection(dbInstance.engineVersion, engineVersion, engineVersion.labelField);
				setComboBoxSelection(dbInstance.dbParameterGroupName, parameterGroups, "id");
				setListSelections(dbInstance.dbSecurityGroups.source, securityGroups, "id", "default");	
			}
			
			protected function setConsumptionCost():void
			{
				if(instanceClass.selectedIndex != -1 && validNumber(allocatedStorage.text) && cloudAccount.cloud_provider == CloudAccount.AMAZON && rdsService.hasOwnProperty('prices'))
				{
					var found:Boolean = false;
					for each(var price:Object in rdsService.prices)
					{
						price = price.price;
						if(!found)
						{
							if(instanceClass.selectedItem.hasOwnProperty("instanceClass") && instanceClass.selectedItem.instanceClass == price.name)
							{
								found = true;
								var multiplier:int = 1;
								if(multiAvailZone.selectedItem == "Yes")
								{
									multiplier = 2;
								}
								/* MOVED TO PARAM COMBOBOX
								if(multiAvailZoneYes.selected)
								{
									multiplier = 2;
								}
								*/
								var priceNumber:Number = (price.effective_price as Number) * multiplier;
								consumptionCost = "$" + priceNumber.toFixed(2) + "/" + price.properties.denominator;
								addStoragePrice();
							}
						}
					}
					if(!found)
					{
						consumptionCost = "N/A";
					}
				}else
				{
					consumptionCost = "N/A";
				}
			}
			
			protected function addStoragePrice():void
			{
				var found:Boolean = false;
				for each(var price:Object in rdsService.prices)
				{
					price = price.price;
					if(!found)
					{
						if("block_storage" == price.name)
						{
							found = true;
							var multiplier:int = 1;
							if(multiAvailZone.selectedItem == "Yes")
							{
								multiplier = 2;
							}
							/* MOVED TO PARAM COMBOBOX
							if(multiAvailZoneYes.selected)
							{
								multiplier = 2;
							}
							*/
							var priceNumber:Number = (price.effective_price as Number) * multiplier;
							consumptionCost = consumptionCost + " + $" + priceNumber.toFixed(2) + "/" + price.properties.denominator;
						}
					}
				}
			}
			
			protected function validNumber(numString:String):Boolean
			{
				var valid:Boolean = false;
				try
				{
					var numInt:int = parseInt(numString);
					if(numInt > 4 && numInt < 1025)
					{
						valid = true;
					}else
					{
						valid = false;
					}
				}catch(e:Error)
				{
					valid = false;
				}
				return valid;
			}
			
			protected function dbEngineSelect_clickHandler(engineName:String):void
			{	
				//Determines which button was clicked.				
				engine = engineName;
				if(engine == "Oracle-Se1")
				{
					licenseModelCollection = new ArrayCollection([ {license: "license-included"}, {license: "bring-your-own-license"} ]);
					licenseModel.selectedIndex = 0;
				}else if(engine == "Oracle-Ee")
				{
					licenseModelCollection = new ArrayCollection([ {license: "bring-your-own-license"} ]);
					licenseModel.selectedIndex = 0;
				}
				var currentEngine:String;
				var selectedEngineVersions:ArrayList = new ArrayList();
				var engineVersionString:String;
				var engineString:String;
				var parseEngine:String;
				var index:int;
				for each(var element:Object in engineVersionsCollection)
				{
					currentEngine = element.Engine;
					currentEngine = StringUtil.trim(currentEngine);
					
					if(currentEngine.toLowerCase() == engine.toLowerCase())
					{
						selectedEngineVersions.addItemAt(element, 0);
					}
				}
				engineVersion.dataProvider = selectedEngineVersions;
				dbInstanceSetupStack.selectedIndex++;
				engineVersion.selectedIndex = 0;
				engineVersion_changeHandler();
				buttonGroup.previousButton.enabled = true;
			}
			
			protected function nextHandler(event:MouseEvent):void
			{
				var alert:Boolean = false;
				
				if(dbInstanceSetupStack.selectedChild == configContent)
				{
					if(licenseModel.selectedIndex == -1)
					{
						licenseModelAlert.visible = true;
						alert = true;
					}else{licenseModelAlert.visible = false}
					
					if(engineVersion.selectedIndex == -1)
					{
						engineVersionAlert.visible = true;
						alert = true;
					}else
					{
						engineVersionAlert.visible = false
						//engineVersionString = engineVersion.text;
					}
					
					if(instanceClass.selectedIndex == -1)
					{
						if(instanceClass.isParameter() || instanceClass.isMapping())
						{
							
						}else
						{
							alert = true;
						}
					}
					
					if(dbInstanceIdentifier.text.replace(" ", "") != "")
					{
						if(Helpers.validateAlphanumeric(dbInstanceIdentifier.text))
						{
							if(objectManagementCreate)
							{
								instanceIdentifierAlert.visible = false;						
							}else
							{
								if(projectVersion.validateUniqueName(dbInstanceIdentifier.text, element))
								{
									instanceIdentifierAlert.visible = false;
								}else
								{
									instanceIdentifierAlert.text = AlertMessage.NOT_UNIQUE;
									instanceIdentifierAlert.visible = true;
									alert = true;
								}
							}
						}else
						{
							instanceIdentifierAlert.text = AlertMessage.NOTALPHANUMERIC;
							instanceIdentifierAlert.visible = true;
							alert = true;
						}
					}else
					{
						instanceIdentifierAlert.text = AlertMessage.INVALID;
						instanceIdentifierAlert.visible = true;
						alert = true;
					}
					
					if(masterUsername.text == "")
					{
						usernameAlert.visible = true;
						alert = true;
					}else
					{
						usernameAlert.visible = false;
					}
					if(masterUserPassword.text == "")
					{
						passwordAlert.visible = true;
						alert = true;
					}else
					{
						passwordAlert.visible = false;
					}
				}else if (dbInstanceSetupStack.selectedChild == additionalConfigContent)
				{
					trace(securityGroups.selectedItem);
					if(securityGroups.selectedItem == null)
					{
						secGroupAlert.visible = true;
						alert = true;
					}else{
						securityGroupsStr = "";
						for each(var sGroup:Object in securityGroups.selectedItems)
						{
							securityGroupsStr = securityGroupsStr + sGroup.id + ",\n"
						}
						securityGroupsStr = securityGroupsStr.substring(0, securityGroupsStr.length - 2);
						secGroupAlert.visible = false;
					}
					if(parameterGroups.selectedItem == null)
					{
						paramGroupAlert.visible = true;
						alert = true;
					}else{
						parameterGroup = parameterGroups.selectedItem.id;
						paramGroupAlert.visible = false;
					}
					/*
					if(availabilityZone.selectedItem == null)
					{
						alert.addItem("true");
						
					}else{
						selectedAvailabilityZone = availabilityZone.selectedItem.label;
					}
					if(readReplicaYes.selected == true)
					{
						try{
							var replicaNumber:int = parseInt(readReplicas.text);
						}
						catch(e:Error)
						{
							
						}
						if(replicaNumber > 0 && replicaNumber < 6)
						{
							selectedReplicaCount = replicaNumber;
							replicaAlert.visible = false;
						}else{
							replicaAlert.visible = true;
							alert.addItem("true");
						}
					}
					*/
				}else if(dbInstanceSetupStack.selectedChild == managementContent)
				{
					getMaintAndBackupWindowForReview();
				}
				
				if(!alert)
				{
					dbInstanceSetupStack.selectedIndex++;
				}
			}


			protected function previous_clickHandler(event:MouseEvent):void
			{
				dbInstanceSetupStack.selectedIndex = dbInstanceSetupStack.selectedIndex - 1;
				if(element == null)
				{
					return;
				}
				if(element.id != null && dbInstanceSetupStack.selectedIndex == 1)
				{
					buttonGroup.previousButton.enabled = false;
				}
				
			}

			protected function createDBInstance_clickHandler(event:MouseEvent):void
			{
				buttonGroup.createButton.label = "Saving";
				buttonGroup.createButton.enabled = false;
				
				dbInstance.name = dbInstanceIdentifier.text;
				//dbInstance.licenseModel = licenseModel.selectedItem.license;
				dbInstance.licenseModel = licenseModel.text;
				dbInstance.masterUsername = checkForReference(masterUsername.text);
				dbInstance.masterUserPassword = checkForReference(masterUserPassword.text);
				dbInstance.dbInstanceClass = instanceClass.text;
				dbInstance.allocatedStorage = checkForReference(allocatedStorage.text);
				dbInstance.engine = engine;
				dbInstance.port = checkForReference(dbPort.text);
				dbInstance.dbName = checkForReference(dbName.text);
				dbInstance.availabilityZone = checkForReference(selectedAvailabilityZone);
				if(dbInstance.multiAZ == null)
				{
					if(multiAvailZone.selectedItem == "Yes")
					{
						dbInstance.multiAZ = "true";
					}else if(multiAvailZone.selectedItem == "No")
					{
						dbInstance.multiAZ = "false";
					}else
					{
						dbInstance.multiAZ = checkForReference(multiAvailZone.text);
					}
				}
				dbInstance.backupRetentionPeriod = checkForReference(backupPeriod.selectedLabel);
				dbInstance.selectedSecurityGroups = securityGroups.selectedItems;
				dbInstance.dbParameterGroupName = parameterGroups.selectedLabel;
				dbInstance.engineVersion = engineVersion.text;
				//TODO: Set windows
				dbInstance.preferredBackupWindow = backupWindowString;
				dbInstance.preferredMaintenanceWindow = maintenanceWindowString;
				
				if(objectManagementCreate)
				{
					rdsService.createDatabase(dbInstance.name, dbInstance.attributes);
				}else{
					saveElement(dbInstanceIdentifier.text, dbInstance.properties);
					/* STATES APPLY REMOVED
					var applicableEnvironments:ArrayCollection;
					if(element.id == null)
					{
						applicableEnvironments = statesToApply.ignoredEnvironments;
					}else{
						applicableEnvironments = statesToApply.appliedEnvironments;
					}
					createVariants(dbInstanceIdentifier.text, applicableEnvironments);
					*/
				}			
			}

			protected function dbInstanceSetupStack_changeHandler(event:IndexChangedEvent):void
			{
				if(dbInstanceSetupStack.selectedChild == reviewContent)
				{
					determinePasswordDisplay();
				}
			}
			
			private function getMaintAndBackupWindowForReview():void
			{
				if(backupWindow.selected)
				{
					var bwMinute:int = int(backupMinute.selectedItem);
					var bwHour:int = int(backupHour.selectedItem);
					var bwDurationLength:Number = Number(backupDuration.selectedItem);
					var dwDur:int;
					switch(bwDurationLength)
					{
						case 0.5:
							dwDur = 30;
							break;
						case 1:
							dwDur = 60;
							break;
						case 1.5:
							dwDur = 90;
							break;
						case 2:
							dwDur = 120;
							break;
						case 2.5:
							dwDur = 150;
							break;
						case 3:
							dwDur = 180;
							break;
					}
					var bwEndMinute:int = (bwMinute + dwDur) % 60;
					var bwEndHour:int = (bwHour + int((bwMinute + dwDur) / 60)) % 24;
					var bwDispEndMinute:String = bwEndMinute.toString();
					var bwDispEndHour:String = bwEndHour.toString();
					if(bwEndMinute < 10)
					{
						bwDispEndMinute = "0" + bwEndMinute.toString();
					}
					if(bwEndHour < 10)
					{
						bwDispEndHour = "0" + bwEndHour.toString();
					}

					backupWindowString = backupHour.selectedItem + ":" + backupMinute.selectedItem + "-" + bwDispEndHour + ":" + bwDispEndMinute;
				}else{
					backupWindowString = 'No Preference';
				}
				if(maintenanceWindow.selected == true)
				{
					var mwMinute:int = int(maintenanceMinute.selectedItem);
					var mwHour:int = int(maintenanceHour.selectedItem);
					var mwDurationLength:Number = Number(maintenanceDuration.selectedItem);
					var mwDur:int;
					switch(mwDurationLength)
					{
						case 0.5:
							mwDur = 30;
							break;
						case 1:
							mwDur = 60;
							break;
						case 1.5:
							mwDur = 90;
							break;
						case 2:
							mwDur = 120;
							break;
						case 2.5:
							mwDur = 150;
							break;
						case 3:
							mwDur = 180;
							break;
					}
					var mwEndMinute:int = (mwMinute + mwDur) % 60;
					var mwEndHour:int = (mwHour + int((mwMinute + mwDur) / 60)) % 24;
					var mwDispEndMinute:String = mwEndMinute.toString();
					var mwDispEndHour:String = mwEndHour.toString();
					if(mwEndMinute < 10)
					{
						mwDispEndMinute = "0" + mwEndMinute.toString();
					}
					if(mwEndHour < 10)
					{
						mwDispEndHour = "0" + mwEndHour.toString();
					}
					var mwEndDay:String = maintenanceDay.selectedItem.toString();
					if((Number(mwHour + Number((mwMinute + mwDur) / 60)) / 24) > 1)
					{
						var index:int = maintenanceDay.selectedIndex;
						index++;
						index = index % 7;
						mwEndDay = maintenanceDayCollection.toArray()[index];
					}
					maintenanceWindowString = maintenanceDay.selectedItem + ":" + maintenanceHour.selectedItem + ":" + maintenanceMinute.selectedItem + "-" + mwEndDay + ":" + mwDispEndHour + ":" + mwEndMinute;
				}else{
					maintenanceWindowString = 'No Preference';
				}
			}
			
			
			protected function engineVersion_changeHandler():void
			{
				if(engineVersion.selectedItem == null)
				{
					return;
				}
				
				var selectedVersionParameterGroups:ArrayCollection = new ArrayCollection();
				var paramGroupFamily:String;
				var engineVersionFamily:String;
				for each(var group:Object in parameterGroupsCollection)
				{
					paramGroupFamily = group.family;
					if(engineVersion.selectedItem is Object && engineVersion.selectedItem.hasOwnProperty("DBParameterGroupFamily"))
					{
						engineVersionFamily = engineVersion.selectedItem.DBParameterGroupFamily;
						
						engineVersionFamily = StringUtil.trim(engineVersionFamily);
						if(engineVersionFamily == paramGroupFamily)
						{
							selectedVersionParameterGroups.addItem(group);
						}
					}
				}
				if(selectedVersionParameterGroups.length == 0)
				{
					selectedVersionParameterGroups.addItem({id: "default"});
				}
				parameterGroups.dataProvider = selectedVersionParameterGroups;
				parameterGroups.selectedIndex = 0;
			}
			
			private var securityGroupWindow:CreateSecurityGroupWindow;
			protected function addSercurityGroupButton_clickHandler(event:MouseEvent):void
			{
				//var securityGroupWizard:SecurityGroupWizard = new SecurityGroupWizard();
				//securityGroupWizard.computeSecurityGroups = projectVersion.getResourcesByType(ResourceType.EC2_SECURITY_GROUP);
				securityGroupWindow = new CreateSecurityGroupWindow();
				securityGroupWindow.cloudAccountId = cloudAccount.id;
				securityGroupWindow.addEventListener(CreateDBSecurityGroupResultEvent.RESULT, refreshRdsSecurityGroups);
				PopUpManager.addPopUp(securityGroupWindow, UIComponent(parentApplication), true);
			}
			
			public function refreshRdsSecurityGroups(event:Event):void
			{
				rdsService.getRdsResources();
			}
			
			public function refreshRdsParamGroups():void
			{
				rdsService.getRdsResources();
			}
			
			//Attempted to use for creating new paramter on focus out in text input
			//Not used because every time field was left, new window would pop up
			protected function textInput_focusOutHandler(event:FocusEvent):void
			{
				var textInputField:TextInput = event.currentTarget as TextInput;
				if(textInputField.text.substr(0, 1) == "@")
				{
					var newParam:NewPropertyValue = new NewPropertyValue();
					PopUpManager.addPopUp(newParam, UIComponent(this.parentApplication), true);
					PopUpManager.centerPopUp(newParam);
					newParam.initialize();
					newParam.createDeferredContent();
					newParam.navigator.selectedChild = newParam.parameterContent;
					newParam.newParameterForm.paramName.text = textInputField.text;
				}
			}
			
			private function determinePasswordDisplay():void
			{
				passwordDisplay = "";
				if(hidePassword.selected)
				{
					for(var i:int; i < masterUserPassword.text.length; i++)
					{
						passwordDisplay = passwordDisplay + "*";
					}
				}else{
					passwordDisplay = masterUserPassword.text;
				}
			}
			
			
			protected function objectManagementLaunchSvc_faultHandler(event:FaultEvent):void
			{
				buttonGroup.createButton.label = "Finish";
				buttonGroup.createButton.enabled = true;
			}
			
			protected function comboBox_changeHandler(event:ListEvent):void
			{
				setConsumptionCost();
			}
			
			protected function multiAvailZoneRadioButtons_changeHandler(event:Event):void
			{
				setConsumptionCost();
			}
			
			protected function allocatedStorage_changeHandler(event:TextOperationEvent):void
			{
				setConsumptionCost();
			}
			
			protected function rdsService_dbResourcesSetHandler(event:Event):void
			{
				if(securityGroupWindow != null)
				{
					PopUpManager.removePopUp(securityGroupWindow);
					securityGroupWindow = null;
				}
				busy.visible = false;
				parameterGroupsCollection = rdsService.parameterGroups;
				if(!objectManagementCreate)
				{
					rdsService.securityGroups.addAll(projectVersion.getResourcesByType(ResourceType.DB_SECURITY_GROUP));
				}
				securityGroupsList = new ArrayList(rdsService.securityGroups.toArray());
				if(securityGroupsList.length == 0)
				{
					secGroupAlert.visible = true;
				}
				engineVersionsCollection = rdsService.engineVersions;
				setResourceDependentValues();
				setConsumptionCost();
			}
			
			protected function securityGroups_valueCommitHandler(event:FlexEvent):void
			{				
				dbInstance.selectedSecurityGroups = securityGroups.selectedItems;
			}
			
			protected function instanceClass_changeHandler(event:IndexChangeEvent):void
			{
				setConsumptionCost();
			}
			
			protected function multiAvailZone_changeHandler(event:IndexChangeEvent):void
			{
				setConsumptionCost();
			}
			
			protected function rdsService_dbInstanceCreatedHandler(event:CreateDBInstanceResultEvent):void
			{
				Helpers.getObjectManagement(this).refreshResourceList();
				PopUpManager.removePopUp(this);
			}
			
			protected function rdsService_dbInstanceFailedHandler(event:CreateDBInstanceFaultEvent):void
			{
				buttonGroup.createButton.label = "Finish";
				buttonGroup.createButton.enabled = true;
			}
			
		]]>
	</fx:Script>

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<services:RdsService id="rdsService"
							 cloudAccountId="{cloudAccount.id}"
							 region="{region}"
							 dbInstance="{dbInstance}"
							 dbResourcesSet="rdsService_dbResourcesSetHandler(event)"
							 dbInstanceCreated="rdsService_dbInstanceCreatedHandler(event)"
							 dbInstanceFailed="rdsService_dbInstanceFailedHandler(event)"/>
		
		<fx:Object id="validationObject"/>
		<!--
		<mx:NumberValidator id="allocatedStorageValidator"
						    source="{allocatedStorage}" 
						    property="text"
						    minValue="5"
						    maxValue="1024"
						    domain="int"/>
		-->
		<!--
		<mx:NumberValidator id="portValidator"
						    source="{dbPort}"
						    property="text"
						    domain="int"/>
		-->
		
		<s:RadioButtonGroup id="autoUpgradeRadioButtons"/>
		<s:RadioButtonGroup id="multiAvailZoneRadioButtons" change="multiAvailZoneRadioButtons_changeHandler(event)"/>
		<s:RadioButtonGroup id="maintenanceWindowRadioButtons"/>
		<s:RadioButtonGroup id="backupWindowRadioButtons"/>
		<s:RadioButtonGroup id="readReplicaRadioButtons"/>
					   
	</fx:Declarations>
	<s:VGroup height="100%" width="100%" gap="0">
		<wizard:WizardWindowTitle id="rdsWindowTitle"
								  wizardStack="{dbInstanceSetupStack}"
								  resourceImage="{ImagePath.NEW_RDS}"
								  resourceLabel="{wizardDisplayName}"/>
		<wizard:CookieTrail id="rdsCookieTrail"
							wizardStack="{dbInstanceSetupStack}"/>
		<mx:ViewStack id="dbInstanceSetupStack"
					  width="100%" height="439"
					  paddingLeft="20" paddingTop="10" change="dbInstanceSetupStack_changeHandler(event)" creationPolicy="all">
			<s:NavigatorContent id="engineSelectionContent" label="Engine Selection" height="100%" width="100%">
				<s:VGroup height="100%" width="100%">
					<mx:Text text="To get started, choose a DB engine below." paddingLeft="10"/>
					<s:VGroup width="100%" horizontalAlign="center">
						<s:BorderContainer>
							<s:VGroup id="dbEngines" enabled="{engineVersionsCollection.length > 0}">
								<s:HGroup width="100%">
									<s:Image source="{ImagePath.MYSQL_LOGO}"/>
									<s:VGroup width="249">
										<mx:Text text="MySQL"/>
										<mx:Text text="MySQL Community Edition"/>
									</s:VGroup>
									<s:VGroup verticalAlign="middle" height="100%">
										<s:Button id="mysql" label="Select" click="dbEngineSelect_clickHandler('MySQL')"/>
									</s:VGroup>
								</s:HGroup>
								<s:HGroup visible="{cloudAccount.cloud_provider == CloudAccount.AMAZON}"
										  includeInLayout="{cloudAccount.cloud_provider == CloudAccount.AMAZON}">
									<s:Image source="{ImagePath.ORACLE_LOGO}"/>
									<s:VGroup>
										<mx:Text text="oracle-se1"/>
										<mx:Text text="Oracle Database Standard Edition One"/>
									</s:VGroup>
									<s:VGroup verticalAlign="middle" height="100%">
										<s:Button id="oracleEngineSe1" label="Select" click="dbEngineSelect_clickHandler('Oracle-Se1')"/>
									</s:VGroup>
								</s:HGroup>
								<s:HGroup visible="{cloudAccount.cloud_provider == CloudAccount.AMAZON}"
										  includeInLayout="{cloudAccount.cloud_provider == CloudAccount.AMAZON}">
									<s:Image source="{ImagePath.ORACLE_LOGO}"/>
									<s:VGroup width="249">
										<mx:Text text="oracle-se"/>
										<mx:Text text="Oracle Database Standard Edition"/>
									</s:VGroup>
									<s:VGroup verticalAlign="middle" height="100%">
										<s:Button id="oracleEngineSe" label="Select" click="dbEngineSelect_clickHandler('Oracle-Se')"/>
									</s:VGroup>									
								</s:HGroup>
								<s:HGroup visible="{cloudAccount.cloud_provider == CloudAccount.AMAZON}"
										  includeInLayout="{cloudAccount.cloud_provider == CloudAccount.AMAZON}">
									<s:Image source="{ImagePath.ORACLE_LOGO}"/>
									<s:VGroup width="249">
										<mx:Text text="oracle-ee"/>
										<mx:Text text="Oracle Database Enterprise Edition"/>
									</s:VGroup>
									<s:VGroup verticalAlign="middle" height="100%">
										<s:Button id="oracleEngineEe" label="Select" click="dbEngineSelect_clickHandler('Oracle-Ee')"/>
									</s:VGroup>									
								</s:HGroup>
							</s:VGroup>
						</s:BorderContainer>
					</s:VGroup>
					<s:VGroup id="busy" width="100%" verticalAlign="middle" horizontalAlign="center" visible="true">
						<s:BusyIndicator width="100" height="100"/>
						<s:Label text="Loading Configurations..."/>
					</s:VGroup>
				</s:VGroup>
			</s:NavigatorContent>
			<s:NavigatorContent id="configContent" label="Database Details" width="100%" height="100%">
				<s:VGroup width="100%" height="100%">
					<mx:Text text="To get started, choose a class below."/>
					<mx:Form>
						<mx:FormItem label="Engine:" fontWeight="bold">
							<mx:Text text="{engine}" fontWeight="normal"/>
						</mx:FormItem>
						<mx:FormItem label="License Model:" fontWeight="bold">
							<s:HGroup>
								<components:InputComboBox id="licenseModel"
														  projectVersion="{projectVersion}"
														  dataProvider="{licenseModelCollection}"
														  defaultDataProvider="{licenseModelCollection}"
														  prompt="Select License"
														  selectedIndex="0"
														  width="200"
														  labelField="license"
														  defaultLabelField="license"/>
								<mx:Text id="licenseModelAlert" fontWeight="normal" text="This field is required" color="red" visible="false"/>
							</s:HGroup>
						</mx:FormItem>
						<mx:FormItem label="DB Engine Version:" fontWeight="bold">
							<s:HGroup>
								<components:InputComboBox id="engineVersion" 
														  width="200"
														  labelField="EngineVersion"
														  defaultLabelField="EngineVersion"
														  change="engineVersion_changeHandler()" 
														  prompt="Select One" 
														  dataProvider="{engineVersionsCollection}"
														  defaultDataProvider="{engineVersionsCollection}"/>
								<mx:Text id="engineVersionAlert" fontWeight="normal" text="This field is required" color="red" visible="false"/>
							</s:HGroup>
						</mx:FormItem>
						<mx:FormItem label="DB Instance Class:" fontWeight="bold">
							<s:HGroup>
								<components:InputComboBox id="instanceClass"
														  projectVersion="{projectVersion}"
														  width="200"
														  selectedIndex="0"
														  change="instanceClass_changeHandler(event)"								 
														  prompt="Select One"
														  labelField="instanceClass"
														  defaultLabelField="instanceClass"/>
								<mx:Text text="Cost: {consumptionCost}" fontWeight="normal" visible="{cloudAccount.cloud_provider == CloudAccount.AMAZON}" includeInLayout="{cloudAccount.cloud_provider == CloudAccount.AMAZON}"/>
							</s:HGroup>
						</mx:FormItem>
						<mx:FormItem label="Multi-AZ Deployment:" 
									 fontWeight="bold"
									 visible="{cloudAccount.cloud_provider == CloudAccount.AMAZON}"
									 includeInLayout="{cloudAccount.cloud_provider == CloudAccount.AMAZON}">
							<components:InputComboBox id="multiAvailZone"
													  projectVersion="{projectVersion}"
													  width="200"
													  selectedIndex="1"	
													  change="multiAvailZone_changeHandler(event)"
													  prompt="Select One">
								<components:dataProvider>
									<s:ArrayCollection>
										["Yes", "No"]
									</s:ArrayCollection>
								</components:dataProvider>
								<components:defaultDataProvider>
									<s:ArrayCollection>
										["Yes", "No"]
									</s:ArrayCollection>
								</components:defaultDataProvider>
							</components:InputComboBox>
						</mx:FormItem>
						<mx:FormItem label="Auto Minor Version Upgrade:"
									 fontWeight="bold"
									 visible="{cloudAccount.cloud_provider == CloudAccount.AMAZON}"
									 includeInLayout="{cloudAccount.cloud_provider == CloudAccount.AMAZON}">
							<components:InputComboBox id="autoMinorUpgrade"
													  projectVersion="{projectVersion}"
													  width="200"
													  selectedIndex="1"	
													  prompt="Select One">
								<components:dataProvider>
									<s:ArrayCollection>
										["Yes", "No"]
									</s:ArrayCollection>
								</components:dataProvider>
								<components:defaultDataProvider>
									<s:ArrayCollection>
										["Yes", "No"]
									</s:ArrayCollection>
								</components:defaultDataProvider>
							</components:InputComboBox>
						</mx:FormItem>
					</mx:Form>
					<mx:Text text="Provide the details for your RDS Database Instance."/>
					<mx:Form>
						<mx:FormItem label="DB Instance Identifier*:" fontWeight="bold" toolTip="DB Instance identifier.  This is the unique key that identifies a DB Instance.">
							<s:HGroup>
								<s:TextInput id="dbInstanceIdentifier" width="200" fontWeight="normal"/>
								<mx:Text id="instanceIdentifierAlert" fontWeight="normal" text="This field is required." color="red" visible="false"/>
							</s:HGroup>
						</mx:FormItem>
						<mx:FormItem label="Allocated Storage*:" 
									 fontWeight="bold" 
									 toolTip="Amount of storage to be initially allocated for the database instance, in gigabytes.">
							<s:HGroup>
								<components:InputComboBox id="allocatedStorage"
														  projectVersion="{projectVersion}"
														  width="200"
														  text="5"
														  textInputField="true"/>
								<mx:Text text="GB" fontWeight="normal"/>
								<mx:Text text="(Min: 5 GB, Max: 1024 GB)" fontWeight="normal"/>
							</s:HGroup>
						</mx:FormItem>
						<mx:FormItem label="Master Username*:" fontWeight="bold" toolTip="Name of master user for your DB Instance.">
							<s:HGroup>
								<components:InputComboBox id="masterUsername"
														  projectVersion="{projectVersion}"
														  width="200"
														  textInputField="true"/>
								<mx:Text id="usernameAlert" fontWeight="normal" text="This field is required" color="red" visible="false"/>
							</s:HGroup>
						</mx:FormItem>
						<mx:FormItem label="Master User Password*:" fontWeight="bold" toolTip="Password for the master DB Instance user." width="100%">
							<s:HGroup width="100%">
								<components:InputComboBox id="masterUserPassword"
														  projectVersion="{projectVersion}"
														  width="200"
														  textInputField="true"
														  passwordDisplay="{hidePassword.selected}"/>
								<!--
								<s:TextInput id="masterUserPassword" width="200" color="black"
											 displayAsPassword="{hidePassword.selected}"
											 fontWeight="normal"/>
								-->
								<s:CheckBox id="hidePassword" 
											label="Hide Password"
											fontWeight="normal"/>
								<mx:Text id="passwordAlert" fontWeight="normal" text="This field is required" color="red" visible="false"/>
							</s:HGroup>
						</mx:FormItem>
						<mx:Text id="requiredDBInstanceDetails" text="* denotes required field" color="black"/>
					</mx:Form>
					<mx:Text id="duplicateNameAlert"
							 x="388" y="429"
							 color="red"
							 text="DB Instance name already exists, must be unique." 
							 visible="false"/>
				</s:VGroup>
			</s:NavigatorContent>
			<s:NavigatorContent id="additionalConfigContent" 
								label="Additional Configurations" 
								height="100%" width="100%">
				<s:VGroup height="100%" width="100%">
					<s:Form 
							width="100%" 
							textAlign="right">
						<mx:Text text="Note: If no database name is specified then no initial mysql database will be created on the DB Instance."/>
						<s:FormItem width="100%" label="Database Name:">
							<s:HGroup textAlign="left">
								<components:InputComboBox id="dbName"
														  projectVersion="{projectVersion}"
														  width="200"
														  text="mydb"
														  textInputField="true"/>
							</s:HGroup>
						</s:FormItem>
						<s:FormItem label="Database Port:">
							<s:HGroup>
								<s:TextInput id="dbPort"
											 color="black" 
											 text="3306" 
											 width="81" 
											 fontWeight="normal" 
											 textAlign="left"/>
							</s:HGroup>
						</s:FormItem>
						<s:FormItem label="DB Parameter Group:" fontWeight="bold">
							<s:HGroup>
								<mx:ComboBox id="parameterGroups"
											 color="black"
											 textAlign="left"
											 width="254" 
											 dataProvider="{parameterGroupsCollection}"
											 labelFunction="{wizardLabelFunction}"/>
								<mx:Text id="paramGroupAlert"
										 visible="false"
										 text="Invalid Input." 
										 color="red"/>
							</s:HGroup>
						</s:FormItem>
						<s:FormItem label="DB Security Groups:"
									fontWeight="bold">
							<s:HGroup>
								<s:List id="securityGroups" 
										width="254" 
										allowMultipleSelection="true"
										valueCommit="securityGroups_valueCommitHandler(event)"
										dataProvider="{securityGroupsList}"
										fontWeight="normal"
										labelFunction="{wizardLabelFunction}" 
										textAlign="left"/>
								<s:Button id="addSercurityGroupButton" 
										  width="162"
										  fontWeight="normal"
										  label="Add Security Group"
										  click="addSercurityGroupButton_clickHandler(event)"/>
							</s:HGroup>
						</s:FormItem>
						<s:FormItem fontWeight="bold" color="red">
							<mx:Text id="secGroupAlert" 
									 visible="false"
									 text="Please select security group or create one if none are available."/>
						</s:FormItem>
					</s:Form>
				</s:VGroup>			
			</s:NavigatorContent>
			<s:NavigatorContent id="managementContent" label="Management Options" height="100%" width="100%">
				<s:VGroup>
					<mx:Text text="The number of days for which automated backups are retained.  Setting this parameter to a positive number enables backups." width="100%"/>
					<mx:Text text="The daily time range during which automated backups are created if automated backups are enabled." width="100%"/>
					<mx:Text text="The weekly time range (in UTC) during which system maintenance can occur.&#xd;*Maintenance window cannot conflict with backup window." width="100%"/>
					<s:Form textAlign="right">
						<s:FormItem label="Backup Retention Period:">
							<s:HGroup textAlign="left">
								<mx:ComboBox id="backupPeriod" selectedIndex="1">
									<mx:dataProvider>
										<s:ArrayCollection id="backupPeriodCollection">
											[0, 1, 2 ,3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]
										</s:ArrayCollection>
									</mx:dataProvider>
								</mx:ComboBox>
								<mx:Text text="days"/>
							</s:HGroup>
						</s:FormItem>
						<s:FormItem label="Backup Window:">
							<s:HGroup textAlign="left">
								<s:RadioButton group="{backupWindowRadioButtons}" id="backupNoPreference" label="No Preference" selected="true"/>
								<s:RadioButton group="{backupWindowRadioButtons}" id="backupWindow" label="Select Window"/>
							</s:HGroup>
						</s:FormItem>
						<s:FormItem enabled="{backupWindow.selected == true}">
							<s:VGroup textAlign="left">
								<s:HGroup>
									<mx:Text text="Start Time:"/>
									<mx:ComboBox color="black" id="backupHour" selectedIndex="0">
										<mx:dataProvider>
											<s:ArrayCollection id="backupHourCollection">
												[00,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23]
											</s:ArrayCollection>
										</mx:dataProvider>
									</mx:ComboBox>
									<mx:Text text=":"/>
									<mx:ComboBox color="black" id="backupMinute" selectedIndex="0">
										<mx:dataProvider>
											<s:ArrayCollection id="backupMinuteCollection">
												[00,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,
												31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59]
											</s:ArrayCollection>
										</mx:dataProvider>
									</mx:ComboBox>
									<mx:Text text="UTC"/>
								</s:HGroup>
								<s:HGroup>
									<mx:Text text="Duration:"/>
									<mx:ComboBox color="black" id="backupDuration" selectedIndex="0">
										<mx:dataProvider>
											<s:ArrayCollection id="backupDurationCollection">
												[0.5,1.0,1.5,2.0,2.5,3.0]
											</s:ArrayCollection>
										</mx:dataProvider>
									</mx:ComboBox>
									<mx:Text text="hours"/>
								</s:HGroup>
							</s:VGroup>
						</s:FormItem>
						<s:FormItem label="Maintenance Window:">
							<s:HGroup textAlign="left">
								<s:RadioButton group="{maintenanceWindowRadioButtons}" id="maintNoPreference" label="No Preference" selected="true"/>
								<s:RadioButton group="{maintenanceWindowRadioButtons}" id="maintenanceWindow" label="Select Window"/>
							</s:HGroup>
						</s:FormItem>
						<s:FormItem enabled="{maintenanceWindow.selected == true}">
							<s:VGroup textAlign="left">
								<s:HGroup>
									<mx:Text text="Start Time:" fontWeight="normal"/>
									<mx:ComboBox color="black" id="maintenanceDay" selectedIndex="0">
										<mx:dataProvider>
											<s:ArrayCollection id="maintenanceDayCollection">
												[Mon, Tue, Wed, Thu, Fri, Sat, Sun]
											</s:ArrayCollection>
										</mx:dataProvider>
									</mx:ComboBox>
									<mx:ComboBox color="black" id="maintenanceHour" selectedIndex="0">
										<mx:dataProvider>
											<s:ArrayCollection id="maintenanceHourCollection">
												[00,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23]
											</s:ArrayCollection>
										</mx:dataProvider>
									</mx:ComboBox>
									<mx:Text text=":"/>
									<mx:ComboBox color="black" id="maintenanceMinute" selectedIndex="0">
										<mx:dataProvider>
											<s:ArrayCollection id="maintenanceMinuteCollection">
												[00,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,
												31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59]
											</s:ArrayCollection>
										</mx:dataProvider>
									</mx:ComboBox>
									<mx:Text text="UTC"/>
								</s:HGroup>
								<s:HGroup>
									<mx:Text text="Duration:   " fontWeight="normal"/>
									<mx:ComboBox color="black" id="maintenanceDuration" selectedIndex="0">
										<mx:dataProvider>
											<s:ArrayCollection id="maintenanceDurationCollection">
												[0.5,1.0,1.5,2.0,2.5,3.0]
											</s:ArrayCollection>
										</mx:dataProvider>
									</mx:ComboBox>
									<mx:Text text="hours"/>
								</s:HGroup>
							</s:VGroup>
						</s:FormItem>
					</s:Form>
				</s:VGroup>
			</s:NavigatorContent>
			<s:NavigatorContent id="reviewContent"
								label="Review" height="100%">
				<s:VGroup paddingTop="10">
					<s:Label text="Please Review Your Relational Database" y="20" fontWeight="bold"/>
					<s:HGroup>
						<s:Form width="50%">
							<s:layout>
								<s:FormLayout gap="-5"/>
							</s:layout>
							<s:FormItem label="Engine:">
								<s:Label text="{engine}"/>
							</s:FormItem>
							<s:FormItem label="Engine Version:">
								<s:Label text="{engineVersion.text}"/>
							</s:FormItem> 
							<s:FormItem label="License Model:">
								<s:Label text="{licenseModel.selectedItem.license}"/>
							</s:FormItem> 
							<s:FormItem label="Minor Version Upgrade:"
										visible="{cloudAccount.cloud_provider == CloudAccount.AMAZON}"
										includeInLayout="{cloudAccount.cloud_provider == CloudAccount.AMAZON}">
								<s:Label text="{autoMinorUpgrade.selectedItem}"/>
							</s:FormItem>									
							<s:FormItem label="DB Instance Class:">
								<s:Label text="{instanceClass.text}"/>
							</s:FormItem>
							<s:FormItem label="Multi-AZ Deployment:"
									 visible="{cloudAccount.cloud_provider == CloudAccount.AMAZON}"
									 includeInLayout="{cloudAccount.cloud_provider == CloudAccount.AMAZON}">
								<s:Label text="{multiAvailZone.text}"/>
							</s:FormItem>
							<s:FormItem label="Allocated Storage:">
								<s:Label text="{allocatedStorage.text}"/>
							</s:FormItem>
							<s:FormItem label="DB Identifier:">
								<s:Label text="{dbInstanceIdentifier.text}"/>
							</s:FormItem>
							<s:FormItem label="Master Username:">
								<s:Label text="{masterUsername.text}"/>
							</s:FormItem>
						</s:Form>
						<s:Form>
							<s:layout>
								<s:FormLayout gap="-5"/>
							</s:layout>
							<s:FormItem label="Master User Password:">
								<s:Label text="{passwordDisplay}"/>
							</s:FormItem>
							<s:FormItem label="Database Name:">
								<mx:Text text="{dbName.text}"/>
							</s:FormItem>
							<s:FormItem label="Database Port:">
								<s:Label text="{dbPort.text}"/>
							</s:FormItem>
							<s:FormItem label="Parameter Group:">
								<s:Label text="{parameterGroups.selectedItem.id}"/>
							</s:FormItem>
							<s:FormItem label="Security Group(s):">
								<mx:Text text="{dbInstance.securityGroupsDisplay}"
										 width="100%"/>								
							</s:FormItem>
							<s:FormItem label="Retention Period:"
									 visible="{cloudAccount.cloud_provider == CloudAccount.AMAZON}"
									 includeInLayout="{cloudAccount.cloud_provider == CloudAccount.AMAZON}">
								<s:Label text="{backupPeriod.selectedIndex}"/>
							</s:FormItem>
							<s:FormItem label="Backup Window:"
									 visible="{cloudAccount.cloud_provider == CloudAccount.AMAZON}"
									 includeInLayout="{cloudAccount.cloud_provider == CloudAccount.AMAZON}">
								<s:Label text="{backupWindowString}"/>
							</s:FormItem>
							<s:FormItem label="Maintenance Window:"
									 visible="{cloudAccount.cloud_provider == CloudAccount.AMAZON}"
									 includeInLayout="{cloudAccount.cloud_provider == CloudAccount.AMAZON}">
								<s:Label text="{maintenanceWindowString}"/>
							</s:FormItem>
						</s:Form>
					</s:HGroup>
					<mx:Text text="Cost: {consumptionCost}" y="20" fontWeight="bold" visible="{cloudAccount.cloud_provider == CloudAccount.AMAZON}" includeInLayout="{cloudAccount.cloud_provider == CloudAccount.AMAZON}"/>
				</s:VGroup>
			</s:NavigatorContent>
		</mx:ViewStack>
		<wizard:WizardButtonGroup id="buttonGroup" 
								  visible="{dbInstanceSetupStack.selectedIndex > 0}"
								  wizardStack="{dbInstanceSetupStack}"
								  nextButtonClick="nextHandler(event)"
								  previousButtonClick="previous_clickHandler(event)"
								  finishButtonClick="createDBInstance_clickHandler(event)"/>
	</s:VGroup>	
</wizard:WizardWindow>
