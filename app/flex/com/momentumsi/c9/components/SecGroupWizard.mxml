<?xml version="1.0" encoding="utf-8"?>
<wizard:WizardWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
					 xmlns:s="library://ns.adobe.com/flex/spark"
					 xmlns:mx="library://ns.adobe.com/flex/mx"
					 xmlns:wizard="com.momentumsi.c9.components.wizard.*"
					 xmlns:services="com.momentumsi.c9.services.*"
					 wizardType="{ResourceTypeLabel.SECURITY_GROUP}"
					 width="612" height="560" 
					 initialize="wizardwindow1_initializeHandler(event)"
					 xmlns:components="com.momentumsi.c9.components.*">
	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.constants.AlertMessage;
			import com.momentumsi.c9.constants.ImagePath;
			import com.momentumsi.c9.constants.ResourceType;
			import com.momentumsi.c9.constants.ResourceTypeLabel;
			import com.momentumsi.c9.events.compute.GetResourcesResultEvent;
			import com.momentumsi.c9.models.resources.DbSecurityGroup;
			import com.momentumsi.c9.models.resources.Ec2SecurityGroup;
			import com.momentumsi.c9.models.resources.Ec2SecurityGroupRule;
			import com.momentumsi.c9.utils.Helpers;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.ValidationResultEvent;
			
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			private var secGroupRules:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var dbSources:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var computeSecurityGroup:Ec2SecurityGroup = new Ec2SecurityGroup();
			[Bindable]
			private var dbSecurityGroup:DbSecurityGroup = new DbSecurityGroup();
			
			override public function applyConfigurations():void
			{
				if(element.id == null)
				{
					return;
				}
				switch(element.elementType)
				{
					case ResourceType.EC2_SECURITY_GROUP:
						secGroupTypeDDL.selectedIndex = 0;
						currentState = "computeState";
						computeSecurityGroup = new Ec2SecurityGroup(element);
						secGroupName.text = computeSecurityGroup.name;
						secGroupDescription.text = computeSecurityGroup.groupDescription;
						secGroupRules.addAll(computeSecurityGroup.securityGroupIngress);
						break;
					case ResourceType.DB_SECURITY_GROUP:
						secGroupTypeDDL.selectedIndex = 1;
						currentState = "databaseState";
						dbSecurityGroup = new DbSecurityGroup(element);
						secGroupName.text = dbSecurityGroup.name;
						secGroupDescription.text = dbSecurityGroup.groupDescription;
						dbSources.addAll(dbSecurityGroup.dbSecurityGroupIngress);
						break;						
				}
				secGroupTypeDDL.enabled = false;				
			}
			
			protected function wizardbuttongroup1_nextButtonClickHandler(event:MouseEvent):void
			{
				if(securityGroupVS.selectedChild == groupSettings)
				{
					if(Helpers.isEmptyTextField(secGroupName) || Helpers.isEmptyTextField(secGroupDescription))
					{
						Alert.show(AlertMessage.SEC_GROUP_DEFAULT, AlertMessage.INVALID);
						return;
					}
				}
				
				securityGroupVS.selectedIndex++;
			}
			
			protected function wizardbuttongroup1_previousButtonClickHandler(event:MouseEvent):void
			{
				securityGroupVS.selectedIndex = securityGroupVS.selectedIndex - 1;
			}
			
			protected function ec2Service_resourcesSetHandler(event:GetResourcesResultEvent):void
			{
				if(computeSecurityGroup != null)
				{
					//Remove compute security group if it is rereferenced in list
					for each(var group:Object in ec2Service.securityGroups)
					{
						if(group.Ref == computeSecurityGroup.name)
						{
							ec2Service.securityGroups.removeItemAt(ec2Service.securityGroups.getItemIndex(group));
							break;
						}
					}
				}
			}
			
			protected function wizardwindow1_initializeHandler(event:FlexEvent):void
			{
				buttonGroup.nextButton.enabled = false;
				ec2Service.describeSecurityGroups();
			}
			
			protected function defaultRules_valueCommitHandler(event:FlexEvent):void
			{
				var rule:Object = ingressVG.defaultRules.selectedItem;
				setCurrentState(rule.state, false);
			}
			
			protected function icmpTypeCB_changeHandler(event:ListEvent):void
			{
				var type:Object = ingressVG.icmpTypeCB.selectedItem;
			}
			
			protected function dbSecGroup_finishButtonClickHandler(event:MouseEvent):void
			{
				dbSecurityGroup.name = secGroupName.text;
				dbSecurityGroup.groupDescription = secGroupDescription.text;
				saveElement(dbSecurityGroup.name, dbSecurityGroup.properties, ResourceType.DB_SECURITY_GROUP);
			}
			
			protected function computeSecGroup_finishButtonClickHandler(event:MouseEvent):void
			{
				if(objectManagementCreate)
				{
					ec2Service.createSecurityGroup(secGroupName.text, secGroupDescription.text);
				}else{
					computeSecurityGroup.name = secGroupName.text;
					computeSecurityGroup.groupDescription = secGroupDescription.text;
					computeSecurityGroup.securityGroupIngress = secGroupRules;
					saveElement(computeSecurityGroup.name, computeSecurityGroup.properties);
				}
			}
			
			protected function cacheSecGroup_finishButtonClickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			private function port_labelFunction(item:Object, column:GridColumn):String
			{
				var portString:String = "";
				if(item != null)
				{
					if(item.port is String)
					{
						portString = item.port;
					}else if(item.hasOwnProperty("port") && item.port.hasOwnProperty("Ref"))
					{
						portString = "@" + item.port.Ref;
					}
				}
				return portString;
			}
			
			protected function ingressVG_removeButton_clickHandler(event:MouseEvent):void
			{
				var index:int = ingressVG.securityGroupRulesCollection.getItemIndex(ingressVG.selectedRule);
				ingressVG.securityGroupRulesCollection.removeItemAt(index);
			}
			
			protected function ingressVG_addRuleButton_clickHandler(event:MouseEvent):void
			{
				ingressVG.securityGroupRulesCollection.addItem(ingressVG.newGroupRule);
			}
			
			protected function secGroupTypeDDL_changeHandler(event:IndexChangeEvent):void
			{
				switch(secGroupTypeDDL.selectedItem)
				{
					case "Compute":
						currentState = "computeState";
						element.elementType = ResourceType.EC2_SECURITY_GROUP;
						break;
					case "Database":
						currentState = "databaseState";
						element.elementType = ResourceType.DB_SECURITY_GROUP;
						break;
					case "Cache":
						currentState = "cacheState";
						element.elementType = ResourceType.CACHE_SECURITY_GROUP;
						break;
				}
				buttonGroup.nextButton.enabled = true;
			}
			
			protected function sourceSecurityGroupCB_valueCommitHandler(event:FlexEvent):void
			{
				dbSecurityGroup.sourceGroup = checkForReference(sourceSecurityGroupCB.text);
			}
			
		]]>
	</fx:Script>
	<wizard:states>
		<s:State name="computeState" />
		<s:State name="databaseState"/>
		<s:State name="cacheState"/>
		<s:State name="tcpState" basedOn="computeState"/>
		<s:State name="icmpState" basedOn="computeState"/>
	</wizard:states>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		
		<services:Ec2Service id="ec2Service"
							 cloudAccountId="{cloudAccount.id}"
							 securityGroups="{projectVersion.getResourcesByType(ResourceType.EC2_SECURITY_GROUP)}"
							 getResourcesResult="ec2Service_resourcesSetHandler(event)"/>
	</fx:Declarations>
	
	<s:VGroup height="100%" width="100%" gap="0">
		<wizard:WizardWindowTitle id="windowTitle" 
								  resourceImage="{ImagePath.NEW_SECURITY_GROUP}"
								  resourceLabel="{wizardDisplayName}"
								  wizardStack="{securityGroupVS}"/>
		<wizard:CookieTrail id="cookieTrail"
							wizardStack="{securityGroupVS}"
						 	gap="175"/>
		<mx:ViewStack id="securityGroupVS"
					  width="100%" height="100%">
			<s:NavigatorContent id="groupSettings"
								width="100%" height="100%" 
								label="Settings">
				<s:Form x="40" y="10">
					<s:FormItem label="Name:">
						<s:TextInput id="secGroupName"
									 width="210"/>
					</s:FormItem>
					<s:FormItem label="Description:">
						<s:TextInput id="secGroupDescription"
									 width="305"/>
					</s:FormItem>
					<s:FormItem label="Type">
						<s:DropDownList id="secGroupTypeDDL"
										selectedIndex="0"
										change="secGroupTypeDDL_changeHandler(event)"
										width="168" prompt="Select Type">
							<s:dataProvider>
								<s:ArrayCollection>
									<fx:String>Compute</fx:String>
									<fx:String>Database</fx:String>
									<fx:String>Cache</fx:String>
								</s:ArrayCollection>
							</s:dataProvider>
						</s:DropDownList>
					</s:FormItem>
				</s:Form>
			</s:NavigatorContent>
			<s:NavigatorContent id="sourceConfigurations" 
								label="Source"
								height="100%" width="100%">
				<s:Scroller includeIn="computeState,icmpState,tcpState" 
							width="610"
							height="100%"
							horizontalScrollPolicy="off">
					<s:viewport>
						<components:ComputeSecurityGroupPermissions id="ingressVG"
																	currentState="{this.currentState}"
																	secGroupsLabelFunction="{wizardLabelFunction}"
																	defaultRules_valueCommit="defaultRules_valueCommitHandler(event)"
																	addRuleButton_click="ingressVG_addRuleButton_clickHandler(event)"
																	removeButton_click="ingressVG_removeButton_clickHandler(event)"
																	icmpTypeCB_change="icmpTypeCB_changeHandler(event)"
																	securityGroupRulesCollection="{secGroupRules}"
																	existingSecurityGroups="{ec2Service.securityGroups}">
							<components:layout>
								<s:VerticalLayout
									horizontalAlign="center"
									paddingLeft="20" paddingRight="20" paddingTop="20"/>
							</components:layout>
						</components:ComputeSecurityGroupPermissions>
					</s:viewport>
				</s:Scroller>
				<s:Scroller includeIn="databaseState" x="45" y="2">
					<s:viewport>
						<s:VGroup horizontalAlign="center">
							<s:Form x="43" y="10">
								<s:layout>
									<s:FormLayout gap="-5"/>
								</s:layout>
								<s:FormItem label="Connection Type:">
									<s:ComboBox id="connectionTypeCB" width="290">
										<s:dataProvider>
											<s:ArrayCollection>
												<fx:String>CIDR/IP</fx:String>
												<fx:String>Compute Security Group</fx:String>
											</s:ArrayCollection>
										</s:dataProvider>
									</s:ComboBox>
								</s:FormItem>
								<s:FormItem id="cidrFI"
											label="CIDR:"
										 	visible="{connectionTypeCB.selectedIndex == 0}"
											includeInLayout="{connectionTypeCB.selectedIndex == 0}">
									<s:TextInput id="cirdripTI"/>								
								</s:FormItem>
								<s:FormItem id="computeSourceFI"
											label="Compute Source Group"
										 	visible="{connectionTypeCB.selectedIndex == 1}"
											includeInLayout="{connectionTypeCB.selectedIndex == 1}">
									<components:InputComboBox id="sourceSecurityGroupCB"
															  projectVersion="{projectVersion}"
															  dataProvider="{ec2Service.securityGroups}"
															  defaultDataProvider="{ec2Service.securityGroups}"
															  prompt="Select Source Group"
															  width="290"
															  labelField="name"
															  defaultLabelField="name"
															  textAlign="left"
															  valueCommit="sourceSecurityGroupCB_valueCommitHandler(event)"/>								
								</s:FormItem>
							</s:Form>
							<s:Button label="Add"
									  enabled="{connectionTypeCB.selectedIndex == 0}"/>
							<s:DataGrid id="dbSourceDG" 
										x="43" y="156"
										width="513"
										enabled="{connectionTypeCB.selectedIndex == 0}"
										dataProvider="{dbSources}">
								<s:columns>
									<s:ArrayList>
										<s:GridColumn dataField="connectionType" headerText="Connection Type"></s:GridColumn>
										<s:GridColumn dataField="details" headerText="Details"></s:GridColumn>
									</s:ArrayList>
								</s:columns>
								<s:typicalItem>
									<fx:Object dataField1="Compute Security Group" dataField2="ui-test-group"></fx:Object>
								</s:typicalItem>
	
							</s:DataGrid>
						</s:VGroup>
					</s:viewport>
				</s:Scroller>
			</s:NavigatorContent>
			<s:NavigatorContent id="reviewContent"
								label="Review">
				<s:Form x="10" y="10">
					<s:FormHeading label="Review Security Group Settings"/>
					<s:FormItem label="Name:">
						<s:Label text="{secGroupName.text}"/>
					</s:FormItem>
					<s:FormItem label="Description:">
						<s:Label text="{secGroupDescription.text}"/>
					</s:FormItem>
					<s:FormItem label="Ingress:">
						<s:DataGrid id="reviewIngress" width="430" dataProvider="{secGroupRules}"
									editable="false" selectionMode="none">
							<s:columns>
								<s:ArrayList>
									<s:GridColumn headerText="Port" width="100" dataField="port" labelFunction="port_labelFunction"/>
									<s:GridColumn headerText="Protocol" width="80" dataField="ipProtocol"/>
									<s:GridColumn headerText="Source" dataField="source"/>
								</s:ArrayList>
							</s:columns>
						</s:DataGrid>
					</s:FormItem>
				</s:Form>
				
			</s:NavigatorContent>
		</mx:ViewStack>
		<wizard:WizardButtonGroup id="buttonGroup"
								  finishButtonClick.databaseState="dbSecGroup_finishButtonClickHandler(event)"
								  finishButtonClick.computeState="computeSecGroup_finishButtonClickHandler(event)"
								  finishButtonClick.cacheState="cacheSecGroup_finishButtonClickHandler(event)"
								  nextButtonClick="wizardbuttongroup1_nextButtonClickHandler(event)"
								  previousButtonClick="wizardbuttongroup1_previousButtonClickHandler(event)"
								  wizardStack="{securityGroupVS}">
		</wizard:WizardButtonGroup>
	</s:VGroup>
</wizard:WizardWindow>
					
