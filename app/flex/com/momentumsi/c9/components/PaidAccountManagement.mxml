<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" width="898" height="458"
			   creationComplete="titlewindow1_creationCompleteHandler(event)"
			   close="PopUpManager.removePopUp(this)"
			   title="Manage Subscription" xmlns:components="com.momentumsi.c9.components.*">
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			import com.momentumsi.c9.utils.Helpers;
			import com.momentumsi.c9.events.AccountCreateEvent;
			import com.momentumsi.c9.models.Account;
			import com.momentumsi.c9.models.AccountSubscription;
			
			import flash.net.navigateToURL;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]
			private var account:Account;
			[Bindable]
			public var orgUserCollection:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var newOrgUsersCollection:ArrayCollection = new ArrayCollection();
			private var subscriberInfo:Object = new Object();

			
			protected function nextButton_clickHandler(event:MouseEvent):void
			{
				if(updateSubscriptionCheckBox.selected){
					if((int(subscriptionForm.numSeats.text) + 1) < (account.subscription.allocatedSeats + 1)){
						Alert.show("Number of seats must be greater than or equal to current subscription seats.  Must contact support team to remove any seats.");
						return;
					}
				}else{
					subscriptionManagementStack.selectedIndex += 1;
				}
			}
			
			private function updateSuccessPrompt(event:ResultEvent):void
			{
				Alert.show("Update successful.");
			}
			
			protected function cancelButton_clickHandler(event:MouseEvent):void
			{
				PopUpManager.removePopUp(this);
			}
			
			protected function signupSvc_faultHandler(event:FaultEvent):void
			{
				PopUpManager.removePopUp(this);
				Alert.show("Unable to upgrade at this time.");				
			}
			
			protected function titlewindow1_creationCompleteHandler(event:FlexEvent):void
			{
				buttonGroup.enabled = false;
				PopUpManager.centerPopUp(this);
				getIdentityDetails.send();
			}
			
			protected function getIdentityDetails_resultHandler(event:ResultEvent):void
			{
				buttonGroup.enabled = true;
				checkingSubscriptionsIndicator.visible = false;
				checkingSubscriptionsLabel.visible = false;
				
				var result:Object = JSON.decode(String(event.result));
				account = new Account(result["identity"]["account"]);
				var subscription:AccountSubscription;
				if(result["subscriptions"].length > 0)
				{
					subscription = new AccountSubscription(result["subscriptions"][0]["subscription"]["subscription"]);
					subscription.allocatedSeats = result["subscriptions"][0]["allocated_seats"];
					subscription.subscribers = result["subscriptions"][0]["subscribers"];
					for (var index:int = 0; index < subscription.subscribers.length; index++){
						orgUserCollection.addItemAt({email: subscription.subscribers[index]}, 0);
					}
					account.subscription = subscription;
					currentSubscriptionPromptGroup.visible = true;
					
					totalSeats.text = subscription.allocatedSeats.toString();
					var numAvailSeats:int = subscription.allocatedSeats - subscription.subscribers.length; 
					availableSeats.text = numAvailSeats.toString();
					
					var seats:int = account.subscription.allocatedSeats + 1;
					subscriptionForm.numSeats.text = seats.toString();
					subscriptionForm.customerEmail.text = account.email;					
				}else{
					currentSubscriptionPromptGroup.visible = false;
					subscriptionForm.enabled = true;
				}				
			}
			
			protected function getIdentityDetails_faultHandler(event:FaultEvent):void
			{
				buttonGroup.enabled = true;
				checkingSubscriptionsIndicator.visible = false;
				checkingSubscriptionsLabel.visible = false;
			}
			
			private function userSubscriptions_labelFunction(item:AccountSubscription):String
			{				
				return item.orgName;
			}
			
			protected function addUserButton_clickHandler(event:MouseEvent):void
			{
				if(orgUserCollection.length < Number(totalSeats.text))
				{
					var addUserWindow:AddUserToSubscriptionWindow = AddUserToSubscriptionWindow(PopUpManager.createPopUp( UIComponent(this.parentApplication), AddUserToSubscriptionWindow , true));
					addUserWindow.owner = this;
				}else{
					Alert.show("No seats available.");
				}
			}
			
			protected function updateSeatQuantity_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function finishButton_clickHandler(event:MouseEvent):void
			{
				var subscription:Object = new Object();
				if(account.subscription == null){
					subscription["action"] = 'create';					
				}else{
					if(updateSubscriptionCheckBox.selected){
						subscription["action"] = 'update';
						subscription["org_id"] = account.subscription.orgId;
					}
				}
				
				if(subscription["action"] == undefined){
					addUsers();
				}else{
					var newAccount:Object = new Object();
					
					var billingInfo:Object = new Object();
					billingInfo["first_name"] = subscriptionForm.billingFirstName.text;
					billingInfo["last_name"] = subscriptionForm.billingLastName.text;
					billingInfo["full_number"] = subscriptionForm.creditCardNumber.text;
					billingInfo["expiration_month"] = subscriptionForm.expMonth.selectedItem.value;
					billingInfo["expiration_year"] = subscriptionForm.expYear.selectedItem.data;
					billingInfo["cvv"] = subscriptionForm.cvv.text;
					billingInfo["billing_zip"] = subscriptionForm.billingZip.text;
					subscription["billing_info"] = billingInfo;
					
					if(Number(subscriptionForm.numSeats.text) > 1){
						subscription["seats"] = Number(subscriptionForm.numSeats.text) - 1;
					}
					newAccount["new_subscription"] = subscription;
					
					var customer:Object = new Object();
					customer["first_name"] = subscriptionForm.customerFirstName.text;
					customer["last_name"] = subscriptionForm.customerLastName.text;
					customer["email"] = subscriptionForm.customerEmail.text;
					customer["organization"] = subscriptionForm.organization.text;
					newAccount["customer"] = customer;

					userSubscriptionSvc.send({account_details: newAccount});
				}
			}
			
			private function addUsers():void
			{				
				subscriberInfo["user_accounts"] = [];
				for each(var user:Object in orgUserCollection){
					subscriberInfo["user_accounts"].push(user); 
				}
				if(subscriberInfo["user_accounts"].length > 0){
					subscriberInfo["org_id"] = account.subscription.orgId;
					subscriberInfo = JSON.encode(subscriberInfo);
					addUsersToSubscriptionSvc.send({subscriber_info: subscriberInfo});
				}				
			}
			
			protected function addUsersToSubscriptionSvc_resultHandler(event:ResultEvent):void
			{
				PopUpManager.removePopUp(this);
			}
			
			protected function addUsersToSubscriptionSvc_faultHandler(event:FaultEvent):void
			{
				trace(event.message.toString());
			}
			
			protected function subscriptionManagementStack_changeHandler(event:IndexChangedEvent):void
			{
				if(subscriptionManagementStack.selectedChild == summaryContent){
					addedUsers.text = "";
					for each(var user:Object in orgUserCollection){
						if(user["status"] == "new"){
							addedUsers.text = addedUsers.text + user["email"] + "\n";
						}
					}
				}
			}
			
			protected function updateSubscriptionCheckBox_changeHandler(event:Event):void
			{
				if(updateSubscriptionCheckBox.selected){
					subscriptionForm.enabled = true;
				}else{
					subscriptionForm.enabled = false;
				}
			}
			
			protected function userSubscriptionSvc_resultHandler(event:ResultEvent):void
			{
				if(event.result.toString() == "success")
				{
					addUsers();
				}
			}
			
			protected function userSubscriptionSvc_faultHandler(event:FaultEvent):void
			{
				Alert.show("Unable to update subscription at this time.");
				PopUpManager.removePopUp(this);
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:HTTPService id="getIdentityDetails"
					   url="{Helpers.getHost()}/user/get_identity_subscriptions"
					   method="GET"
					   resultFormat="object"
					   showBusyCursor="true"
					   result="getIdentityDetails_resultHandler(event)"
					   fault="getIdentityDetails_faultHandler(event)"/>
		
		<s:HTTPService id="addUsersToSubscriptionSvc"
					   url="{Helpers.getHost()}/users/add_subscribers"
					   method="POST"
					   resultFormat="text"
					   showBusyCursor="true"
					   result="addUsersToSubscriptionSvc_resultHandler(event)"
					   fault="addUsersToSubscriptionSvc_faultHandler(event)"/>
		
		<s:HTTPService id="userSubscriptionSvc"
					   url="{Helpers.getHost()}/user/update_subscription"
					   contentType="application/xml"
					   method="POST"
					   resultFormat="text"
					   showBusyCursor="true"
					   result="userSubscriptionSvc_resultHandler(event)"
					   fault="userSubscriptionSvc_faultHandler(event)"/>
		
	</fx:Declarations>
	<s:VGroup height="100%" width="100%">
		<s:Group height="70" width="100%">
			<s:Rect width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="#A7A9Ad"/>
				</s:fill>
			</s:Rect>
			<s:Line x="50" y="14" width="798">
				<s:stroke>
					<s:SolidColorStroke color="#838588" weight="1"/>
				</s:stroke>
			</s:Line>
			<s:Line x="50" y="15" width="798">
				<s:stroke>
					<s:SolidColorStroke color="#D1D3D8" weight="1"/>
				</s:stroke>
			</s:Line>
			<s:HGroup width="100%" gap="275" horizontalAlign="center" paddingTop="9">
				<s:VGroup horizontalAlign="center">
					<s:Image source="/com/momentumsi/c9/assets/IconPNGs/TrailKnob.png" width="16" height="16" visible="{subscriptionManagementStack.selectedChild == subscriptionFormContent}"/>
					<mx:Text text="Subscription&#xd; Information" fontWeight="bold" enabled="{subscriptionManagementStack.selectedChild == subscriptionFormContent}" disabledColor="white"/>
				</s:VGroup>
				<s:VGroup horizontalAlign="center">
					<s:Image source="/com/momentumsi/c9/assets/IconPNGs/TrailKnob.png" width="16" height="16" visible="{subscriptionManagementStack.selectedChild == updateSeatsContent}"/>
					<mx:Text text="Assign Seats" fontWeight="bold" enabled="{subscriptionManagementStack.selectedChild == updateSeatsContent}" disabledColor="white"/>
				</s:VGroup>
				<s:VGroup horizontalAlign="center">
					<s:Image source="/com/momentumsi/c9/assets/IconPNGs/TrailKnob.png" width="16" height="16" visible="{subscriptionManagementStack.selectedChild == summaryContent}"/>
					<mx:Text text="Summary" fontWeight="bold" enabled="{subscriptionManagementStack.selectedChild == summaryContent}" disabledColor="white"/>
				</s:VGroup>
			</s:HGroup>
		</s:Group>
		<s:VGroup width="100%" height="100%" paddingTop="10" paddingLeft="10" paddingRight="10" paddingBottom="10">
			<mx:ViewStack height="100%" width="100%" id="subscriptionManagementStack" change="subscriptionManagementStack_changeHandler(event)" creationPolicy="all">
				<s:NavigatorContent id="subscriptionFormContent" height="100%" width="100%">
					<s:VGroup height="100%" width="100%">
						<s:HGroup id="currentSubscriptionPromptGroup" visible="false" includeInLayout="{currentSubscriptionPromptGroup.visible}" width="100%" paddingLeft="20" paddingBottom="10" paddingTop="10">
							<s:CheckBox id="updateSubscriptionCheckBox" change="updateSubscriptionCheckBox_changeHandler(event)"/>
							<mx:Text id="subscriptionPromptTxt" width="780" fontWeight="bold" text="Check here to update and overwrite your current subscription information.  Otherwise, click 'Next' to assign seats."/>						
						</s:HGroup>					
						<components:SubscriptionSignupForm enabled="false" id="subscriptionForm" height="100%" width="100%"/>
					</s:VGroup>				
				</s:NavigatorContent>
				<s:NavigatorContent id="updateSeatsContent">
					<s:VGroup height="100%" width="100%" paddingTop="10" horizontalAlign="center" id="updateSeats">
						<s:Form>
							<s:layout>
								<s:FormLayout gap="-7"/>
							</s:layout>
							<s:FormItem label="Seats:">
								<s:HGroup verticalAlign="middle">
									<s:HGroup verticalAlign="middle" width="230">
										<s:Label text="Total: "/>
										<s:Label id="totalSeats"/>
										<s:Label text="Available: "/>
										<s:Label id="availableSeats"/>
									</s:HGroup>					
								</s:HGroup>
							</s:FormItem>
							<s:FormItem label="Assign Seats to Users:">
								<s:HGroup>
									<s:DataGrid id="orgUsers" minHeight="0" maxHeight="169" width="294" dataProvider="{orgUserCollection}">
										<s:columns>
											<s:ArrayList>
												<s:GridColumn headerText="User Email" dataField="email"/>
												<s:GridColumn headerText="Admin" width="75" dataField="admin" itemRenderer="com.momentumsi.c9.itemRenderers.UserAdminCheckBox"/>							
											</s:ArrayList>
										</s:columns>					
									</s:DataGrid>
									<s:Button label="Add User" click="addUserButton_clickHandler(event)"/>
								</s:HGroup>				
							</s:FormItem>
						</s:Form>
					</s:VGroup>
				</s:NavigatorContent>
				<s:NavigatorContent id="summaryContent">
					<s:VGroup>
						<s:Form>
							<s:FormItem label="Added Users:">
								<mx:Text id="addedUsers"/>
							</s:FormItem>
						</s:Form>
					</s:VGroup>
				</s:NavigatorContent>
			</mx:ViewStack>
			<s:HGroup width="100%" id="buttonGroup">
				<s:HGroup width="100%" horizontalAlign="left" verticalAlign="middle">
					<s:Button id="backButton" enabled="{subscriptionManagementStack.selectedIndex != 0}" label="Back" click="subscriptionManagementStack.selectedIndex = subscriptionManagementStack.selectedIndex - 1"/>
					<s:Button id="nextButton" label="Next" enabled="{subscriptionManagementStack.selectedIndex != (subscriptionManagementStack.length - 1)}" click="nextButton_clickHandler(event)"/>
					<s:Button id="finishButton" label="Finish" enabled="{subscriptionManagementStack.selectedIndex == subscriptionManagementStack.length - 1}" click="finishButton_clickHandler(event)"/>				
					<s:BusyIndicator id="checkingSubscriptionsIndicator" visible="true"/>
					<s:Label id="checkingSubscriptionsLabel" text="Checking for subscriptions..."/>
				</s:HGroup>
				<s:HGroup width="100%" horizontalAlign="right">
					<s:Button id="cancelButton" label="Cancel" click="cancelButton_clickHandler(event)"/>
				</s:HGroup>
			</s:HGroup>
		</s:VGroup>
	</s:VGroup>
</s:TitleWindow>
