<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"
		 initialize="initializeHandler(event)"
		 creationComplete="creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.utils.Helpers;
			
			import fr.kapit.data.converter.DataConverter;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.GridSelectionEvent;
			import spark.events.GridSortEvent;
			
			[Bindable]
			private var today:Date;
			[Bindable]
			private var time:Date;
			[Bindable] 
			private var realData:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var startTime:Date = new Date();
			
			protected function initializeHandler(event:FlexEvent):void
			{
				startTime = new Date(startTime.fullYear, startTime.month, startTime.date, 0, 0, 0);
				getServiceHealthSvc.send({start_time: startTime});
			}
			
			protected function getServiceHealthSvc_resultHandler(event:ResultEvent):void
			{
				var result:XML = event.result as XML;
				
				realData.removeAll();
				for each(var cloudObjectXML:XML in result.children())
				{
					var cloudObject:Object = new Object();
					cloudObject.serviceName = cloudObjectXML.elements('array')[0].toString();
					cloudObject.day1 = cloudObjectXML.elements('array').elements('array').elements('array')[0].toString();
					if(cloudObjectXML.elements('array').elements('array').elements('array')[1].toString() != "")
						cloudObject.day1Information = cloudObjectXML.elements('array').elements('array').elements('array')[1].toString();
					cloudObject.day2 = cloudObjectXML.elements('array').elements('array').elements('array')[2].toString();
					if(cloudObjectXML.elements('array').elements('array').elements('array')[3].toString() != "")
						cloudObject.day2Information = cloudObjectXML.elements('array').elements('array').elements('array')[3].toString();
					cloudObject.day3 = cloudObjectXML.elements('array').elements('array').elements('array')[4].toString();
					if(cloudObjectXML.elements('array').elements('array').elements('array')[5].toString() != "")
						cloudObject.day3Information = cloudObjectXML.elements('array').elements('array').elements('array')[5].toString();
					cloudObject.day4 = cloudObjectXML.elements('array').elements('array').elements('array')[6].toString();
					if(cloudObjectXML.elements('array').elements('array').elements('array')[7].toString() != "")
						cloudObject.day4Information = cloudObjectXML.elements('array').elements('array').elements('array')[7].toString();
					cloudObject.day5 = cloudObjectXML.elements('array').elements('array').elements('array')[8].toString();
					if(cloudObjectXML.elements('array').elements('array').elements('array')[9].toString() != "")
						cloudObject.day5Information = cloudObjectXML.elements('array').elements('array').elements('array')[9].toString();
					cloudObject.day6 = cloudObjectXML.elements('array').elements('array').elements('array')[10].toString();
					if(cloudObjectXML.elements('array').elements('array').elements('array')[11].toString() != "")
						cloudObject.day6Information = cloudObjectXML.elements('array').elements('array').elements('array')[11].toString();
					cloudObject.day7 = cloudObjectXML.elements('array').elements('array').elements('array')[12].toString();
					if(cloudObjectXML.elements('array').elements('array').elements('array')[13].toString() != "")
						cloudObject.day7Information = cloudObjectXML.elements('array').elements('array').elements('array')[13].toString();
					realData.addItem(cloudObject);
				}
				
				if(realData.length > 0)
				{
					serviceHealthDataGrid.requestedMinRowCount = realData.length;
					serviceHealthDataGrid.dataProvider = realData;
					serviceHealthDataGrid.columns = columns;
					serviceHealthDataGrid.visible = true;
				}else
				{
					serviceHealthDataGrid.visible = false;
				}
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				today = new Date();
				time = today;

				column1.headerText = "";
				column3.headerText = dateFormatter.format(new Date(time.fullYear, time.month, time.date - 6));//six days ago
				column4.headerText = dateFormatter.format(new Date(time.fullYear, time.month, time.date - 5));//five days ago
				column5.headerText = dateFormatter.format(new Date(time.fullYear, time.month, time.date - 4));//four days ago
				column6.headerText = dateFormatter.format(new Date(time.fullYear, time.month, time.date - 3));//three days ago
				column7.headerText = dateFormatter.format(new Date(time.fullYear, time.month, time.date - 2));//two days ago
				column8.headerText = dateFormatter.format(new Date(time.fullYear, time.month, time.date - 1));//yesterday
				column9.headerText = dateFormatter.format(time);//today
			}
			
			public function previousWeek():void
			{
				time = new Date(time.fullYear, time.month, time.date - 7);
				
				column3.headerText = dateFormatter.format(new Date(time.fullYear, time.month, time.date - 6));//six days before most recent day
				column4.headerText = dateFormatter.format(new Date(time.fullYear, time.month, time.date - 5));//five days before most recent day
				column5.headerText = dateFormatter.format(new Date(time.fullYear, time.month, time.date - 4));//four days before most recent day
				column6.headerText = dateFormatter.format(new Date(time.fullYear, time.month, time.date - 3));//three days before most recent day
				column7.headerText = dateFormatter.format(new Date(time.fullYear, time.month, time.date - 2));//two days before most recent day
				column8.headerText = dateFormatter.format(new Date(time.fullYear, time.month, time.date - 1));//one day before most recent day
				column9.headerText = dateFormatter.format(time);//most recent day
				
				startTime = new Date(time.fullYear, time.month, time.date, 0, 0, 0);
				getServiceHealthSvc.send({start_time: startTime});
			}
			
			public function nextWeek():void
			{
				var temp:Date = new Date(time.fullYear, time.month, time.date + 7);
				if(today > temp)
				{
					time = new Date(time.fullYear, time.month, time.date + 7);
					
					column3.headerText = dateFormatter.format(new Date(time.fullYear, time.month, time.date - 6));//six days before most recent day
					column4.headerText = dateFormatter.format(new Date(time.fullYear, time.month, time.date - 5));//five days before most recent day
					column5.headerText = dateFormatter.format(new Date(time.fullYear, time.month, time.date - 4));//four days before most recent day
					column6.headerText = dateFormatter.format(new Date(time.fullYear, time.month, time.date - 3));//three days before most recent day
					column7.headerText = dateFormatter.format(new Date(time.fullYear, time.month, time.date - 2));//two days before most recent day
					column8.headerText = dateFormatter.format(new Date(time.fullYear, time.month, time.date - 1));//one day before most recent day
					column9.headerText = dateFormatter.format(time);//most recent day
					
					startTime = new Date(time.fullYear, time.month, time.date, 0, 0, 0);
					getServiceHealthSvc.send({start_time: startTime});
				}
			}
			
			protected function getServiceHealthSvc_faultHandler(event:FaultEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:DateFormatter id="dateFormatter" formatString="MMM DD"/>
	
		<mx:HTTPService
			id="getServiceHealthSvc"
			url="{Helpers.getHost()}/users/get_service_health/"
			resultFormat="e4x"
			method="POST"
			result="getServiceHealthSvc_resultHandler(event)"
		    fault="getServiceHealthSvc_faultHandler(event)"/>
		
		<s:ArrayList id="columns">
			<s:GridColumn id="column1" dataField="serviceName" width="200" itemRenderer="com.momentumsi.c9.itemRenderers.DataGridRowHeader"/>
			<s:GridColumn id="column2" width="25" itemRenderer="com.momentumsi.c9.itemRenderers.ServiceHealthChangeDay" headerRenderer="com.momentumsi.c9.itemRenderers.ServiceHealthPreviousWeek"/>
			<s:GridColumn id="column3" dataField="day1" itemRenderer="com.momentumsi.c9.itemRenderers.ServiceHealthImage"/>
			<s:GridColumn id="column4" dataField="day2" itemRenderer="com.momentumsi.c9.itemRenderers.ServiceHealthImage2"/>
			<s:GridColumn id="column5" dataField="day3" itemRenderer="com.momentumsi.c9.itemRenderers.ServiceHealthImage3"/>
			<s:GridColumn id="column6" dataField="day4" itemRenderer="com.momentumsi.c9.itemRenderers.ServiceHealthImage4"/>
			<s:GridColumn id="column7" dataField="day5" itemRenderer="com.momentumsi.c9.itemRenderers.ServiceHealthImage5"/>
			<s:GridColumn id="column8" dataField="day6" itemRenderer="com.momentumsi.c9.itemRenderers.ServiceHealthImage6"/>
			<s:GridColumn id="column9" dataField="day7" itemRenderer="com.momentumsi.c9.itemRenderers.ServiceHealthImage7"/>
			<s:GridColumn id="column10" width="25" itemRenderer="com.momentumsi.c9.itemRenderers.ServiceHealthChangeDay" headerRenderer="com.momentumsi.c9.itemRenderers.ServiceHealthNextWeek"/>
		</s:ArrayList>
	</fx:Declarations>
	
	<s:DataGrid id="serviceHealthDataGrid" height="275" width="100%" rollOverEffect="null" rowHeight="25" selectionMode="none" sortableColumns="false" visible="false"/>		 
</s:Group>
