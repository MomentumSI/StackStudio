<?xml version="1.0" encoding="utf-8"?>
<components:DetailsBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%" height="100%"
		 xmlns:uicomponent="fr.kapit.diagrammer.base.uicomponent.*"
		 xmlns:components="com.momentumsi.c9.components.*" xmlns:services="com.momentumsi.c9.services.*">

	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.components.BeanstalkEnvironmentEdit;
			import com.momentumsi.c9.utils.Helpers;
			import com.momentumsi.c9.services.CloudApiService;
			
			import fr.kapit.diagrammer.Diagrammer;
			import fr.kapit.diagrammer.base.uicomponent.DiagramSprite;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.IndexChangeEvent;

			[Bindable]
			private var environmentId:String;
			[Bindable]
			private var versionId:int;
			private var beanstalkCollection:ArrayCollection = new ArrayCollection();
			private var appEnvironments:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var selectedAppEnvironments:ArrayCollection = new ArrayCollection();
			
			protected function refreshButton_clickHandler(event:MouseEvent):void
			{
				for each(var environment:Object in selectedAppEnvironments)
				{
					// TODO: Update environment
				}
				
			}
			
			protected function environments_valueCommitHandler(event:FlexEvent):void
			{
				if(node == null){
					return;
				}
				if(environments.selectedItem != null)
				{
					var env:Object = environments.selectedItem;
					environmentURL.label = env.endpoint_url;
					if(env.description == "")
					{
						envDescription.text = "(No Description)"
					}else{
						envDescription.text = env.description;
					}
					containerType.text = env.solution_stack_name;
					dateChanged.text = dateFormatter.format(Helpers.formatDate(env.date_updated));
					status.text = env.status;
					environmentId = env.environment_id;
					health.text = env.health;
					getEnvironmentEventsSvc.send();
				}else{
					environmentURL.label = "";
					envDescription.text = "(Select environment to see details)";
					containerType.text = "";
					dateChanged.text = "";
					status.text = "";
					health.text = "";
				}
			}
			
			protected function getEnvironmentEventsSvc_resultHandler(event:ResultEvent):void
			{
				/*
				var result:XMLList = Helpers.xmlChildrenFromEvent(event);
				var eventsCollection:ArrayCollection = new ArrayCollection();
				for each(var environmentEvent:XML in result)
				{
					var dateString:String = environmentEvent.child('event-date');
					var date:String = dateFormatter.format(Helpers.formatDate(dateString));
					eventsCollection.addItem({date: date, type: environmentEvent.child('severity'), details: environmentEvent.child('message')});
				}
				//environmentEvents.dataProvider = eventsCollection;
				*/
			}
			
			[Bindable]
			private var _beanstalkObject:Object = new Object();
			override public function set resourceObject(value:Object):void
			{
				_beanstalkObject = value;
				if(node.instanceId != null)
				{
					getEnvironmentsSvc.send();
				}
				formatDate();
			}
			
			private function formatDate():void
			{
				if(_beanstalkObject.date_created != null)
				{
					createdTime.text = dateFormatter.format(Helpers.formatDate(_beanstalkObject.date_created));
				}
				
			}
			
		]]>
	</fx:Script>

	<fx:Declarations>
		
		<!-- Place non-visual elements (e.g., services, value objects) here -->

		<services:CloudApiService id="getEnvironmentsSvc"
								  action="describe_environments"
								  serviceType="{CloudApiService.BEANSTALK_SERVICE}"
								  cloudAccountId="{cloudAccountId}"
								  request="{{application_name: node.instanceId}}"/>
		
		<services:CloudApiService id="getEnvironmentEventsSvc"
								  action="describe_environment_events"
								  serviceType="{CloudApiService.BEANSTALK_SERVICE}"
								  cloudAccountId="{cloudAccountId}"
								  request="{{environment_id: environmentId}}"
								  result="getEnvironmentEventsSvc_resultHandler(event)"/>
		
		<s:DateTimeFormatter id="dateFormatter" dateTimePattern="MM/dd/yyyy hh:mm:ss a"/>
		
		<fx:XML id="beanstalk"/>
	</fx:Declarations>
		<s:HGroup paddingTop="2" paddingLeft="5">
			<!--<s:Button id="deleteButton" label="Delete Application" click="deleteButton_clickHandler(event)"/>-->
			<s:Button id="refreshButton" label="Refresh Environments" click="refreshButton_clickHandler(event)"/>
		</s:HGroup>
		<s:VGroup width="100%" height="100%">
			<components:DetailsBoxTabNavigator>
				<s:NavigatorContent label="Overview">
					<s:BorderContainer borderVisible="false" height="100%" width="100%">
						<s:Form height="100%" width="100%">
							<s:FormItem label="Application Description:">
								<mx:Text text="{_beanstalkObject.description}"/>
							</s:FormItem>
							<s:FormItem label="Created on:">
								<mx:Text id="createdTime"/>
							</s:FormItem>
						</s:Form>
					</s:BorderContainer>
				</s:NavigatorContent>
				<s:NavigatorContent height="100%" width="100%" label="Environments">
					<s:BorderContainer borderVisible="false" height="100%" width="100%">
						<s:VGroup height="100%" width="100%">
							<s:HGroup width="100%" paddingLeft="5" paddingBottom="2" paddingTop="2">
								<mx:ComboBox id="environments" dataProvider="{getEnvironmentsSvc.result}" labelField="environment_name" minWidth="200" valueCommit="environments_valueCommitHandler(event)"/>
							</s:HGroup>
							<s:Form>
								<s:FormItem label="URL:">
									<mx:LinkButton id="environmentURL" color="blue" click="navigateToURL(new URLRequest('http://' + environmentURL.label))"/>
								</s:FormItem>
								<s:FormItem label="Description:">
									<mx:Text id="envDescription"/>
								</s:FormItem>
								<s:FormItem label="Container Type:">
									<mx:Text id="containerType"/>
								</s:FormItem>
								<s:FormItem label="Changed on:">
									<mx:Text id="dateChanged"/>
								</s:FormItem>
								<s:FormItem label="Status:">
									<mx:Text id="status"/>
								</s:FormItem>
								<s:FormItem label="Health:">
									<mx:Text id="health"/>
								</s:FormItem>
							</s:Form>
						</s:VGroup>
					</s:BorderContainer>
				</s:NavigatorContent>
				<s:NavigatorContent height="100%" width="100%" label="Events">
					<s:BorderContainer height="100%" width="100%" borderVisible="false">
						<s:Scroller height="100%" width="100%">
							<s:Group height="85%" width="100%">
								<s:DataGrid dataProvider="{new ArrayCollection(getEnvironmentEventsSvc.result as Array)}" height="100%" width="100%">
									<s:columns>
										<s:ArrayList>
											<s:GridColumn headerText="Date" dataField="event_date"/>
											<s:GridColumn headerText="Message" dataField="message"/>
											<s:GridColumn headerText="Severity" dataField="severity"/>
											<s:GridColumn headerText="Version" dataField="version_label"/>
										</s:ArrayList>
									</s:columns>
								</s:DataGrid>
							</s:Group>
						</s:Scroller>
					</s:BorderContainer>
				</s:NavigatorContent>
			</components:DetailsBoxTabNavigator>
		</s:VGroup>
</components:DetailsBox>
