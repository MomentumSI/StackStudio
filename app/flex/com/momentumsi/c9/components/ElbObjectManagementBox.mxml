<?xml version="1.0" encoding="utf-8"?>
<c9:ObjectManagementDetailsBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:c9="com.momentumsi.c9.components.*"
		  xmlns:services="com.momentumsi.c9.services.*"
		  creationComplete="objectmanagementdetailsbox1_creationCompleteHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			import com.momentumsi.c9.constants.AlertMessage;
			import com.momentumsi.c9.events.DataGridButtonClickEvent;
			import com.momentumsi.c9.models.CloudAccount;
			import com.momentumsi.c9.representers.LoadBalancerRepresenter;
			import com.momentumsi.c9.services.CloudApiService;
			import com.momentumsi.c9.services.MonitoringService;
			import com.momentumsi.c9.utils.Helpers;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.StringUtil;
			
			import spark.components.Label;
			import spark.events.GridSelectionEvent;
			
			[Bindable]
			private var elbData:LoadBalancerRepresenter;
			[Bindable]
			private var terminateEnabled:Boolean = true;
			[Bindable]
			private var instancesHealthList:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var availabilityZonesHealthList:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var defaultProtocol:ArrayCollection = new ArrayCollection([{label:"HTTP"},
																			   {label:"HTTPS"},
																			   {label: "TCP"},
																			   {label: "SSL"}]);
			[Bindable]
			private var healthLoading:Boolean = false;
			
			override public function set resourceData(value:Object):void
			{
				if(cloudAccount.cloud_provider != CloudAccount.AMAZON)
				{
					Helpers.disableTab(elbDetails, monitoringContent);
				}else{
					Helpers.disableTab(elbDetails, monitoringContent, true);
				}
				elbData = new LoadBalancerRepresenter(value);
				super.resourceData = elbData;
				elbDetails.selectedIndex = 0;
				gatherInstancesHealth();
			}
			
			public function gatherInstancesHealth():void
			{
				getInstanceHealth.send({physical_id: elbData.name, availability_zones: JSON.encode(elbData.zonesCollection.source)});
				healthLoading = true;
			}
			
			protected function terminate_clickHandler(event:MouseEvent):void
			{
				if(terminateEnabled)
				{
					var destroyPopUp:DestroyResourceObjectManagement = DestroyResourceObjectManagement(PopUpManager.createPopUp(UIComponent(this.parentApplication), DestroyResourceObjectManagement, true));
					destroyPopUp.cloudAccountId = cloudAccount.id;
					destroyPopUp.region = region;
					destroyPopUp.resourceType = CloudApiService.ELB_SERVICE;
					destroyPopUp.resourceDisplayId = elbData.name;
					destroyPopUp.resourceId = elbData.name;
				}
			}
			
			protected function elbDetails_changeHandler(event:IndexChangedEvent):void
			{
				if(elbDetails.selectedChild == monitoringContent)
				{
					monitorBox.objectManagement = true;
					monitorBox.objectManagementResource = elbData;
					monitorBox.objectManagementResourceType = MonitoringService.ELB_DEFAULT;
					monitorBox.getDefaultMonitorsCall(MonitoringService.ELB_DEFAULT);
				}
			}
			
			private function Item_Renderer_Function( item: Object, column: GridColumn ): IFactory
			{
				var labelDisplay:ClassFactory = this["labelDisplay"];
				
				return labelDisplay;
			}
			
			protected function test(event:MouseEvent):void
			{
				Alert.show("Test");
			}
			
			protected function refreshLoadBalancer_resultHandler(event:ResultEvent):void
			{	
				var objectManagement:ObjectManagementTab = Helpers.getObjectManagement(this);
				objectManagement.elb.resourceCollection.removeItemAt(objectManagement.elbList.selectedIndex);
				objectManagement.elb.resourceCollection.addItemAt(refreshLoadBalancer.result, 0);
				elbData = new LoadBalancerRepresenter(refreshLoadBalancer.result);
				objectManagement.elbList.selectedIndex = 0;
				gatherInstancesHealth();
			}
			
			protected function refreshLoadBalancer_faultHandler(event:FaultEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function addInstance_clickHandler(event:MouseEvent):void
			{
				var addInstance:ElbAddInstance = new ElbAddInstance();
				addInstance.cloudAccount = cloudAccount;
				addInstance.region = region;
				addInstance.elbData = elbData;
				PopUpManager.addPopUp(addInstance, UIComponent(parentApplication), true);
			}
			
			protected function addAvailabilityZone_clickHandler(event:MouseEvent):void
			{
				var addZone:ElbAddAvailabilityZone = ElbAddAvailabilityZone(PopUpManager.createPopUp( UIComponent(this.parentApplication), ElbAddAvailabilityZone , true));
				addZone.cloudAccountId = cloudAccount.id;
				addZone.region = region;
				addZone.elbData = elbData;
			}
			
			protected function saveListener():void
			{
				if(Helpers.StringReplaceAll(lbPort.text, " ", "") != "" && Helpers.StringReplaceAll(instancePort.text, " ", "") != "")
				{
					try
					{
						var lbPortNumber:Number = Number(lbPort.text);
						var instancePortNumber:Number = Number(instancePort.text);
						if(isNaN(lbPortNumber) || isNaN(instancePortNumber))
						{
							listenerAlert.visible = true;
						}else
						{
							var found:Boolean = false;
							for each(var l:Object in elbData.listenersCollection)
							{
								if(!found && l.Listener.LoadBalancerPort.toString() == lbPortNumber.toString())
								{
									found = true;
								}
							}
							
							if(!found)
							{
								listenerAlert.visible = false;
								addListenerToLoadBalancer.send({load_balancer_name: elbData.name,
																protocol: protocol.selectedLabel,
																load_balancer_port: lbPortNumber,
																instance_port: instancePortNumber,
																instance_protocol: instanceProtocol.selectedLabel});
							}else
							{
								Alert.show("You cannot have duplicate load balancer ports.");
							}
							
						}
					}catch(e:Error)
					{
						trace("Place: ElbObjectManagementBox, Message: " + e.message);
					}
				}else
				{
					listenerAlert.visible = true;
				}
			}
			
			protected function addListenerToLoadBalancer_resultHandler(event:ResultEvent):void
			{
				Helpers.getObjectManagement(this).elbDetails.refreshLoadBalancer.send({physical_id: elbData.name});
			}
			
			protected function addListenerToLoadBalancer_faultHandler(event:FaultEvent):void
			{
				if(event.message != null && event.message.body != null)
				{
					Alert.show(event.message.body.toString());
				}else
				{
					Alert.show("Failed to add the listener to the load balancer.");
				}
			}
			
			protected function getInstanceHealth_resultHandler(event:ResultEvent):void
			{
				instancesHealthList = new ArrayCollection(getInstanceHealth.result.InstancesHealth as Array);
				availabilityZonesHealthList = new ArrayCollection(getInstanceHealth.result.AvailabilityZonesHealth as Array);
				healthLoading = false;
			}
			
			protected function getInstanceHealth_faultHandler(event:FaultEvent):void
			{
				healthLoading = false;
			}
			
			protected function objectmanagementdetailsbox1_creationCompleteHandler(event:FlexEvent):void
			{
				listenersDataGrid.addEventListener(DataGridButtonClickEvent.CLICK, removeListener_clickHandler);
			}
			
			private function removeListener_clickHandler(event:DataGridButtonClickEvent):void
			{
				var listenerData:Object = event.data;
				removeListenerFromLoadBalancer.send({load_balancer_name: elbData.name, load_balancer_port: listenerData.Listener.LoadBalancerPort});
			}
			
			protected function removeListenerFromLoadBalancer_resultHandler(event:ResultEvent):void
			{
				var objectManagement:ObjectManagementTab = Helpers.getObjectManagement(this);
				objectManagement.elbDetails.refreshLoadBalancer.send({physical_id: elbData.name});
			}
			
			protected function removeListenerFromLoadBalancer_faultHandler(event:FaultEvent):void
			{
				Alert.show("Failed to remove the listener from load balancer.");
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>	
		<s:DateTimeFormatter id="dateFormatter" dateTimePattern="MM/dd/yyyy hh:mm:ss a"/>
		
		<services:CloudApiService id="refreshLoadBalancer"
								  action="describe_load_balancers"
								  cloudAccountId="{cloudAccount.id}"
								  region="{region}"
								  serviceType="ELB"
								  result="refreshLoadBalancer_resultHandler(event)"
								  fault="refreshLoadBalancer_faultHandler(event)"/>
		
		<services:CloudApiService id="addListenerToLoadBalancer"
								  action="create_load_balancer_listeners"
								  cloudAccountId="{cloudAccount.id}"
								  region="{region}"
								  serviceType="ELB"
								  result="addListenerToLoadBalancer_resultHandler(event)"
								  fault="addListenerToLoadBalancer_faultHandler(event)"/>
		
		<services:CloudApiService id="getInstanceHealth"
								  action="describe_instance_and_az_health"
								  cloudAccountId="{cloudAccount.id}"
								  region="{region}"
								  serviceType="ELB"
								  result="getInstanceHealth_resultHandler(event)"
								  fault="getInstanceHealth_faultHandler(event)"/>
		
		<services:CloudApiService id="removeListenerFromLoadBalancer"
								  cloudAccountId="{cloudAccount.id}"
								  region="{region}"
								  action="delete_load_balancer_listeners"
								  serviceType="ELB"
								  result="removeListenerFromLoadBalancer_resultHandler(event)"
								  fault="removeListenerFromLoadBalancer_faultHandler(event)"/>
	</fx:Declarations>
	
	<s:HGroup paddingLeft="10" gap="20">
		<c9:TextButton text="Delete"
					   click="terminate_clickHandler(event)" 
					   enabled="{terminateEnabled}"/>
	</s:HGroup>
	<s:BorderContainer height="100%" width="100%" alpha="1" borderVisible="false">
		<mx:TabNavigator id="elbDetails"
						 width="100%" height="100%"
						 change="elbDetails_changeHandler(event)">
			<s:NavigatorContent label="Details" width="100%" height="100%">
				<s:BorderContainer borderVisible="false" height="100%" width="100%">
					<s:Scroller width="100%" height="100%">
						<s:viewport>
							<s:HGroup>
								<s:Form>
									<s:layout>
										<s:FormLayout gap="-7"/>
									</s:layout>
									<s:FormItem label="Load Balancer Name:">
										<mx:Text text="{elbData.name}"/>
									</s:FormItem>
									<s:FormItem label="DNS Name:">
										<mx:Text text="{elbData.dnsName}"/>
									</s:FormItem>
									<s:FormItem label="Instances:">
										<mx:Text text="{elbData.instances}"/>
									</s:FormItem>
									<s:FormItem label="Availability Zones:">
										<mx:Text text="{elbData.availabilityZones}"/>
									</s:FormItem>
									<s:FormItem label="Port Configurations:">
										<mx:Text text="{elbData.listenersDisplay}"/>
									</s:FormItem>
									<s:FormItem label="Source Security Group:">
										<mx:Text text="{elbData.sourceSecurityGroup}"/>
									</s:FormItem>
									<s:FormItem label="Hosted Zone ID:">
										<mx:Text text="{elbData.hostedZoneId}"/>
									</s:FormItem>
									<s:FormItem label="Date Created:">
										<mx:Text text="{elbData.createdAt}"/>
									</s:FormItem>
								</s:Form>
							</s:HGroup>
						</s:viewport>
					</s:Scroller>
				</s:BorderContainer>
			</s:NavigatorContent>
			<s:NavigatorContent id="instancesContent" 
								label="Instances" 
								width="100%" height="100%">
				<s:BorderContainer id="instancesContentLoaded"
								   borderVisible="false" 
								   width="100%" height="100%">
					<s:Scroller width="100%" height="100%">
						<s:viewport>
							<s:VGroup width="100%" height="100%"
									  paddingLeft="20" paddingRight="20">
								<s:Group width="100%" height="100%" 
										 visible="{healthLoading}" includeInLayout="{healthLoading}">
									<s:BusyIndicator width="50" height="50"/>
								</s:Group>
								<s:VGroup width="100%" height="100%"
										  visible="{!healthLoading}" includeInLayout="{!healthLoading}">
									<s:HGroup>
										<mx:Text text="Instances:"
												 fontWeight="bold"/>
										<s:Button id="addInstanceButton"
												  label="Add Instance" 
												  click="addInstance_clickHandler(event)"/>
									</s:HGroup>
									<s:DataGrid id="instanceDatagrid" 
												width="100%"
												dataProvider="{instancesHealthList}"
												minHeight="0"
												selectionMode="none">
										<s:columns>
											<s:ArrayList id="instanceGridColumns">
												<s:GridColumn headerText="Instance" dataField="InstanceId"/>
												<s:GridColumn headerText="Availability Zone" dataField="AvailabilityZone"/>
												<s:GridColumn headerText="State" dataField="State"/>
												<s:GridColumn headerText="Actions" itemRenderer="com.momentumsi.c9.itemRenderers.LoadBalancerInstanceRemove"/>
											</s:ArrayList>
										</s:columns>
									</s:DataGrid>
									<s:HGroup>
										<mx:Text text="Availability Zones:" fontWeight="bold"/>
										<s:Button label="Add Availabiltiy Zone" click="addAvailabilityZone_clickHandler(event)" enabled="{cloudAccount.cloud_provider == CloudAccount.AMAZON}"/>
									</s:HGroup>
									<s:DataGrid id="azDatagrid" width="100%" dataProvider="{availabilityZonesHealthList}" minHeight="0" selectionMode="none">
										<s:columns>
											<s:ArrayList id="azGridColumns">
												<s:GridColumn headerText="Availability Zone" dataField="AvailabilityZone"/>
												<s:GridColumn headerText="Instance Count" dataField="InstanceCount"/>
												<s:GridColumn headerText="Healthy?" dataField="Healthy"/>
												<s:GridColumn headerText="Actions" itemRenderer="com.momentumsi.c9.itemRenderers.LoadBalancerAvailabilityZoneRemove" visible="{cloudAccount.cloud_provider == CloudAccount.AMAZON}"/>
											</s:ArrayList>
										</s:columns>
									</s:DataGrid>
								</s:VGroup>
							</s:VGroup>			
						</s:viewport>
					</s:Scroller>
				</s:BorderContainer>
			</s:NavigatorContent>
			<s:NavigatorContent label="Health Check" width="100%" height="100%">
				<s:BorderContainer borderVisible="false" height="100%" width="100%">
					<s:Scroller width="100%" height="100%">
						<s:viewport>
							<s:HGroup>
								<s:Form>
									<s:layout>
										<s:FormLayout gap="-7"/>
									</s:layout>
									<s:FormItem label="Ping Target:">
										<mx:Text text="{elbData.target}"/>
									</s:FormItem>
									<s:FormItem label="Timeout:">
										<mx:Text text="{elbData.timeout}"/>
									</s:FormItem>
									<s:FormItem label="Interval:">
										<mx:Text text="{elbData.interval}"/>
									</s:FormItem>
									<s:FormItem label="Unhealthy Threshold:">
										<mx:Text text="{elbData.unhealthyThreshold}"/>
									</s:FormItem>
									<s:FormItem label="Healthy Threshold:">
										<mx:Text text="{elbData.healthyThreshold}"/>
									</s:FormItem>
								</s:Form>
							</s:HGroup>
						</s:viewport>
					</s:Scroller>
				</s:BorderContainer>
			</s:NavigatorContent>
			<s:NavigatorContent label="Listeners" width="100%" height="100%">
				<s:VGroup width="100%" height="100%" paddingLeft="10" paddingRight="10">
					<s:Form>
						<s:FormItem>
							<s:HGroup gap="45">
								<s:HGroup>
									<mx:Text text="Load Balancer:" fontWeight="bold"/>
									<mx:Text text="Protocol"/>
									<mx:ComboBox id="protocol" dataProvider="{defaultProtocol}" width="130"/>
									<mx:Text text="Port"/>
									<s:TextInput id="lbPort" widthInChars="6"/>
								</s:HGroup>
								<s:HGroup>
									<mx:Text text="Instance:" fontWeight="bold"/>
									<mx:Text text="Protocol"/>
									<mx:ComboBox id="instanceProtocol" dataProvider="{defaultProtocol}" width="130"/>
									<mx:Text text="Port"/>
									<s:TextInput id="instancePort" widthInChars="6"/>
									<mx:Text text="Add Listener:" fontWeight="bold"/>
									<s:Button id="action" label="Save" click="saveListener()" enabled="{(lbPort.text != '' || instancePort.text != '')}"/>
									<mx:Text id="listenerAlert" text="{AlertMessage.INVALID}" color="red" visible="false"/>
								</s:HGroup>
							</s:HGroup>
						</s:FormItem>
					</s:Form>
					<s:DataGrid id="listenersDataGrid"
								width="100%" height="100%" 
								dataProvider="{elbData.listenersCollection}">
						<s:columns>
							<s:ArrayList id="listenersGridColumns">
								<s:GridColumn headerText="Protocol" dataField="Listener.Protocol" width="200"/>
								<s:GridColumn headerText="Load Balancer Port" dataField="Listener.LoadBalancerPort" width="200"/>
								<s:GridColumn headerText="Instance Port" dataField="Listener.InstancePort" width="200"/>
								<s:GridColumn headerText="SSL Certificate Resource" dataField="Listener.SSLCertificateId"/>
								<s:GridColumn headerText="Action" itemRenderer="com.momentumsi.c9.itemRenderers.LoadBalancerListenerRemove"/>
							</s:ArrayList>
						</s:columns>
					</s:DataGrid>
				</s:VGroup>
			</s:NavigatorContent>
			<s:NavigatorContent id="monitoringContent" label="Monitoring" width="100%" height="100%">
				<c9:MonitoringBox id="monitorBox" cloudAccountId="{cloudAccount.id}" region="{region}"/>
			</s:NavigatorContent>
		</mx:TabNavigator>
	</s:BorderContainer>
</c9:ObjectManagementDetailsBox>