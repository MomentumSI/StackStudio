<?xml version="1.0" encoding="utf-8"?>
<c9:ObjectManagementDetailsBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:c9="com.momentumsi.c9.components.*">
	
	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.components.ebs.EbsAttachVolumePopUp;
			import com.momentumsi.c9.models.CloudAccount;
			import com.momentumsi.c9.representers.BlockStorageRepresenter;
			import com.momentumsi.c9.services.CloudApiService;
			import com.momentumsi.c9.services.MonitoringService;
			import com.momentumsi.c9.utils.Helpers;
			
			import mx.core.UIComponent;
			import mx.events.IndexChangedEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]
			private var ebsData:BlockStorageRepresenter;
			[Bindable]
			private var deleteEnabled:Boolean = false;
			[Bindable]
			private var detachEnabled:Boolean = false;
			[Bindable]
			private var iopsVisible:Boolean = false;
			
			override public function set resourceData(value:Object):void
			{
				ebsData = new BlockStorageRepresenter(value);
				ebsDetails.selectedIndex = 0;
				super.resourceData = ebsData;
				convertDisplay();
			}
			
			protected function ebsDetails_changeHandler(event:IndexChangedEvent):void
			{
				if(ebsDetails.selectedChild == monitoringContent)
				{
					monitorBox.objectManagement = true;
					monitorBox.objectManagementResource = ebsData;
					monitorBox.objectManagementResourceType = MonitoringService.EBS_DEFAULT;
					monitorBox.getDefaultMonitorsCall(MonitoringService.EBS_DEFAULT);
				}
			}
			
			protected function deleteVolume_clickHandler(event:MouseEvent):void
			{
				if(deleteEnabled)
				{
					var destroyPopUp:DestroyResourceObjectManagement = DestroyResourceObjectManagement(PopUpManager.createPopUp(UIComponent(this.parentApplication), DestroyResourceObjectManagement, true));
					destroyPopUp.cloudAccountId = cloudAccount.id;
					destroyPopUp.region = region;
					destroyPopUp.resourceType = CloudApiService.EBS_SERVICE;
					destroyPopUp.resourceDisplayId = ebsData.id;
					destroyPopUp.resourceId = ebsData.id;
				}
			}
			
			public function convertDisplay():void
			{
				if((cloudAccount.cloud_provider == CloudAccount.AMAZON && ebsData.state == 'in-use') || (cloudAccount.cloud_provider == CloudAccount.EUCALYPTUS && ebsData.state == 'in-use') || (cloudAccount.cloud_provider == CloudAccount.CLOUDSTACK && ebsData.state == "Ready"))
				{
					deleteEnabled = false;
					detachEnabled = true;
				}else
				{
					deleteEnabled = true;
					detachEnabled = false;
				}
				
				if(cloudAccount.cloud_provider == CloudAccount.AMAZON && ebsData.type == "io1")
				{
					iopsVisible = true;
				}else
				{
					iopsVisible = false;
				}
			}
			
			protected function detachVolume_clickHandler(event:MouseEvent):void
			{
				if(detachEnabled)
				{
					var destroyPopUp:DestroyResourceObjectManagement = new DestroyResourceObjectManagement();
					destroyPopUp.title = "Detach Volume";
					destroyPopUp.cloudAccountId = cloudAccount.id;
					destroyPopUp.region = region;
					destroyPopUp.resourceType = "ebsDetach";
					destroyPopUp.resourceDisplayId = ebsData.id;
					destroyPopUp.resourceId = ebsData.id;
					destroyPopUp.childId = ebsData.serverId;
					PopUpManager.addPopUp(destroyPopUp, UIComponent(parentApplication), true);
				}
			}
			
			protected function attachVolume_clickHandler(event:MouseEvent):void
			{
				if(!detachEnabled)
				{
					var attachPopUp:EbsAttachVolumePopUp = EbsAttachVolumePopUp(PopUpManager.createPopUp(UIComponent(this.parentApplication), EbsAttachVolumePopUp, true));
					attachPopUp.cloudAccount = cloudAccount;
					attachPopUp.region = region;
					attachPopUp.ebsData = ebsData;
				}
			}
			
			protected function forceDetach_clickHandler(event:MouseEvent):void
			{
				if(detachEnabled)
				{
					var destroyPopUp:DestroyResourceObjectManagement = new DestroyResourceObjectManagement();
					destroyPopUp.title = "Force Detach Volume";
					destroyPopUp.cloudAccountId = cloudAccount.id;
					destroyPopUp.region = region;
					destroyPopUp.resourceType = "ebsDetach";
					destroyPopUp.resourceDisplayId = ebsData.id;
					destroyPopUp.resourceId = ebsData.id;
					destroyPopUp.childId = ebsData.serverId;
					PopUpManager.addPopUp(destroyPopUp, UIComponent(parentApplication), true);
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:DateTimeFormatter id="dateFormatter" dateTimePattern="MM/dd/yyyy hh:mm:ss a"/>
	</fx:Declarations>	
	<s:HGroup paddingLeft="10" gap="20">
		<c9:TextButton id="attach"
					   text="Attach Volume"
					   click="attachVolume_clickHandler(event)"
					   enabled="{!detachEnabled}"/>
		<c9:TextButton id="detach"
					   text="Detach Volume"
					   click="detachVolume_clickHandler(event)"
					   enabled="{detachEnabled}"/>
		<c9:TextButton id="forceDetach"
					   text="Force Detach Volume"
					   click="forceDetach_clickHandler(event)"
					   enabled="{detachEnabled}"
					   visible="{cloudAccount.cloud_provider == CloudAccount.AMAZON}"
					   includeInLayout="{cloudAccount.cloud_provider == CloudAccount.AMAZON}"/>
		<c9:TextButton id="delete"
					   text="Delete Volume"
					   click="deleteVolume_clickHandler(event)"
					   enabled="{deleteEnabled}"/>
	</s:HGroup>
	<s:BorderContainer height="100%" width="100%" alpha="1" borderVisible="false">
		<mx:TabNavigator id="ebsDetails" width="100%" height="100%" change="ebsDetails_changeHandler(event)">
			<s:NavigatorContent label="Details" width="100%" height="100%">
				<s:BorderContainer borderVisible="false"  id="details" height="100%" width="100%">
					<s:Scroller width="100%" height="100%">
						<s:viewport>
							<s:HGroup>
								<s:Form>
									<s:layout>
										<s:FormLayout gap="-7"/>
									</s:layout>
									<s:FormItem label="Name:">
										<mx:Text text="{ebsData.name}"/>
									</s:FormItem>
									<s:FormItem label="Description:">
										<mx:Text text="{ebsData.description}"/>
									</s:FormItem>
									<s:FormItem label="Volume ID:">
										<mx:Text text="{ebsData.id}"/>
									</s:FormItem>
									<s:FormItem label="Volume Type:" visible="{cloudAccount.cloud_provider == CloudAccount.AMAZON}" includeInLayout="{cloudAccount.cloud_provider == CloudAccount.AMAZON}">
										<mx:Text text="{ebsData.type}"/>
									</s:FormItem>
									<s:FormItem label="Size:">
										<mx:Text text="{ebsData.size}"/>
									</s:FormItem>
									<s:FormItem label="IOPS:" visible="{iopsVisible}" includeInLayout="{iopsVisible}">
										<mx:Text text="{ebsData.iops}"/>
									</s:FormItem>
									<s:FormItem label="Availability Zone:">
										<mx:Text text="{ebsData.availabilityZone}"/>
									</s:FormItem>
									<s:FormItem label="Snapshot ID:">
										<mx:Text text="{ebsData.snapshotId}"/>
									</s:FormItem>
									<s:FormItem label="Date Created:">
										<mx:Text text="{ebsData.createdAt}"/>
									</s:FormItem>
								</s:Form>
								<s:Form>
									<s:layout>
										<s:FormLayout gap="-7"/>
									</s:layout>
									<s:FormItem label="Instance ID:">
										<mx:Text text="{ebsData.serverId}"/>
									</s:FormItem>
									<s:FormItem label="Device:">
										<mx:Text text="{ebsData.device}"/>
									</s:FormItem>
									<s:FormItem label="Attached Date:">
										<mx:Text text="{ebsData.attachedAt}"/>
									</s:FormItem>
									<s:FormItem label="State:">
										<mx:Text text="{ebsData.state}"/>
									</s:FormItem>
								</s:Form>
							</s:HGroup>
						</s:viewport>
					</s:Scroller>
				</s:BorderContainer>
			</s:NavigatorContent>
			<s:NavigatorContent id="monitoringContent" label="Monitoring" width="100%" height="100%">
				<c9:MonitoringBox id="monitorBox" cloudAccountId="{cloudAccount.id}"/>
			</s:NavigatorContent>
		</mx:TabNavigator>
	</s:BorderContainer>
</c9:ObjectManagementDetailsBox>
