<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  xmlns:c9="com.momentumsi.c9.components.*"
		  width="100%" 
		  height="100%"
		  initialize="init(event)" xmlns:utils="com.adobe.utils.*" xmlns:services="com.momentumsi.c9.services.*">
	
	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.constants.ResourceType;
			import com.momentumsi.c9.models.ProvisionedInstance;
			import com.momentumsi.c9.representers.AutoScaleRepresenter;
			import com.momentumsi.c9.representers.BlockStorageRepresenter;
			import com.momentumsi.c9.representers.LoadBalancerRepresenter;
			import com.momentumsi.c9.representers.MessageQueueRepresenter;
			import com.momentumsi.c9.representers.NotificationTopicRepresenter;
			import com.momentumsi.c9.services.MonitoringService;
			import com.momentumsi.c9.utils.Helpers;
			
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.BusyIndicator;
			
			public static const ELC_REFRESH_NODE:String = "nodeMonitor";
			public static const ELC_REFRESH_NODE_STATS:String = "statsMonitor";
			public static const ELC_REFRESH_CACHE:String = "cacheMonitor";
			public var elcRefresh:String;
			public var clusterId:String;
			
			[Bindable]
			public var resourceData:ProvisionedInstance;
			
			private var app:Object = FlexGlobals.topLevelApplication;			
			[Bindable]
			private var host:String;			
			[Bindable]
			public var cloudAccountId:String;
			[Bindable]
			public var region:String;
			[Bindable]
			public var ec2_account_id:int;
			[Bindable]
			private var addElementsAt:int = 0;
			[Bindable]
			public var selectedBalancer:Object = new Object;			
			[Bindable]
			public var metricName:String = "";
			[Bindable]
			public var monitorIndex:int = 0;			
			[Bindable]
			public var datapoints:XMLListCollection = new XMLListCollection();			
			[Bindable]
			public var resource:ProvisionedInstance;	
			[Bindable]
			public var nodeXML:XML;
			[Bindable]
			private var monitorList:ArrayCollection;


			[Bindable]
			private var cloudObjectName:String;
			[Bindable]
			private var startTimeArray:ArrayCollection = new ArrayCollection([	{label: "Last 3 Hours", value: 10800 },
																				{label: "Last 6 Hours", value: 21600 },
																				{label: "Last 12 Hours", value: 43200 },
																				{label: "Last 24 Hours", value: 86400 },
																				{label: "Last Week", value: 604800 },
																				{label: "Last 2 Weeks", value: 1209600 }
																			 ]);
			[Bindable]
			private var periodArray:ArrayCollection = new ArrayCollection([ {label: "1 Minute", value: 60 },
																			{label: "5 Minutes", value: 300 },
																			{label: "15 Minutes", value: 900 },
																			{label: "1 Hour", value: 3600 }
																		 ]);
			private var lastTime:Date = new Date(0);
			[Bindable]
			public var objectManagement:Boolean = false;
			[Bindable]
			public var objectManagementResource:Object;
			[Bindable]
			public var objectManagementResourceType:String;
			/* performance variables
			private var startTimeSc:Number;
			private var endTimeSc:Number;
			private var firstBack:Boolean;
			private var timeElapsed:Number;
			private var onlyOnce:Boolean = false;
			*/
			
			
			
			private var monitorService:MonitoringService;

			public function init(event:Event):void
			{				
				host = app.GetConfiguration( "serviceUrl" );
				
			}
		
			private var runningStates:ArrayCollection = new ArrayCollection([
				"running",
				"in-use",
				"ok",
				"enabled",
				"active",
				"available"
			])
			public function getDefaultMonitorsCall(type:String):void
			{
				if ((new Date()).time - lastTime.time > 250)
				{		
					if(objectManagement)
					{
						var state:String;
						if(objectManagementResource is LoadBalancerRepresenter || objectManagementResource is AutoScaleRepresenter || 
							objectManagementResource is MessageQueueRepresenter || objectManagementResource is NotificationTopicRepresenter)
						{
							state = "running";
						}else if(objectManagementResource.state != null)
						{
							if(objectManagementResource is BlockStorageRepresenter && objectManagementResource.state == "available")
								state = "notAvailable";
							else
								state = objectManagementResource.state;
						}else if(objectManagementResource.status != null)
						{
							state = objectManagementResource.status;
						}else if(objectManagementResource.CacheNodeStatus != null)
						{
							state = objectManagementResource.CacheNodeStatus
						}
						
						if(state == null)
						{
							state = new String();
						}
						
						state = state.toLowerCase();
						if(runningStates.contains(state.toLowerCase()))
						{
							failText.visible=false;
							monitoringOptions.visible = true;
							graph.removeAllElements();
							addElementsAt = 0;
							cloudObjectName = null;
							switch(type)
							{
								case MonitoringService.EC2_DEFAULT:
								case MonitoringService.EBS_DEFAULT:
								case MonitoringService.RDS_DEFAULT:
									cloudObjectName = objectManagementResource.id.toString();
									break;
								case MonitoringService.ELC_DEFAULT:
								case MonitoringService.ELC_NODE_DEFAULT:
								case MonitoringService.ELC_NODE_STATS:
									cloudObjectName = objectManagementResource.CacheNodeId.toString();
									break;
								case MonitoringService.SNS_DEFAULT:
								case MonitoringService.AS_DEFAULT:
								case MonitoringService.ELB_DEFAULT:
								case MonitoringService.SQS_DEFAULT:
									cloudObjectName = objectManagementResource.name.toString();
									break;
								
							}
							if(cloudObjectName != null)
							{
								monitorService = new MonitoringService();
								monitorService.region = region;
								monitorService.getDefaultMonitors(type);
							}
						}else
						{
							failText.visible=true;
							monitoringOptions.visible = false;
							graph.removeAllElements();
							addElementsAt = 0;
						}
					}else if(resource.status == ProvisionedInstance.RUNNING)
					{
						failText.visible=false;
						monitoringOptions.visible = true;
						graph.removeAllElements();
						addElementsAt = 0;
						cloudObjectName = resource.resourceId;
						
						monitorService = new MonitoringService();
						monitorService.region = region;
						monitorService.getDefaultMonitors(type);

					}else
					{
						failText.visible=true;
						monitoringOptions.visible = false;
						graph.removeAllElements();
						addElementsAt = 0;
					}
				}
				if(monitorService != null)
				{
					monitorService.addEventListener(ResultEvent.RESULT, getDefaultMonitors_resultHandler);
				}
				lastTime = new Date();			
			}
			
			/*********************************************************** Result Handlers *************************************************************/
			
			protected function getDefaultMonitors_resultHandler(event:ResultEvent):void
			{
				/* Code for testing performance
				firstBack = false;
				onlyOnce = false;
				startTimeSc = getTimer();
				*/
				monitorList = new ArrayCollection();
				for each (var item:XML in monitorService.defaultMonitors)
				{
					var loader:GraphLoading = new GraphLoading();
					graph.addElement(loader);
					monitorList.addItem({label: item.child('monitor-metric-name'), index: item.child('id')});
					monitorService = new MonitoringService();
					monitorService.region = region;
					monitorService.request = {
						monitor_description: item.child("monitor-description").toString(),
						monitor_metric_name: item.child("monitor-metric-name").toString(),
						monitor_period: item.child("monitor-period").toString(),
						monitor_statistic_name: item.child("monitor-statistic-name").toString(),
						monitor_unit: item.child("monitor-unit").toString()
					};
					if(clusterId != null)
					{
						monitorService.request["cluster_id"] = clusterId;
					}
					monitorService.cloudAccountId = cloudAccountId;
					monitorService.addEventListener(ResultEvent.RESULT, handleStatsResult);
					monitorService.addEventListener(FaultEvent.FAULT, getStats_faultHandler);
					if(objectManagement)
					{
						monitorService.getStatistics(cloudObjectName, startTime.selectedItem.value, periodTime.selectedItem.value);
					}else
					{
						monitorService.getStatistics(resource.instanceId, startTime.selectedItem.value, periodTime.selectedItem.value);
					}
				}
				
			}
			
			
			public function handleStatsResult(event:ResultEvent):void
			{	
				/* Code for testing performance
				if(!firstBack)
				{
					firstBack = true;
					endTimeSc = getTimer();
					timeElapsed = endTimeSc - startTimeSc;
					Alert.show("First call to first return took: " + timeElapsed + " ms");
				}
				if(!onlyOnce)
				{
					startTimeSc = getTimer();
				}
				*/
				var xml:XML = new XML(event.result);
				metricName = xml.child('Label');
				
				datapoints = new XMLListCollection();
				for each (var datapoint:XML in xml.child("Datapoints").children())
				{
					var ts:String = datapoint.Timestamp;
					datapoint.Timestamp = dateFormat.format(ts);
					datapoints.addItem(datapoint);
				}
				
				var monitorGraph:MonitoringGraph = new MonitoringGraph();
				monitorGraph.metricName = metricName;
				monitorGraph.metricUnit = xml.child('Unit');
				if(datapoints.length != 0)
				{
					monitorGraph.datapoints = datapoints;
				}
				
				if(addElementsAt <= graph.numElements)
				{
					graph.addElementAt(monitorGraph, addElementsAt);
					addElementsAt++;
					graph.removeElementAt(graph.numElements-1);
					/* Code for testing performance
					if(!onlyOnce)
					{
						onlyOnce = true;
						endTimeSc = getTimer();
						timeElapsed = endTimeSc - startTimeSc;
						Alert.show("Graph render took: " + timeElapsed + " ms");
					}
					*/
				}else
				{
					addElementsAt = 0;
				}
			}
			
			protected function startTime_changeHandler(event:ListEvent):void
			{
				var previousPeriodTimeValue:int = periodTime.selectedItem.value;
				switch(startTime.selectedIndex)
				{
					case 0:
					case 1:
					case 2:
					case 3:
						periodArray = new ArrayCollection([{label: "1 Minute", value: 60 },
															{label: "5 Minutes", value: 300 },
															{label: "15 Minutes", value: 900 },
															{label: "1 Hour", value: 3600 }]);
						break;
					case 4:
					case 5:
						periodArray = new ArrayCollection([{label: "15 Minutes", value: 900 },
															{label: "1 Hour", value: 3600 }]);
						break;
				}
				
				var found:Boolean = false;
				var index:int = 0;
				while(!found && index < periodArray.length)
				{
					if(periodArray[index].value == previousPeriodTimeValue)
					{
						periodTime.selectedIndex = index;
						found = true;
					}
					index++;
				}
				
				if(!found)
				{
					periodTime.selectedIndex = 0;
				}
				
				refresh_clickHandler();
			}
			
			protected function refresh_clickHandler():void
			{	
				if(objectManagement)
				{
					getDefaultMonitorsCall(objectManagementResourceType);
				}else
				{
					switch(resource.type)
					{
						case ResourceType.DB_INSTANCE:
							getDefaultMonitorsCall(MonitoringService.RDS_DEFAULT);
							break;
						case ResourceType.LOAD_BALANCER:
							getDefaultMonitorsCall(MonitoringService.ELB_DEFAULT);
							break;
						case ResourceType.SQS_QUEUE:
							getDefaultMonitorsCall(MonitoringService.SQS_DEFAULT);
							break;
						case ResourceType.EBS_VOLUME:
							getDefaultMonitorsCall(MonitoringService.EBS_DEFAULT);
							break;
						case ResourceType.EC2_INSTANCE:
							getDefaultMonitorsCall(MonitoringService.EC2_DEFAULT);
							break;
						case ResourceType.CACHE_NODE:
							switch(elcRefresh)
							{
								case ELC_REFRESH_NODE:
									getDefaultMonitorsCall(MonitoringService.ELC_NODE_DEFAULT);
									break;
								case ELC_REFRESH_NODE_STATS:
									getDefaultMonitorsCall(MonitoringService.ELC_NODE_STATS);
									break;
								case ELC_REFRESH_CACHE:
									getDefaultMonitorsCall(MonitoringService.ELC_DEFAULT);
									break;
							}
							break;
						case ResourceType.SNS_TOPIC:
							getDefaultMonitorsCall(MonitoringService.SNS_DEFAULT);
							break;
						case ResourceType.AS_GROUP:
							getDefaultMonitorsCall(MonitoringService.AS_DEFAULT);
							break;
					}
				}
			}
			
			protected function getStats_faultHandler(event:FaultEvent):void
			{
				var monitorGraph:MonitoringGraph = new MonitoringGraph();
				monitorGraph.metricName = "Data Not Available";
				graph.addElementAt(monitorGraph, addElementsAt);
				addElementsAt++;
				graph.removeElementAt(graph.numElements-1);
			}
			
		]]>
	</fx:Script>	
	<fx:Declarations>
		<mx:DateFormatter id="dateFormat" formatString="MM/DD{'\n'}HH:NN"/>
	</fx:Declarations>
	
	<s:BorderContainer width="100%" height="100%" borderVisible="false">
		<s:VGroup width="100%" height="100%">
			<mx:Text text="{cloudObjectName}" width="100%" fontSize="16" fontWeight="bold"/>
			<mx:Text id="failText" text="Monitoring is not available for this resource at this time." fontSize="14" fontWeight="bold" visible="false"/>
			<s:HGroup id="monitoringOptions">
				<mx:Text text="Time Range:"/>
				<mx:ComboBox id="startTime" dataProvider="{startTimeArray}" selectedIndex="0" change="startTime_changeHandler(event)"/>
				<mx:Text text="Period:"/>
				<mx:ComboBox id="periodTime" dataProvider="{periodArray}" selectedIndex="1" change="refresh_clickHandler()"/>
				<s:Button label="Refresh" click="refresh_clickHandler()"/>
			</s:HGroup>
			<s:Scroller width="100%" height="100%">
				<s:viewport>
					<s:TileGroup id="graph"
								 direction="ltr"
								 width="100%"
								 height="100%"
								 paddingLeft="20"
								 paddingRight="20"
								 paddingTop="20"
								 paddingBottom="20"/>
				</s:viewport>
			</s:Scroller>
		</s:VGroup>
	</s:BorderContainer>
</s:Group>
