<?xml version="1.0" encoding="utf-8"?>
<wizard:WizardWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" width="800" height="570"
			   creationPolicy="auto"
			   creationComplete="creationCompleteHandler(event)"
			   wizardType="{ResourceTypeLabel.EC2}"
			   xmlns:components="com.momentumsi.c9.components.*" 
			   xmlns:services="com.momentumsi.c9.services.*"
			   xmlns:wizard="com.momentumsi.c9.components.wizard.*"
			   xmlns:resources="com.momentumsi.c9.models.resources.*"
			   xmlns:cfInit="com.momentumsi.c9.models.resources.cfInit.*">
	
	<fx:Script>
		<![CDATA[
			import com.adobe.utils.StringUtil;
			import com.maccherone.json.JSON;
			import com.maccherone.json.JSONParseError;
			import com.momentumsi.c9.constants.*;
			import com.momentumsi.c9.events.CheckBoxListItemEvent;
			import com.momentumsi.c9.events.ElementSaveEvent;
			import com.momentumsi.c9.events.compute.*;
			import com.momentumsi.c9.models.*;
			import com.momentumsi.c9.models.resources.*;
			import com.momentumsi.c9.models.resources.cfInit.File;
			import com.momentumsi.c9.models.resources.cfInit.Package;
			import com.momentumsi.c9.services.ApiService;
			import com.momentumsi.c9.templates.*;
			import com.momentumsi.c9.utils.Helpers;
			import com.momentumsi.c9.utils.IntrinsicFunctionUtil;
			import com.momentumsi.c9.utils.VectorUtil;
			
			import flashx.textLayout.compose.TextFlowLine;
			import flashx.textLayout.edit.EditManager;
			import flashx.textLayout.edit.IEditManager;
			import flashx.textLayout.operations.UndoOperation;
			import flashx.undo.IUndoManager;
			import flashx.undo.UndoManager;
			
			import fr.kapit.diagrammer.base.uicomponent.DiagramSprite;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Label;
			import mx.core.IUIComponent;
			import mx.core.UIComponent;
			import mx.core.mx_internal;
			import mx.events.CloseEvent;
			import mx.events.CollectionEvent;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.managers.DragManager;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.Panel;
			import spark.components.RichEditableText;
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;

			private var defaultUserKeys:IamAccessKey;
			[Bindable]
			private var computePrice:String = "N/A";
			[Bindable]
			public var instanceRepresenter:ComputeWizardObjectRepresenter;
			[Bindable]
			public var initialInstalls:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var cfInit:CFInit = new CFInit();
			[Bindable]
			private var loadingResources:Boolean = true;
			[Bindable]
			private var selectedFile:File;
			//Count object for tracking node creation
			private var count:int = 0;
			//Name of created user for installation server
			private var newUserName:String;
			//Track any file changes
			[Bindable]
			private var fileChangesMade:Boolean = false;
			[Bindable]
			public var platform:String;
			[Bindable]
			public var installObject:InstallObject;
			[Bindable]
			private var selectedInstalls:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var availableInstalls:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var availableChefRoles:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var selectedChefRoles:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var availablePuppetModules:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var selectedPuppetModules:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var parser:UserDataParser = new UserDataParser();
			[Bindable]
			private var chefServerUrl:String;
			[Bindable]
			private var chefBucket:String;
			private var chefRunList:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var selectedRecipe:ChefCookbook;
			[Bindable]
			private var selectedRole:ChefRole;
			[Bindable]
			private var selectedModule:PuppetClass;
			private var installParameters:ArrayCollection = new ArrayCollection();
			
			
			override public function applyConfigurations():void
			{
				instanceRepresenter = new ComputeWizardObjectRepresenter(element, projectVersion);
				if(instanceRepresenter.imageId != null)
				{
					instanceWizardViewStack.selectedIndex = 1;
					scaleTypeGroup.selectedValue = instanceRepresenter.elasticityType;
					switch(scaleTypeGroup.selection)
					{		
						case fixedArrayRB:
							fixedArraySize.text = String(instanceRepresenter.minSize);
							break;
						case autoScaleRB:
							autoScaleMin.text = String(instanceRepresenter.minSize);
							autoScaleMax.text = String(instanceRepresenter.maxSize);
							desiredCapacity.text = String(instanceRepresenter.desiredCapacity);
							break;
					}
				}
			}
			
			private function createDefaultUser():void
			{
				//If using chef installs...
				//var newUser:Element = installMethods.chefClientUser;
				var newUser:Element = installObject.user;
				newUserName = newUser.name;
				newUser.projectId = project.project_id;				
				newUser.save(projectVersion);
				//Check if element is created or updated by id
				if(newUser.id == null)
				{
					newUser.addEventListener(ElementSaveEvent.RESULT, externalElement_createHandler);
				}
			}
			
			private function createDefaultUserKeys():void
			{
				var newUserKeys:Element = installObject.userKeys;
				newUserKeys.projectId = project.project_id;
				newUserKeys.save(projectVersion);
			}
			
			private function createInstallsBucketPolicy():void
			{
				//var newBucketPolicy:Element = installMethods.installsBucketPolicy;
				var newBucketPolicy:Element = installObject.installerBucketPolicy;
				newBucketPolicy.projectId = project.project_id;
				newBucketPolicy.save(projectVersion);
				//Check if element is created or updated by id
				if(newBucketPolicy.id == null)
				{
					newBucketPolicy.addEventListener(ElementSaveEvent.RESULT, externalElement_createHandler);
				}
			}
			
			private function createDefaultWaitCondition():void
			{
				var waitCondition:WaitCondition = installObject.getServerWaitCondition();
				waitCondition.projectId = project.project_id;
				waitCondition.save(projectVersion);
				//Check if element is created or updated by id
				if(waitCondition.id == null)
				{
					waitCondition.addEventListener(ElementSaveEvent.RESULT, externalElement_createHandler);
				}
			}
			
			private function createDefaultWaitHandle():void
			{
				var waitHandle:Element = installObject.waitHandle;
				waitHandle.projectId = project.project_id;
				waitHandle.save(projectVersion);
			}
			
			/**
			 * Event Handlers
			 * */
			
			public function externalElement_createHandler(event:ElementSaveEvent):void
			{
				var newNode:Node = new Node();
				var newElement:Element = event.element;
				newNode.elementId = newElement.id;
				newNode.properties = newElement.properties;
				newNode.name = newElement.name;
				newNode.projectVersion = projectVersion;
				newNode.projectId = project.project_id;
				if(node.x > 150)
				{
					newNode.x = node.x - 75;
				}else{
					newNode.x = node.x + 250;
				}
				newNode.y = node.y + (75 * count);
				count = count + 1;
				var userDiagramNode:DiagramSprite;
				if(newElement.elementType == ResourceType.WAIT_CONDITION)
				{
					newNode.view = Node.DEPLOY_VIEW;
				}else{
					newNode.view = Node.DESIGN_VIEW;
					userDiagramNode = diagramNode.diagrammer.addNodeElement(newNode, null, null, new Point(newNode.x, newNode.y)) as DiagramSprite;
					userDiagramNode.isSizeFixed = true;
				}
				newNode.save(projectVersion, userDiagramNode);
			}
			
			public function setComputePrice():void
			{
				var instanceCount:int = 0;
				if(noScaleRB.selected || autoRecoveryRB.selected)
				{
					instanceCount = 1;
				}else if(fixedArrayRB.selected)
				{
					if(Helpers.isValidNumber(fixedArraySize.text))
					{
						instanceCount = parseInt(fixedArraySize.text);
					}
				}else if(autoScaleRB.selected)
				{
					if(Helpers.isValidNumber(autoScaleMin.text))
					{
						instanceCount = parseInt(autoScaleMin.text);
					}
				}
				
				if(machineSize.selectedIndex != -1 && getResourcesSvc.hasOwnProperty('computePrices') && instanceCount > 0)
				{
					var found:Boolean = false;
					for each(var price:Object in getResourcesSvc.computePrices)
					{
						price = price.price;
						if(!found)
						{
							if(cloudAccount.cloud_provider == CloudAccount.AMAZON)
							{
								if(machineSize.selectedItem.id == price.name)
								{
									found = true;
									var priceNumber:Number = (price.effective_price as Number) * instanceCount;
									computePrice = "$" + priceNumber.toFixed(2) + "/" + price.properties.denominator;
									if(monitoring.selected)
									{
										addDetailedMonitoringPrice();
									}
								}
							}else
							{
								if(machineSize.selectedItem.name == price.name)
								{
									found = true;
									computePrice = "$" + (price.effective_price as Number).toFixed(2) + "/" + price.properties.denominator;
								}
							}
						}
					}
					if(!found)
					{
						computePrice = "N/A";
					}
				}else
				{
					computePrice = "N/A";
				}
			}
			
			protected function addDetailedMonitoringPrice():void
			{
				var found:Boolean = false;
				for each(var price:Object in getResourcesSvc.computePrices)
				{
					price = price.price;
					if(!found)
					{
						if("detailed_monitoring" == price.name)
						{
							found = true;
							computePrice = computePrice + " + $" + (price.effective_price as Number).toFixed(2) + "/" + price.properties.denominator;
						}
					}
				}
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				if(installObject != null)
				{
					if(installObject is ChefObject)
					{
						methodRBGroup.selection = chefRB;
					}else if(installObject is PuppetObject)
					{
						methodRBGroup.selection = puppetRB;
					}
				}
				availableChefRoles = cloudAccount.chefRoles;
				availablePuppetModules = cloudAccount.puppetModules;
				selectedInstalls.addAll(initialInstalls);
				getResourcesSvc.getEc2Resources(cloudAccount.cloud_id);				
				imageSelection.cfTemplateMapObject = {};
				
				setupInstallsInformation();
			}
			
			private function setupInstallsInformation():void
			{
				if(selectedInstalls.length > 0)
				{
					var object:Object = selectedInstalls.getItemAt(0);
					if(object != null)
					{
						if(object.hasOwnProperty("chef_type"))
						{
							removeIncompatibleRoles();
							selectedChefRoles = selectedInstalls;
							checkAndSetInstalls(availableRolesList, selectedChefRoles, "chef");
						}else{
							selectedPuppetModules = selectedInstalls;
							checkAndSetInstalls(availableModulesList, selectedPuppetModules, "puppet");
						}
					}
					
					checkAndSetUserdata();
				}
				s3Service.describeBuckets();
				installTabs.removeElementAt(1);
				installTabs.removeElementAt(1);
				
				chefServerUrl = cloudAccount.stackPreferences.chef_server_url;
				chefBucket = cloudAccount.stackPreferences.chef_bucket;
			}
			
			/**
			 * Button click handlers
			 * */
			
			protected function nextButton_clickHandler(event:MouseEvent):void
			{
				var alert:Boolean = false;
				
				switch(instanceWizardViewStack.selectedChild)
				{
					case imageSelectionContent:
						if(!imageSelection.validateFieldInputs())
						{
							alert = true;
						}
						break;
					case instanceConfigurationContent:
						alert = validateMachineName();
						break;
					case instanceInstallsContent:
						alert = validateInstallsData();
						break;
					case elasticityConfigurationContent:
						alert = validateElasticityConfigurations();
						break;
				}

				if(!alert)
				{
					instanceWizardViewStack.selectedIndex++;
				}
			}
			
			private function validateMachineName():Boolean
			{
				var alert:Boolean = false;
				if(StringUtil.trim(machineName.text) != "")
				{
					if(Helpers.validateAlphanumeric(machineName.text))
					{
						if(objectManagementCreate)
						{
							machineNameAlert.visible = false;						
						}else
						{
							if(projectVersion.validateUniqueName(machineName.text, element))
							{
								machineNameAlert.visible = false;
							}else
							{
								machineNameAlert.text = AlertMessage.NOT_UNIQUE;
								machineNameAlert.visible = true;
								alert = true;
							}
						}
					}else
					{
						machineNameAlert.text = AlertMessage.NOTALPHANUMERIC;
						machineNameAlert.visible = true;
						alert = true;
					}
				}else{
					machineNameAlert.text = AlertMessage.INVALID;
					machineNameAlert.visible = true;
					alert = true;
				}
				return alert;
			}
			
			private function validateElasticityConfigurations():Boolean
			{
				var alert:Boolean = false;
				if(fixedArrayRB.selected)
				{
					var fixedArrayNumber:Number = Number(fixedArraySize.text);
					if(fixedArraySize.text != "" && !isNaN(fixedArrayNumber))
					{
						fixedArraySizeAlert.visible = false;
					}else
					{
						alert = true;
						fixedArraySizeAlert.visible = true;
					}
				}else if(autoScaleRB.selected)
				{
					var autoScaleMinNumber:Number = Number(autoScaleMin.text);
					if(autoScaleMin.text != "" && !isNaN(autoScaleMinNumber))
					{
						var autoScaleMaxNumber:Number = Number(autoScaleMax.text);
						if(autoScaleMax.text != "" && !isNaN(autoScaleMaxNumber))
						{
							autoScaleMinMaxAlert.visible = false;
							instanceRepresenter.maxSize = autoScaleMax.text;
							instanceRepresenter.minSize = autoScaleMin.text;
						}else
						{
							alert = true;
							autoScaleMinMaxAlert.visible = true;
						}
					}else
					{
						alert = true;
						autoScaleMinMaxAlert.visible = true;
					}
					
					if(Helpers.StringReplaceAll(desiredCapacity.text, " ", "") != "")
					{
						if(desiredCapacity.text.charAt(0) == "@")
						{
							desiredCapacityAlert.visible = false;
						}else
						{
							var desiredCapacityNumber:Number = Number(desiredCapacity.text);
							if(!isNaN(desiredCapacityNumber))
							{
								if(desiredCapacityNumber >= autoScaleMinNumber && desiredCapacityNumber <= autoScaleMaxNumber)
								{
									desiredCapacityAlert.visible = false;
								}else
								{
									alert = true;
									desiredCapacityAlert.visible = true;	
								}
							}else
							{
								alert = true;
								desiredCapacityAlert.visible = true;
							}
						}
					}
				}
				return alert;
			}
			
			private function validateInstallsData():Boolean
			{
				var alertSent:Boolean = false;
				alertSent = setAndValidateFileContent();
				return alertSent;
			}
			
			private function setAndValidateFileContent():Boolean
			{
				var sendAlert:Boolean = false;
				if(selectedFile != null)
				{
					if(fileContentRB.selected)
					{
						try{
							selectedFile.content = JSON.decode(fileContentTA.text);
							sendAlert = false;
						}catch(error:JSONParseError)
						{
							var errorLocation:int = error.location;
							fileContentTA.selectRange(errorLocation - 1, errorLocation);
							fileContentTA.scrollToRange(errorLocation - 1, errorLocation);
							fileContentTA.setFocus();
							var errorLineNum:int = fileContentTA.textFlow.flowComposer.findLineIndexAtPosition(errorLocation);
							Alert.show("Parsing error around line " + errorLineNum, error.name);
							sendAlert = true;
						}
					}else if(fileSourceRB.selected)
					{
						selectedFile.source = fileSourceTI.text;
						sendAlert = false;
					}
					//Set file in update file
					if(sendAlert == false)
					{
						cfInit.updateFile(selectedFile);
					}
				}
				return sendAlert;
			}
			
			protected function previousButton_clickHandler(event:MouseEvent):void
			{
				instanceWizardViewStack.selectedIndex = instanceWizardViewStack.selectedIndex - 1;
			}
			
			protected function finishButton_clickHandler(event:MouseEvent):void
			{
				computeButtonGroup.createButton.label = "Saving";
				computeButtonGroup.createButton.enabled = false;
				
				var imageId:Object = imageSelection.imageId;
				//Operating system is used in metadata to determine which packages to use and where to place files
				var operatingSystem:String;
				if(!(imageId is String))
				{
					if(!(imageSelection.cfTemplateMapObject is Element))
					{
						var map:Element = new Element();
						for(var n:* in imageSelection.cfTemplateMapObject)
						{
							map.name = n;
							if(map.name.search(PlatformConstants.UBUNTU) != -1)
							{
								
								operatingSystem = PlatformConstants.UBUNTU;
							}else{
								operatingSystem = PlatformConstants.AMAZON_LINUX;
							}
							map.properties = imageSelection.cfTemplateMapObject[n];
							break;
						}
						//Temporary workaround for existing mappings being written over.
						if(map.name != null)
						{
							map.elementGroup = Element.ELEMENT_GROUP_MAPPING;
							map.elementType = ResourceType.MAPPING;
							map.projectId = project.project_id;
							map.save(projectVersion);
						}						
					}
				}
				node.properties.operatingSystem = operatingSystem;
				
				createExternalElements();
				setUserdata();
				setMetadata();
				
				//Check for new EIP
				checkAndCreateEIP();
				
				//Set type for install (chef/puppet/cfInit) node purposes
				//if not set (type = null), then default behavior will be taken 
				var type:String;
				if(methodRBGroup.selection == chefRB)
				{
					type = ResourceType.CHEF_ROLE;
				}else if(methodRBGroup.selection == puppetRB){
					type = ResourceType.PUPPET_MODULE;
				}else{
					type = element.elementType
				}
				node.properties.instanceType = machineSize.selectedItem;
				
				if(scaleTypeGroup.selectedValue == "None")
				{
					var instance:Ec2Instance = instanceRepresenter.getComputeElement();
					element.elementType = ResourceType.EC2_INSTANCE;
					
					saveElement(instance.name, instance.properties, type);
				}else{					
					var autoScaleGroup:ASGroup = instanceRepresenter.getAutoScaleGroup();
					var launchConfig:ASLaunchConfiguration = instanceRepresenter.getLaunchConfiguration();
					launchConfig.projectId = project.project_id;
					launchConfig.save(projectVersion);
					if(scalingTriggerOnOffGroup.selectedValue == "On")
					{
						var trigger:ASTrigger = instanceRepresenter.getTrigger();
						trigger.projectId = project.project_id;
						trigger.dimensions = [{"Name":Dimension.AUTOSCALE_GROUPNAME,"Value":autoScaleGroup.name}];
						trigger.metricName = triggerMeasurement.selectedLabel;
					 	trigger.namespace = "AWS/AutoScaling";
						trigger.period = parseInt(triggerMeasurePeriod.text) * 60;
						trigger.statistic = triggerStatistic.selectedLabel;
						trigger.upperBreachScaleIncrement = triggerUpperBreachScale.text;
						trigger.lowerBreachScaleIncrement = triggerLowerBreachScale.text;
						trigger.breachDuration = parseInt(triggerBreachDuration.text) * 60;
					 	trigger.upperThreshold = triggerUpperThreshold.text;
						trigger.lowerThreshold = triggerLowerThreshold.text;
						trigger.save(projectVersion);
					}
					element.elementType = ResourceType.AS_GROUP;
					saveElement(autoScaleGroup.name, autoScaleGroup.properties, type);
				}
			}
			
			private function checkAndCreateEIP():void
			{
				if(elasticIpList.selectedIndex > 0)
				{
					var ipObj:Object = elasticIpList.selectedItem; 
					if(ipObj.hasOwnProperty('newEIP'))
					{
						var ipElement:ElasticIp = new ElasticIp(null, ipObj.Ref);
						ipElement.projectId = project.project_id;
						ipElement.save(projectVersion);
						
						var ipAssoc:ElasticIpAssociation = new ElasticIpAssociation(null, ipObj.Ref + "Assoc");
						ipAssoc.eip = {Ref: ipObj.Ref};
						ipAssoc.instanceId = {Ref: instanceRepresenter.name};
						ipAssoc.projectId = project.project_id;
						ipAssoc.save(projectVersion);
					}
				}
			}
			
			 private function setUserdata():void
			{
				if(Helpers.isEmptyTextField(userdataTA) == false)
				{
					 try
					 {
						 instanceRepresenter.userdata = JSON.decode(userdataTA.text);
					 } 
					 catch(error:JSONParseError){
						 trace("unable to parse JSON at "+ error.location);
					 } 
				 }else{
					 instanceRepresenter.userdata = null;
				 }
			} 
			
			private function setMetadata():void
			{
				if(Helpers.isEmptyTextField(metadataTA) == false)
				{
					try
					{
						instanceRepresenter.metadata = JSON.decode(metadataTA.text);
						if(installObject is PuppetObject)
						{
							var formItem:FormItem;
							var input:InputComboBox;
							var paramValue:Object;
							var paramName:String;
							for(var index:int; index < installParametersForm.numElements; index ++)
							{
								formItem = installParametersForm.getElementAt(index) as FormItem;
								input = formItem.getElementAt(0) as InputComboBox;
								if(formItem.getElementAt(0) is InputComboBox){
									input = formItem.getElementAt(0) as InputComboBox;
									paramValue = checkForReference(input.text);
									paramName = formItem.label.replace(":", "");
								}
								instanceRepresenter.metadata["Puppet"][paramName] = paramValue;
							}
						}
					} 
					catch(error:JSONParseError){
						trace("unable to parse JSON at "+ error.location);
					} 
				}else{
					instanceRepresenter.metadata = null;
				}
			} 
			
			private function createExternalElements():void
			{
				if(installObject != null)
				{
					createDefaultUser();
					createDefaultUserKeys();
					createInstallsBucketPolicy();
					createDefaultWaitCondition();
					createDefaultWaitHandle();
				}
			}
			
			protected function createNewElasticIpButton_clickHandler(event:MouseEvent):void
			{
				PopUpManager.addPopUp(newElasticIpWindow, this, true);
				PopUpManager.centerPopUp(newElasticIpWindow);				
			}
			
			protected function saveNewEIP_clickHandler(event:MouseEvent):void
			{
				getResourcesSvc.elasticIps.addItemAt({Ref: eipName.text, newEIP: true}, 1);
				elasticIpList.selectedIndex = 1;
				PopUpManager.removePopUp(newElasticIpWindow);
			}
			
			protected function createNewGroupButton_clickHandler(event:MouseEvent):void
			{
				var newSecGroupWindow:SecurityGroupCreateGroup = new SecurityGroupCreateGroup();
				PopUpManager.addPopUp(newSecGroupWindow, UIComponent(parentApplication), true);				
			}
			
			protected function resourcesSetHandler(event:GetResourcesResultEvent):void
			{
				var listItem:Object;
				setInputComboBoxSelection(instanceRepresenter.keyName, keyPair, "name");
				setListSelections(instanceRepresenter.securityGroups, securityGroups, "name", "default");
				setInputComboBoxSelection(instanceRepresenter.instanceType, machineSize, "id");
				setComputePrice();
				if(instanceRepresenter.imageId)
				{
					imageSelection.setImageSelection();
				}
				loadingResources = false;
			}
			
			protected function monitoring_changeHandler(event:Event):void
			{
				instanceRepresenter.monitoringEnabled = monitoring.selected;
				setComputePrice();
			}
			
			protected function terminationProtection_changeHandler(event:Event):void
			{
				instanceRepresenter.disableApiTermination = terminationProtection.selected;
			}
			
			public function applyElasticConfigurations():void
			{
				if(instanceRepresenter.trigger != null){
					scalingTriggerOnOffGroup.selectedValue = 'On';
				}
				if(instanceRepresenter.autoScalingGroup != null)
				{
					if(instanceRepresenter.minSize == instanceRepresenter.maxSize)
					{
						if(instanceRepresenter.minSize == "1")
						{
							scaleTypeGroup.selectedValue = "Auto Recovery";
						}else{
							scaleTypeGroup.selectedValue = "Fixed Array";
							fixedArraySize.text = instanceRepresenter.minSize.toString();
						}
					}else{
						scaleTypeGroup.selectedValue = "Auto Scale";
						autoScaleMin.text = instanceRepresenter.minSize.toString();
						autoScaleMax.text = instanceRepresenter.maxSize.toString();
						desiredCapacity.text = instanceRepresenter.desiredCapacity.toString();
					}
					scaleTypeGroup_changeHandler();
				}
			}
			
			protected function triggerMeasurement_changeHandler(event:ListEvent):void
			{
				//[CPUUtilization, NetworkIn, NetworkOut, DiskWriteOps, DiskReadBytes, DiskReadOps, DiskWriteBytes, Latency, RequestCount, HealthyHostCount, UnhealthyHostCount]
				switch (triggerMeasurement.selectedIndex)
				{
					case 0:
						triggerUnit.text = "Percent";
						break;
					case 1:
					case 2:
					case 4:
					case 6:
						triggerUnit.text = "Bytes";
						break;
					case 7:
						triggerUnit.text = "Seconds";
						break;
					case 3:
					case 5:
					case 8:
					case 9:
					case 10:
						triggerUnit.text = "Count";
						break;
				}
				
				if(triggerMeasurement.selectedIndex == 0)
				{
					upperThresholdLbl.text = "(0-100)";
					lowerThresholdLbl.text = "(0-100)";
				}else{
					upperThresholdLbl.text = "(0-20000000)";
					lowerThresholdLbl.text = "(0-20000000)";
				}
				
				if(triggerMeasurement.selectedIndex == 0)
				{
					triggerUpperThreshold.text = "80";
					triggerLowerThreshold.text = "20";
				}else if(triggerMeasurement.selectedIndex == 7)
				{
					triggerUpperThreshold.text = "60";
					triggerLowerThreshold.text = "10";
				}else{
					triggerUpperThreshold.text = "6000000";
					triggerLowerThreshold.text = "2000000";
				}
				
			}
			
			
			protected function scaleTypeGroup_changeHandler():void
			{				
				if(scaleTypeGroup.selection == noScaleRB)
				{
					workspaceImage.source = ImagePath.NEW_EC2;
					monitoring.selected = false;
				}else if(scaleTypeGroup.selection == autoRecoveryRB)
				{
					instanceRepresenter.minSize = "1";
					instanceRepresenter.maxSize = "1";
					workspaceImage.source = ImagePath.NEW_AUTORECOVER;
					monitoring.selected = true;
				}else if(scaleTypeGroup.selection == fixedArrayRB)
				{
					workspaceImage.source = ImagePath.NEW_AUTOSCALE;
					monitoring.selected = true;
				}else if(scaleTypeGroup.selection == autoScaleRB)
				{
					workspaceImage.source = ImagePath.NEW_AUTOSCALE;
					monitoring.selected = true;
				}	
				
				setComputePrice();
			}
			
			protected function autoScale_changeHandler(event:TextOperationEvent):void
			{
				setComputePrice();
				switch(event.target)
				{
					case fixedArraySize:
						instanceRepresenter.minSize = fixedArraySize.text;
						instanceRepresenter.maxSize = fixedArraySize.text;
						break;
					case autoScaleMax:
						instanceRepresenter.maxSize = autoScaleMax.text;
						break;
					case autoScaleMin:
						instanceRepresenter.minSize = autoScaleMin.text;
						break;
					case desiredCapacity:
						instanceRepresenter.desiredCapacity = desiredCapacity.text;
						break;
				}
			}

			protected function keyPair_valueCommitHandler(event:FlexEvent):void
			{
				instanceRepresenter.keyName = checkForReference(keyPair.text);
			}
			
			protected function machineSize_valueCommitHandler(event:FlexEvent):void
			{
				instanceRepresenter.instanceType = checkForReference(machineSize.text);
				setComputePrice();
			}
			
			protected function desiredCapacity_valueCommitHandler(event:FlexEvent):void
			{
				instanceRepresenter.desiredCapacity = checkForReference(desiredCapacity.text);
			}
			
			protected function packageManagerList_creationCompleteHandler(event:FlexEvent):void
			{
				packageManagerList.addEventListener(CheckBoxListItemEvent.ITEM_SELECTION_CHANGE, packageManager_selectionHandler);
			}
			
			private function packageManager_selectionHandler(event:CheckBoxListItemEvent):void
			{
				
			}
			
			protected function packagesList_creationCompleteHandler(event:FlexEvent):void
			{
				packagesList.addEventListener(CheckBoxListItemEvent.ITEM_SELECTION_CHANGE, packages_selectionHandler);
			}
			
			private function packages_selectionHandler(event:CheckBoxListItemEvent):void
			{
				if(event.item.data == null)
				{
					return;
				}
				var packageItem:Package = event.item.data as Package;
				switch(packageItem.packageManager)
				{
					case CFInit.APT_PACKAGE:
						aptPackageManager.selected = true;
						break;
					case CFInit.RUBYGEMS_PACKAGE:
						rubygemsPackageManager.selected = true;
						break;
						
				}
			}
			
			protected function packageVersionsList_creationCompleteHandler(event:FlexEvent):void
			{
				packageVersionsList.addEventListener(CheckBoxListItemEvent.ITEM_SELECTION_CHANGE, versions_selectionHandler);
			}
			
			private function versions_selectionHandler(event:CheckBoxListItemEvent):void
			{
				
			}
			
			protected function cfInitFilesList_valueCommitHandler(event:FlexEvent):void
			{
				//Save current file contents
				if(fileChangesMade)
				{
					var alertSent:Boolean = setAndValidateFileContent();
					if(alertSent == true)
					{
						return;
					}else{
						fileChangesMade = false;
					}
				}
				
				//If save button is enabled, then the user has unsaved changes.
				//Prevent changes from being erased
				/* if(fileContentSaveButton.enabled)
				{
					event.preventDefault();
					Alert.show("Please save or discard changes before changing file selection.");
					return;
				} */
				
				selectedFile = cfInitFilesList.selectedItem as File;
				if(selectedFile.content != null)
				{
					fileContentRB.selected = true;
				}else{
					fileSourceRB.selected = true;
				}
			}
			
			protected function getResourcesSvc_getResourcesFaultHandler(event:GetResourcesFaultEvent):void
			{
				loadingResources = false;
				PopUpManager.removePopUp(this);
			}
			
			protected function addPackageButton_clickHandler(event:MouseEvent):void
			{
				var addPackageWindow:AddPackageWindow = new AddPackageWindow();
				addPackageWindow.existingPackages = cfInit.packages;
				addPackageWindow.addEventListener(CloseEvent.CLOSE, addPackageWindow_closeHandler);
				PopUpManager.addPopUp(addPackageWindow, UIComponent(parentApplication), true);
			}
			
			private function addPackageWindow_closeHandler(event:CloseEvent):void
			{
				var window:AddPackageWindow = event.currentTarget as AddPackageWindow;
				PopUpManager.removePopUp(window);
				setSelectedPackages();
			}
			
			protected function fileContentTA_keyFocusChangeHandler(event:FocusEvent):void
			{
				event.preventDefault();
				(event.currentTarget as TextArea).insertText("\t");
			}
			
			protected function fileContentDiscardButton_clickHandler(event:MouseEvent):void
			{
				fileContentTA.text = selectedFile.contentString;
				//fileContentSaveButton.enabled = false;
				fileChangesMade = false;
			}
			
			//Detect any file changes
			protected function file_textInputHandler(event:TextEvent):void
			{
				fileChangesMade = true;
			}
			
			protected function file_keyDownHandler(event:KeyboardEvent):void
			{
				if(event.keyCode == Keyboard.BACKSPACE || event.keyCode == Keyboard.DELETE)
				{
					fileChangesMade = true;
				}
			}
			
			protected function addFileButton_clickHandler(event:MouseEvent):void
			{
				var addFileWindow:AddFileWindow = new AddFileWindow();
				addFileWindow.files = cfInit.files;
				PopUpManager.addPopUp(addFileWindow, UIComponent(parentApplication), true);
			}
			
			protected function removeFileButton_clickHandler(event:MouseEvent):void
			{
				var fileIndex:int = cfInit.files.getItemIndex(selectedFile);
				cfInit.files.removeItemAt(fileIndex);
			}
			
			protected function removePackageButton_clickHandler(event:MouseEvent):void
			{
				var packageIndex:int = cfInit.packages.getItemIndex(packagesList.selectedItem);
				cfInit.packages.removeItemAt(packageIndex);
			}
			
			protected function removeVersionButton_clickHandler(event:MouseEvent):void
			{
				var selectedPackage:Package = packagesList.selectedItem as Package;
				var versionIndex:int = selectedPackage.versions.getItemIndex(packageVersionsList.selectedItem);
				selectedPackage.versions.removeItemAt(versionIndex);
			}
			
			protected function instanceWizardViewStack_changeHandler(event:IndexChangedEvent):void
			{
				if(instanceWizardViewStack.selectedChild == instanceInstallsContent)
				{
					if(installObject != null && element.id == null)
					{
						if(installObject is PuppetObject)
						{
							if(imageSelection.platform == PlatformConstants.UBUNTU)
							{
								installObject = new UbuntuPuppet(installObject.roles, installObject.serverUrl, installObject.installerBucket);
							}else{
								installObject = new AwsLinuxPuppet(installObject.roles, installObject.serverUrl, installObject.installerBucket);
							}
						}
						installObject.resourceName = machineName.text;
						instanceRepresenter.metadata = installObject.metadata;
						instanceRepresenter.userdata = installObject.userdata;
					}
					if(instanceRepresenter.metadata != null || instanceRepresenter.userdata != null)
					{
						setInstanceData();
					}
					
				}else if(instanceWizardViewStack.selectedChild == installationParametersContent)
				{
					if(installParameters.length > 0)
					{
						installParametersLabel.text = "Set Install Parameters:";
						installParametersBC.includeInLayout = true;
						var formItem:FormItem;
						var textInput:InputComboBox;
						for each(var parameter:Object in installParameters)
						{
							formItem = new FormItem();
							formItem.label = parameter.name;
							textInput = new InputComboBox();
							textInput.projectVersion = projectVersion;
							textInput.textInputField = true;
							textInput.width = 275;
							textInput.text = String(parameter.value).replace(/\"/g,"");
							formItem.addElement(textInput);
							installParametersForm.addElement(formItem);
						}
					}else{
						installParametersLabel.text = "No Parameters Available.  Press 'Next' to continue.";
						installParametersBC.includeInLayout = false;
					}
				}
			}
			
			private function setInstanceData():void
			{
				if(instanceRepresenter.userdata != null)
				{
					userdataTA.text = JSON.encode(instanceRepresenter.userdata, true);					
				}
				if(instanceRepresenter.metadata != null)
				{
					if(instanceRepresenter.metadata.hasOwnProperty(ResourceType.CF_INIT))
					{
						cfInit = CFInit.buildCFInit(instanceRepresenter.metadata[ResourceType.CF_INIT]);
						cfInit.addEventListener(CollectionEvent.COLLECTION_CHANGE, updateMetadata);
						if(cfInit.packages.length > 0)
						{
							setSelectedPackages();
						}
					}
					metadataTA.text = JSON.encode(instanceRepresenter.metadata, true);
				}
				
			}
			
			private function updateMetadata(event:CollectionEvent):void
			{
				instanceRepresenter.cfInit = cfInit.toJson();
				metadataTA.text = JSON.encode(instanceRepresenter.metadata, true);
			}
			
			private function setSelectedPackages():void
			{
				if(cfInit.aptPackages.length > 0)
				{
					aptPackageManager.selected = true;
				}
				if(cfInit.yumPackages.length > 0)
				{
					yumPackageManager.selected = true;
				}
				if(cfInit.pythonPackages.length > 0)
				{
					pythonPackageManager.selected = true;
				}
				if(cfInit.rpmPackages.length > 0)
				{
					rpmPackageManager.selected = true;
				}
				if(cfInit.rubygemsPackages.length > 0)
				{
					rubygemsPackageManager.selected = true;
				}
				
				for each(var listItem:CheckBoxListItem in packageManagerList)
				{
					if(listItem.selected)
					{
						packageManagerList.selectedItem = listItem;
						break;
					}
				}
			}
			
			protected function securityGroups_valueCommitHandler(event:FlexEvent):void
			{
				instanceRepresenter.selectedSecurityGroups = securityGroups.selectedItems;
			}
			
			
			
			/******************************************************
			 * ******************************************************
			 * ******************************************************
			 * 
			 * 
			 * Bootstrap installation methods
			 * 
			 * 
			 * ******************************************************
			 * ******************************************************
			 * ******************************************************/
			
			
			protected function dragEnterHandler(event:DragEvent):void
			{
				DragManager.acceptDragDrop(event.currentTarget as IUIComponent);
			}
			
			protected function dragDropHandler(event:DragEvent):void
			{
				var installSections:VGroup = event.currentTarget as VGroup;
				//var dropIndex:int = installSections.getElementIndex(dropPanel);
				installSections.addElement(event.dragInitiator as Panel);
			}
			
			private function removeIncompatibleRoles():void
			{
				var compatibleColl:ArrayCollection = new ArrayCollection();
				if(platform == null || availableChefRoles == null || availableChefRoles.length == 0)
				{
					return;
				}
				for each(var role:ChefRole in availableChefRoles)
				{
					if(role.availablePlatforms.contains(platform.toLocaleLowerCase()))
					{
						compatibleColl.addItem(role);
					}
				}
				
				availableChefRoles = compatibleColl;
			}
			
			private function checkAndSetInstalls(availableList:List, selectedInstalls:ArrayCollection, type:String):void
			{
				if(selectedInstalls.length > 0)
				{
					var tmpColl:ArrayCollection = new ArrayCollection();
					tmpColl.addAll(selectedInstalls);
					var listCollection:ArrayCollection = new ArrayCollection(availableList.dataProvider.toArray());
					var listItem:Object;
					if(tmpColl.source && tmpColl.source.length > 0)
					{
						var itemIndex:int;
						for each(var obj:Object in tmpColl)
						{
							for each(listItem in listCollection)
							{
								if(listItem.name == obj.name)
								{
									itemIndex = listCollection.getItemIndex(listItem);
									availableList.selectedIndex = itemIndex;
									for each(var arg:Object in (listItem as PuppetClass).classArguments)
									{
										if(installParameters.contains(arg) == false)
										{
											installParameters.addItem(arg);
										}
									}
									break;
								}
							}
						}
					}
				}
				
				if(type == "chef")
				{
					methodRBGroup.selection = chefRB;
				}else{
					methodRBGroup.selection = puppetRB;
				}
			}
			
			private function checkAndSetUserdata():void
			{
				if(instanceRepresenter.userdata)
				{
					parser.extractCode(instanceRepresenter.userdata);	
				}else{
					parser.extractCode();
				}
				for each(var panel:BootstrapPanel in parser.fileSections)
				{
					userdataVG.addElement(panel);
				}
				if(parser.fileSections.length == 0)
				{
					methodRBGroup.selection = noInstallsRB;
				}
			}
			
			private function getBucketContents(event:ListEvent):void
			{
				s3Service.listBucket(String(installScriptBucketsCB.selectedItem.key));
			}
			
			private function installList_labelFunction(item:Object):String
			{
				var keyName:String = item.key;
				return keyName;
			}
			
			
			protected function addButton_clickHandler():void
			{
				var newInstall:BootstrapPanel;
				var newInstallParser:UserDataParser;
				var bucketName:String;
				var scriptName:String;
				var index:int;
				var selectedItem:Object;
				switch(methodRBGroup.selection)
				{
					case chefRB:
						addSelectedInstalls(availableRolesList.selectedItems, selectedChefRoles);
						break;
					case puppetRB:
						addSelectedInstalls(availableModulesList.selectedItems, selectedPuppetModules);
						break;
					case initRB:
						if(selectedInstalls.getItemIndex(availableInstallsList.selectedItem) == -1)
						{
							for each(selectedItem in availableInstallsList.selectedItems)
							{
								newInstallParser = new UserDataParser();
								index = availableInstallsList.dataProvider.getItemIndex(selectedItem);
								selectedInstalls.addItemAt(selectedItem, 0);
								availableInstallsList.dataProvider.removeItemAt(index);
								bucketName = String(installScriptBucketsCB.selectedItem.name);
								scriptName = selectedItem.key;
								newInstallParser.addInstall(bucketName, scriptName, scriptName.split("_")[0]);
								index = userdataVG.numElements;
								if(index == 0)
								{
									index = 1;
								}
								newInstall = newInstallParser.fileSections.getItemAt(0) as BootstrapPanel;
								newInstall.install = selectedItem;
								userdataVG.addElementAt(newInstall, index - 1);
								parser.fileSections.addItemAt(newInstallParser.fileSections.getItemAt(0), index - 1);
								newInstall.getParameters(cloudAccount.id, bucketName, scriptName);
							}
						}
						break;
				}
			}
			
			private function addSelectedInstalls(itemsToAdd:Vector.<Object>, currentCollection:ArrayCollection):void
			{
				//UnaddedItems array is used to display which items were selected, 
				//but not added because already in selected list
				var unaddedItems:Array = [];
				
				var selectedItem:Object;
				for each(selectedItem in itemsToAdd)
				{
					if(currentCollection.contains(selectedItem))
					{
						unaddedItems.push(selectedItem.name);
					}else{
						installObject.addRole(selectedItem.name);
						currentCollection.addItemAt(selectedItem, 0);
						if(selectedItem is PuppetClass)
						{
							for each(var arg:Object in (selectedItem as PuppetClass).classArguments)
							{
								if(installParameters.contains(arg) == false)
								{
									installParameters.addItem(arg);
								}
							}
							
						}
					}
				}
				if(unaddedItems.length > 0)
				{
					Alert.show("[" + unaddedItems.join(',') + "] already in list.");
				}
			}
			
			private function removeSelectedInstalls(list:List, currentCollection:ArrayCollection):void
			{
				var selectedItem:Object;
				for each(selectedItem in list.selectedItems)
				{
					currentCollection.removeItemAt(list.dataProvider.getItemIndex(selectedItem));
					if(selectedItem is PuppetClass)
					{
						for each(var parameter:Object in (selectedItem as PuppetClass).classArguments)
						{
							for each(var item:Object in installParameters)
							{
								if(parameter == item)
								{
									installParameters.removeItemAt(installParameters.getItemIndex(item));
								}
							}
						}
					}
				}
			}
			
			protected function removeButton_clickHandler(event:MouseEvent):void
			{
				var selectedItem:Object;
				switch(methodRBGroup.selection)
				{
					case chefRB:
						removeSelectedInstalls(selectedRolesList, selectedChefRoles);
						break;
					case puppetRB:
						removeSelectedInstalls(selectedModulesList, selectedPuppetModules);
						break;
					case initRB:
						for each(selectedItem in selectedInstallsList.selectedItems)
					{
						selectedInstalls.removeItemAt(selectedInstallsList.dataProvider.getItemIndex(selectedItem));
						
						availableInstallsList.dataProvider.addItemAt(selectedItem, 0);
						
						var panel:DraggableTextPanel;
						for(var index:int = 0; index < userdataVG.numElements; index++)
						{
							panel = userdataVG.getElementAt(index) as DraggableTextPanel;
							if(panel.install == selectedItem)
							{
								userdataVG.removeElement(panel);							
							}
						}
					}
						break;
				}
			}
			
			protected function methodRBGroup_changeHandler(event:Event):void
			{
				if(methodRBGroup.selection == noInstallsRB)
				{
					installTabs.enabled = false;
				}else{
					installTabs.enabled = true;
					installTabs.removeElementAt(0);
					if(methodRBGroup.selection == chefRB)
					{
						installTabs.addElementAt(chefContent, 0);
					}else if(methodRBGroup.selection == initRB)
					{
						installTabs.addElementAt(initContent, 0);
					}else if(methodRBGroup.selection == puppetRB)
					{
						installTabs.addElementAt(puppetContent, 0);
					}
					installTabs.selectedIndex = 0;
				}
			}
			
			protected function parametersService_resultHandler(event:ResultEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function availableRolesList_valueCommitHandler(event:FlexEvent):void
			{
				if(availableChefRoles.length == 0)
				{
					return;
				}
				selectedRole = availableRolesList.selectedItem as ChefRole;
				if(selectedRole != null)
				{
					runListCB.dataProvider = selectedRole.cookbooks;
				}
			}
			
			protected function availableModulesList_valueCommitHandler(event:FlexEvent):void
			{
				if(availablePuppetModules.length == 0)
				{
					return;
				}
				selectedModule = availableModulesList.selectedItem as PuppetClass;
				//if(selectedModule != null)
				//{
				//	classesListCB.dataProvider = new ArrayCollection([selectedModule.puppetClass]);
				//}
			}
			 
			
			protected function elasticIpList_valueCommitHandler(event:FlexEvent):void
			{
				eipReviewLabel.text = elasticIpList.selectedLabel;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<services:Ec2Service id="getResourcesSvc"
							 cloudAccountId="{cloudAccount.id}"
							 region="{region}"
							 instanceRepresenter="{instanceRepresenter}"
							 getResourcesResult="resourcesSetHandler(event)"
							 getResourcesFault="getResourcesSvc_getResourcesFaultHandler(event)"/>
		
		<s:TitleWindow id="newElasticIpWindow" width="300" close="PopUpManager.removePopUp(newElasticIpWindow)"
					   title="New Address">
			<s:VGroup height="100%" width="100%">
				<s:FormItem label="Name:" width="100%">
					<s:TextInput id="eipName" 
								 text="MyEIP"
								 width="100%"/>
				</s:FormItem>
				<s:HGroup width="100%" horizontalAlign="center" paddingBottom="5">
					<s:Button label="OK" click="saveNewEIP_clickHandler(event)"/>
					<s:Button label="Cancel" click="PopUpManager.removePopUp(newElasticIpWindow)"/>
				</s:HGroup>
			</s:VGroup>
		</s:TitleWindow>
		
		<s:NumberValidator id="numValid1"
						   source="{fixedArraySize}"
						   property="text"
						   minValue="0"
						   maxValue="255"
						   domain="int"/>
		<s:NumberValidator id="numValid2"
						   source="{autoScaleMin}"
						   property="text"
						   minValue="0" 
						   maxValue="255"
						   domain="int"/>
		<s:NumberValidator id="numValid3"
						   source="{autoScaleMax}"
						   property="text"
						   minValue="0" 
						   maxValue="255"
						   domain="int"/>
		
		<s:RadioButtonGroup id="scalingTriggerOnOffGroup"/>
		<s:RadioButtonGroup id="scaleTypeGroup"
							change="scaleTypeGroup_changeHandler()"/>
		
		<s:RadioButtonGroup id="methodRBGroup"
							valueCommit="methodRBGroup_changeHandler(event)"/>
		
		<services:S3Service id="s3Service"
							cloudAccountId="{cloudAccount.id}"
							region="{region}"/>
		
		<services:CloudApiService id="parametersService"
								  cloudAccountId="{cloudAccount.id}"
								  region="{region}"
								  result="parametersService_resultHandler(event)"/>
		
	</fx:Declarations>
	<s:VGroup id="computeWizardVG"
			  height="100%" width="100%"
			  gap="0">
		<wizard:WizardWindowTitle id="computeWizardTitle" includeInLayout="false"
								  width="100%"
								  resourceImage="{ImagePath.NEW_EC2}"
								  resourceLabel="{wizardDisplayName}"
								  wizardStack="{instanceWizardViewStack}"/>
		<wizard:CookieTrail id="computeCookieTrail"
							wizardStack="{instanceWizardViewStack}"
							width="100%"/>
		<mx:ViewStack id="instanceWizardViewStack"
					  height="100%" width="100%"
					  change="instanceWizardViewStack_changeHandler(event)"
					  creationPolicy="all">
			<s:NavigatorContent id="imageSelectionContent"
								label="Select Image"
								height="100%" width="100%">
				<s:VGroup height="100%" width="100%">
					<s:VGroup width="100%" height="100%"
							  visible="{loadingResources}" 
							  includeInLayout="{loadingResources}"
							  horizontalAlign="center" verticalAlign="middle">
						<s:BusyIndicator width="100" height="100"/>
						<s:Label text="Loading Resources..." fontSize="16"/>
					</s:VGroup>
					<components:Ec2ImageSelection id="imageSelection"
												  height="100%" width="100%"
												  platform="{platform}"
												  cloudAccount="{cloudAccount}"
												  imageId="@{instanceRepresenter.imageId}"
												  projectVersion="{projectVersion}"
												  runningInstances="{getResourcesSvc.runningInstances}"
												  userImages="{getResourcesSvc.userImages}"
												  visible="{!loadingResources}"
												  includeInLayout="{!loadingResources}"/>
				</s:VGroup>
			</s:NavigatorContent>
			<s:NavigatorContent id="instanceConfigurationContent"
								label="Instance Configurations"
								height="100%" width="100%">
				<s:VGroup width="100%" height="100%"
						  visible="{loadingResources}" 
						  includeInLayout="{loadingResources}" 
						  horizontalAlign="center" verticalAlign="middle">
					<s:BusyIndicator width="100" height="100"/>
					<s:Label text="Loading Resources..." fontSize="16"/>
				</s:VGroup>
				<s:VGroup height="100%" width="100%" visible="{!loadingResources}" includeInLayout="{!loadingResources}">
							<s:Form height="100%" width="100%" textAlign="right">
								<s:layout>
									<s:FormLayout gap="-7"/>
								</s:layout>
								<s:FormItem width="428" label="Name*:">
									<s:HGroup>
										<s:TextInput id="machineName" 
													 text="@{instanceRepresenter.name}" 
													 width="150"
													 textAlign="left"/>
										<mx:Text id="machineNameAlert"
												 text="This field must be alphanumeric." 
												 color="red" visible="false"/>
									</s:HGroup>
								</s:FormItem>
								<s:FormItem label="Key Pair*:" width="100%">
									<components:InputComboBox id="keyPair"
															  projectVersion="{projectVersion}"
															  dataProvider="{getResourcesSvc.keyPairs}"
															  defaultDataProvider="{getResourcesSvc.keyPairs}"
															  prompt="Select Key Pair"
															  width="200"
															  labelField="name"
															  defaultLabelField="name"
															  textAlign="left"
															  valueCommit="keyPair_valueCommitHandler(event)"/>
								</s:FormItem>
								<s:FormItem label="Machine Size*:" width="100%">
									<s:HGroup textAlign="left">
										<components:InputComboBox id="machineSize"
																  projectVersion="{projectVersion}"
																  dataProvider="{getResourcesSvc.types}"
																  defaultDataProvider="{getResourcesSvc.types}"
																  prompt="Select Size"
																  width="200"
																  labelField="id"
																  defaultLabelField="id"
																  textAlign="left"
																  valueCommit="machineSize_valueCommitHandler(event)"/>
										<s:VGroup height="100%" verticalAlign="middle">
											<components:HelperIcon toolTip="(CPU Units, CPU Cores, Memory)"/>
										</s:VGroup>
										<mx:Text text="Cost: {computePrice}"/>
									</s:HGroup>
								</s:FormItem>
								<s:FormItem label="Security Group(s)*:"
											width="100%">
									<s:VGroup width="100%"
											  textAlign="left">
										<s:HGroup width="100%">
											<s:List id="securityGroups"
													minWidth="300" maxWidth="550"
													height="150"
													allowMultipleSelection="true"
													dataProvider="{getResourcesSvc.securityGroups}"
													valueCommit="securityGroups_valueCommitHandler(event)"
													labelFunction="{wizardLabelFunction}"/>
											<s:Button id="createNewGroupButton" 
													  width="158"
													  label="Create New Group"
													  visible="false"
													  enabled="false"
													  click="createNewGroupButton_clickHandler(event)"/>
										</s:HGroup>
										<s:Label text="Select one or more security groups."/>
									</s:VGroup>
								</s:FormItem>
								<s:FormItem label="Description:">
									<s:TextInput id="machineDescrip" 
												 width="300" 
												 textAlign="left"/>
								</s:FormItem>
								<s:HGroup paddingTop="5" paddingBottom="5" 
										  textAlign="left">
									<s:Label text="The following will not be applied if elasticity is set to anything other than 'None'."/>
								</s:HGroup>		
								<s:FormItem label="Elastic IP:"
											width="100%">
									<s:HGroup width="100%" 
											  textAlign="left">
										<mx:ComboBox id="elasticIpList"
													 width="200"
													 dataProvider="{getResourcesSvc.elasticIps}"
													 labelFunction="{wizardLabelFunction}"
													 valueCommit="elasticIpList_valueCommitHandler(event)"
													 selectedIndex="0"/>
										<s:Button id="createNewElasticIpButton"
												  label="Create New IP"
												  click="createNewElasticIpButton_clickHandler(event)"/>
									</s:HGroup>
								</s:FormItem>
								<s:HGroup>
									<s:FormItem label="Monitoring:">
										<s:HGroup textAlign="left">
											<s:CheckBox id="monitoring"
														selected="{instanceRepresenter.monitoringEnabled}"
														change="monitoring_changeHandler(event)"/>
											<s:VGroup verticalAlign="middle" height="100%">
												<s:Image width="16" height="16"
														 source="{ImagePath.HELPER_ICON}"
														 toolTip="Enable detailed monitoring for this instance."/>
											</s:VGroup>
										</s:HGroup>
									</s:FormItem>
									<s:FormItem label="Termination Protection:">
										<s:HGroup textAlign="left">
											<s:CheckBox id="terminationProtection"
														change="terminationProtection_changeHandler(event)"
														selected="{instanceRepresenter.disableApiTermination}"/>
											<s:VGroup verticalAlign="middle" height="100%">
												<s:Image width="16" height="16"
														 source="{ImagePath.HELPER_ICON}"
														 toolTip="Disables termination of instance through API until Termination Protection is disabled."/>
											</s:VGroup>
										</s:HGroup>
									</s:FormItem>
								</s:HGroup>		
							</s:Form>
				</s:VGroup>
			</s:NavigatorContent>
			<s:NavigatorContent id="instanceInstallsContent"
								label="Set Installs"
								height="100%" width="100%"
								enabled="true">
				<s:Group width="100%" height="100%">
					<s:Rect width="100%" height="100%">
						<s:fill>
							<s:SolidColor color="#FFFFFF"/>
						</s:fill>
					</s:Rect>
					<mx:TabNavigator width="100%" height="100%"
									 creationPolicy="all">						
						<s:NavigatorContent height="100%" width="100%" label="Installs">
							<s:layout>
								<s:ConstraintLayout/>
							</s:layout>
							<mx:VDividedBox x="0" y="0">
								<s:FormItem id="installMethodFI"
											height="72"
											label="Method:">
									<s:HGroup id="installMethodRBHG"
											  height="57">
										<s:RadioButton id="initRB" group="{methodRBGroup}"/>
										<s:VGroup>
											<s:Image width="38" height="38"
													 smoothingQuality="high" smooth="true"
													 source="{ImagePath.CLOUD_FORMATION_LOGO}"/>
											<s:Label fontFamily="Arial" fontSize="8" fontWeight="bold"
													 text="Native &#xd;(CF-Init)" textAlign="center" verticalAlign="top"/>
										</s:VGroup>
										<s:RadioButton id="chefRB" 
													   group="{methodRBGroup}"/>
										<s:VGroup width="80" horizontalAlign="center" gap="0">
											<s:Image height="55%" width="55%" 
													 scaleMode="letterbox" 
													 smoothingQuality="high" smooth="true" 
													 source="{ImagePath.CHEF_LOGO}"/>
										</s:VGroup>
										<s:RadioButton id="puppetRB" group="{methodRBGroup}"/>
										<s:VGroup horizontalAlign="center">	
											<s:Image source="{ImagePath.PUPPET_LOGO}"
													 smoothingQuality="high"
													 smooth="true"
													 scaleX=".50" scaleY=".50"/>
										</s:VGroup>
										<s:RadioButton id="noInstallsRB"
													   label="None" 
													   fontFamily="Arial" fontWeight="bold"
													   selected="true"
													   group="{methodRBGroup}"/>
									</s:HGroup>
								</s:FormItem>
								<s:BorderContainer id="installMethodContainer" width="100%"
												   height="100%" borderVisible="false">
									<s:Scroller height="310">
										<s:VGroup>
											<mx:TabNavigator id="installTabs" 
															 width="100%" height="100%" 
															 selectedIndex="1"
															 enabled="false">
												<s:NavigatorContent  id="initContent" label="CF-Init" height="100%" width="100%">
													<s:VGroup height="100%" width="100%">
														<s:FormItem label="S3 Bucket Name:">
															<s:HGroup>
																<mx:ComboBox id="installScriptBucketsCB"
																			 width="218" 
																			 selectedIndex="0"
																			 labelField="key"
																			 prompt="Select Bucket"
																			 change="getBucketContents(event)"								    
																			 dataProvider="{s3Service.buckets}">
																</mx:ComboBox>
															</s:HGroup>
														</s:FormItem>
														<s:HGroup width="100%" height="100%">
															<s:List id="availableInstallsList"
																	width="100%" height="100%"
																	allowMultipleSelection="true"
																	dataProvider="{s3Service.bucketContents}"
																	labelFunction="installList_labelFunction"/>
															<s:VGroup height="100%" verticalAlign="middle">
																<s:Button label="Add"
																		  click="addButton_clickHandler()"
																		  enabled="{availableInstallsList.selectedItem != null}"/>
																<s:Button label="Remove" 
																		  click="removeButton_clickHandler(event)"
																		  enabled="{selectedInstallsList.selectedItem != null}"/>
															</s:VGroup>
															<s:List id="selectedInstallsList"
																	allowMultipleSelection="true"
																	dataProvider="{selectedInstalls}"
																	labelFunction="installList_labelFunction"
																	width="100%" height="100%"/>
														</s:HGroup>
													</s:VGroup>
												</s:NavigatorContent>
												<s:NavigatorContent id="chefContent" label="Chef" width="100%" height="100%">
													<s:HGroup width="100%" height="100%">
														<s:VGroup height="100%" horizontalAlign="center">
															<s:Label fontWeight="bold" text="Available&#xd;Roles:" textAlign="center"/>
															<s:List id="availableRolesList"
																	dataProvider="{availableChefRoles}"
																	labelField="name"
																	allowMultipleSelection="false"
																	width="20%" height="100%"
																	valueCommit="availableRolesList_valueCommitHandler(event)"/>
														</s:VGroup>
														<s:VGroup height="100%" verticalAlign="middle">
															<s:Button label="Add" 
																	  click="addButton_clickHandler()"
																	  enabled="{availableRolesList.selectedItem != null}"/>
															<s:Button label="Remove"
																	  click="removeButton_clickHandler(event)"
																	  enabled="{availableRolesList.selectedItem != null}"/>
														</s:VGroup>
														<s:VGroup height="100%" horizontalAlign="center">
															<s:Label fontWeight="bold" text="Selected&#xd;Roles:" textAlign="center"/>
															<s:List id="selectedRolesList"
																	dataProvider="{selectedChefRoles}"
																	labelField="name"
																	allowMultipleSelection="true"
																	width="20%"
																	height="100%"/>
														</s:VGroup>
														<s:BorderContainer height="100%" width="100%">
															<s:VGroup id="recipeDescriptionVG"
																	  paddingLeft="5"
																	  width="100%" height="100%" 
																	  gap="0">
																<s:FormHeading id="roleFormHeading"
																			   label="{selectedRole.name} Details"/>
																<s:BusyIndicator id="loadingRecipeIndicator"
																				 height="100%" width="100%"
																				 visible="false" includeInLayout="false"/>
																<s:Label id="loadingLabel"
																		 visible="{loadingRecipeIndicator.visible}"
																		 includeInLayout="{loadingRecipeIndicator.visible}"
																		 text="Loading Description..."/>
																<s:Scroller id="roleDetailsContainer"
																			visible="{!loadingRecipeIndicator.visible}"
																			includeInLayout="{!loadingRecipeIndicator.visible}"
																			horizontalScrollPolicy="auto"
																			width="100%" height="100%">
																	<s:Group width="100%" height="100%">
																		<s:Form width="100%"
																				height="100%">
																			<s:FormItem label="Run List:">
																				<mx:ComboBox id="runListCB"
																							 labelField="name"/>
																			</s:FormItem>
																			<s:FormItem label="Version:">
																				<s:Label text="{(runListCB.selectedItem as ChefCookbook).version}"/>
																			</s:FormItem>
																			<s:FormItem width="100%" label="Description">
																				<s:TextArea id="recipeLongDescription" width="300"
																							editable="false"
																							text="{(runListCB.selectedItem as ChefCookbook).longDescription}"/>
																			</s:FormItem>
																			<s:FormItem label="Platforms">
																				<s:Label text="{(runListCB.selectedItem as ChefCookbook).platformsDisplay}"/>
																			</s:FormItem>
																		</s:Form>
																	</s:Group>
																</s:Scroller>
															</s:VGroup>
														</s:BorderContainer>
													</s:HGroup>
												</s:NavigatorContent>
												<s:NavigatorContent id="puppetContent" label="Puppet">
													<s:HGroup width="100%" height="100%">
														<s:VGroup height="100%" horizontalAlign="center">
															<s:Label fontWeight="bold" text="Available&#xd;Modules:" textAlign="center"/>
															<s:List id="availableModulesList"
																	dataProvider="{availablePuppetModules}"
																	labelField="name"
																	allowMultipleSelection="false"
																	height="100%" width="20%"
																	valueCommit="availableModulesList_valueCommitHandler(event)"/>
														</s:VGroup>
														<s:VGroup height="100%" verticalAlign="middle">
															<s:Button label="Add" 
																	  click="addButton_clickHandler()"
																	  enabled="{availableModulesList.selectedItem != null}"/>
															<s:Button label="Remove"
																	  click="removeButton_clickHandler(event)"
																	  enabled="{selectedModulesList.selectedItem != null}"/>
														</s:VGroup>
														<s:VGroup height="100%" horizontalAlign="center">
															<s:Label fontWeight="bold" text="Selected&#xd;Modules:" textAlign="center"/>
															<s:List id="selectedModulesList"
																	dataProvider="{selectedPuppetModules}"
																	labelField="name"
																	allowMultipleSelection="true"
																	height="100%" width="20%"/>
														</s:VGroup>
														<s:BorderContainer height="100%" width="100%">
															<s:VGroup id="moduleDescriptionVG"
																	  paddingLeft="5"
																	  width="100%" height="100%" 
																	  gap="0">
																<s:FormHeading id="moduleFormHeading"
																			   label="{selectedModule.name} Details"/>
																<s:Scroller id="moduleDetailsContainer"
																			horizontalScrollPolicy="auto"
																			width="100%" height="100%">
																	<s:Group width="100%" height="100%">
																		<s:Form width="100%"
																				height="100%">
																			<!--<s:FormItem label="Classes:">
																				<mx:ComboBox id="classesListCB"
																							 labelField="name"/>
																			</s:FormItem>-->
																			<s:FormItem width="100%" label="Description:">
																				<s:TextArea width="300"
																							editable="false"
																							text="{selectedModule.longDescription}"/>
																			</s:FormItem>
																			<s:FormItem label="Parameters:">
																				<s:Label text="{selectedModule.argumentsDisplay}"/>
																			</s:FormItem>
																		</s:Form>
																	</s:Group>
																</s:Scroller>
															</s:VGroup>
														</s:BorderContainer>
													</s:HGroup>
												</s:NavigatorContent>
												<s:NavigatorContent label="Bootstrap Commands" height="100%" width="100%">
													<s:Scroller height="100%" width="100%">
														<s:viewport>
															<s:VGroup id="userdataVG"
																	  dragEnter="dragEnterHandler(event)"
																	  dragDrop="dragDropHandler(event)"
																	  width="100%"
																	  height="100%"
																	  horizontalAlign="center">
															</s:VGroup>
														</s:viewport>
													</s:Scroller>
												</s:NavigatorContent>
											</mx:TabNavigator>
										</s:VGroup>
									</s:Scroller>
								</s:BorderContainer>
							</mx:VDividedBox>
						</s:NavigatorContent>
						<s:NavigatorContent id="dataContent"
											label="Data" 
											height="100%" width="100%">
							<mx:TabNavigator width="100%" height="100%">
								<s:NavigatorContent id="filesContent" 
													width="100%" height="100%"
													label="Files">
									<s:HGroup id="filesHG" width="100%" height="100%"
											  paddingBottom="15" paddingLeft="15" paddingRight="15"
											  paddingTop="15">
										<s:VGroup id="filesListVG" height="100%">
											<s:List id="cfInitFilesList"
													labelField="name"
													x="10" y="10"
													dataProvider="{cfInit.files}"
													valueCommit="cfInitFilesList_valueCommitHandler(event)"
													width="220" height="300">
											</s:List>
											<s:HGroup>
												<s:Button id="addFileButton"
														  click="addFileButton_clickHandler(event)"
														  label="Add"/>
												<s:Button id="removeFileButton" 
														  enabled="{selectedFile != null}"
														  click="removeFileButton_clickHandler(event)"
														  label="Remove"/>
											</s:HGroup>
										</s:VGroup>
										<s:VGroup id="filePropertiesVG"
												  enabled="{selectedFile != null}">
											<s:HGroup id="sourceHG" width="100%"
													  horizontalAlign="right">
												<s:RadioButton id="fileSourceRB"
															   x="238" y="19"
															   label="Source:" 
															   fontWeight="bold"/>
												<s:TextInput id="fileSourceTI"
															 enabled="{fileSourceRB.selected}"
															 text="{selectedFile.source}"
															 keyDown="file_keyDownHandler(event)"
															 textInput="file_textInputHandler(event)"
															 x="101" y="19" 
															 width="407"/>
											</s:HGroup>
											<s:HGroup id="contentHG" width="100%"
													  horizontalAlign="right">
												<s:RadioButton id="fileContentRB"
															   x="238" y="66" 
															   label="Content:" 
															   fontWeight="bold"/>
												<s:TextArea id="fileContentTA"
															x="106" y="65"
															height="272" width="407"
															enabled="{fileContentRB.selected}"
															text="{selectedFile.contentString}"
															keyFocusChange="fileContentTA_keyFocusChangeHandler(event)"
															keyDown="file_keyDownHandler(event)"
															textInput="file_textInputHandler(event)">
												</s:TextArea>
											</s:HGroup>
											<s:HGroup paddingLeft="93">
												<s:Button id="fileContentDiscardButton"
														  label="Discard"
														  enabled="{fileChangesMade}"
														  click="fileContentDiscardButton_clickHandler(event)"/>
											</s:HGroup>
											<s:HGroup id="permissionsHG" width="100%" gap="11"
													  horizontalAlign="right" verticalAlign="middle">
												<s:Label id="filePermissionsLabel"
														 x="232" y="275" 
														 fontWeight="bold"
														 text="Permissions:"/>
												<s:TextInput id="fileModeTI"
															 text="{selectedFile.mode}"
															 x="326" y="270" 
															 prompt="mode"/>
												<s:TextInput id="fileOwnerTI"
															 text="{selectedFile.owner}"
															 x="481" y="270" 
															 prompt="owner"/>
												<s:TextInput id="fileGroupTI"
															 text="{selectedFile.group}"
															 x="629" y="270"
															 prompt="group"/>
											</s:HGroup>
											
										</s:VGroup>
									</s:HGroup>
									
									

									
									
									
								</s:NavigatorContent>
								<s:NavigatorContent id="packagesContent"
													width="100%" height="100%"
													label="Packages">
									<s:FormItem id="packageManagerFI" x="213" y="10"
												label="Package&#xd;Managers:" fontSize="15"
												fontWeight="bold"
												skinClass="spark.skins.spark.StackedFormItemSkin">
										<s:List id="packageManagerList"
												height="120"
												fontSize="12" fontWeight="normal"
												itemRenderer="com.momentumsi.c9.itemRenderers.CheckBoxListItemRenderer"
												creationComplete="packageManagerList_creationCompleteHandler(event)">
											<s:dataProvider>
												<s:ArrayCollection>
													<components:CheckBoxListItem id="aptPackageManager"
																				 secondaryCollection="{cfInit.aptPackages}"
																				 label="apt"/>
													<components:CheckBoxListItem id="yumPackageManager"
																				 secondaryCollection="{cfInit.yumPackages}"
																				 label="yum"/>
													<components:CheckBoxListItem id="rubygemsPackageManager"
																				 secondaryCollection="{cfInit.rubygemsPackages}"
																				 label="rubygems"/>
													<components:CheckBoxListItem id="pythonPackageManager"
																				 secondaryCollection="{cfInit.pythonPackages}"
																				 label="python"/>
													<components:CheckBoxListItem id="rpmPackageManager"
																				 secondaryCollection="{cfInit.rpmPackages}"
																				 label="rpm"/>
												</s:ArrayCollection>
											</s:dataProvider>
										</s:List>
									</s:FormItem>
									<s:FormItem id="packagesListFI" x="386" y="26" label="Packages:"
												fontSize="15" fontWeight="bold"
												skinClass="spark.skins.spark.StackedFormItemSkin">
										<s:List id="packagesList"
												height="222"
												fontSize="12" fontWeight="normal"
												itemRenderer="com.momentumsi.c9.itemRenderers.CheckBoxListItemRenderer"
												dataProvider="{packageManagerList.selectedItem.secondaryCollection}"
												creationComplete="packagesList_creationCompleteHandler(event)"/>
									</s:FormItem>
									<s:FormItem id="packageVersionsFI" x="593" y="26"
												label="Versions:" fontSize="15" fontWeight="bold"
												skinClass="spark.skins.spark.StackedFormItemSkin">
										<s:List id="packageVersionsList"
												height="222"
												fontSize="12" fontWeight="normal"
												itemRenderer="com.momentumsi.c9.itemRenderers.CheckBoxListItemRenderer"
												dataProvider="{packagesList.selectedItem.versions}"
												creationComplete="packageVersionsList_creationCompleteHandler(event)"/>
									</s:FormItem>									
									<s:Label x="10" y="20" width="195"
											 text="Define the packages you wish to install on this server.  Selecting a package manager will display its available packages.  Selecting a package will display its available versions.  &#xd;&#xd;Check the packages to install them, and if you do not see a package or version you would like to use, add it by pressing the &quot;Add Package&quot; button.  &#xd;&#xd;**Note: If the package or version added is invalid, the machine bootstrap will fail on that install."/>
									<s:Button id="addPackageButton"
											  x="224" y="294" 
											  label="Add Package"
											  click="addPackageButton_clickHandler(event)"/>
									<s:Button id="removePackageButton" 
											  x="402" y="296" 
											  enabled="{packagesList.selectedItem != null}"
											  click="removePackageButton_clickHandler(event)"
											  label="Remove"/>
									<s:Button id="removeVersionButton"
											  x="602" y="296"
											  enabled="{packageVersionsList.selectedItem != null}"
											  click="removeVersionButton_clickHandler(event)"
											  label="Remove"/>
								</s:NavigatorContent>
													
							</mx:TabNavigator>

						</s:NavigatorContent>
						<s:NavigatorContent id="sourceTab"
											label="Source">
							<mx:TabNavigator height="100%" width="100%">
								<s:NavigatorContent id="metadataContent"
													label="Metadata"
													width="100%" height="100%">
									<s:TextArea id="metadataTA"
												width="100%" height="100%"/>
								</s:NavigatorContent>
								<s:NavigatorContent id="userdataContent"
													label="User Data"
													width="100%" height="100%">
									<s:TextArea id="userdataTA"
												width="100%" height="100%"/>
								</s:NavigatorContent>
							</mx:TabNavigator>
						</s:NavigatorContent>
					</mx:TabNavigator>
				</s:Group>
			</s:NavigatorContent>
			<s:NavigatorContent id="installationParametersContent"
								label="Installation Parameters"
								height="100%" width="100%">
				<s:BorderContainer id="installParametersBC"
								   includeInLayout="false"
								   width="90%" height="193">
					<s:backgroundFill>
						<s:SolidColor alpha="0"/>
					</s:backgroundFill>
					<s:Label id="installParametersLabel"
							 x="6" y="9" 
							 fontWeight="bold" 
							 text="Set Install Parameters:"/>
					<s:VGroup id="installParametersVG" x="0" y="21" 
							  width="100%" height="100%">
						<s:Scroller width="100%" height="100%">
							<s:VGroup id="installParametersScrollerVG" width="100%" height="100%">
								<s:Form id="installParametersForm"/>
							</s:VGroup>
						</s:Scroller>
					</s:VGroup>
					
				</s:BorderContainer>
			</s:NavigatorContent>
			<s:NavigatorContent id="elasticityConfigurationContent"
								label="Elasticity"
								height="100%" width="100%">
				<s:Scroller height="100%" width="100%">
					<s:Group height="100%" width="100%">
						<mx:Form id="elasticity" width="100%">			
							<mx:Box borderStyle="solid" paddingTop="10" paddingBottom="10" paddingLeft="10" paddingRight="10" width="100%">
								<s:HGroup width="100%" height="100%">
									<s:VGroup width="400">
										<s:RadioButton id="noScaleRB" 
													   group="{scaleTypeGroup}"
													   label="None"
													   selected="true"/>
										<s:RadioButton id="autoRecoveryRB"										   
													   group="{scaleTypeGroup}" 
													   label="Auto Recovery"/>
										<s:HGroup>
											<s:RadioButton id="fixedArrayRB" 
														   group="{scaleTypeGroup}"
														   label="Fixed Array"/>
											<mx:Label id="fixedArraySizeLbl" 
													  text="Size:"
													  enabled="{fixedArrayRB.selected}"/>
											<s:TextInput id="fixedArraySize" 
														 enabled="{fixedArrayRB.selected}"
														 widthInChars="3"
														 change="autoScale_changeHandler(event)"/>
											<mx:Label id="fixedArraySizeAlert" text="{AlertMessage.INVALID}" color="red" visible="false"/>
										</s:HGroup>
										<s:HGroup>
											<s:VGroup>
												<s:HGroup>
													<s:RadioButton id="autoScaleRB" 
																   group="{scaleTypeGroup}"
																   label="Auto Scale"/>
													<s:VGroup>
														<s:HGroup>
															<mx:Label id="autoScaleMinLbl" 
																	  text="Min:"
																	  enabled="{autoScaleRB.selected}"/>
															<s:TextInput id="autoScaleMin" 
																		 enabled="{autoScaleRB.selected}" 
																		 text="1"
																		 widthInChars="3"
																		 change="autoScale_changeHandler(event)"/>
															<mx:Label id="autoScaleMaxLbl"
																	  text="Max:"
																	  enabled="{autoScaleRB.selected}"/>
															<s:TextInput id="autoScaleMax" 
																		 enabled="{autoScaleRB.selected}"
																		 text="2"
																		 change="autoScale_changeHandler(event)"
																		 widthInChars="3"/>
															<mx:Label id="autoScaleMinMaxAlert" text="{AlertMessage.INVALID}" color="red" visible="false"/>
														</s:HGroup>
														<s:HGroup>
															<mx:Label id="autoScaleDesiredCapacityLbl"
																	  text="Desired Capacity:"
																	  enabled="{autoScaleRB.selected}"/>
															<components:InputComboBox id="desiredCapacity"
																					  projectVersion="{projectVersion}"
																					  enabled="{autoScaleRB.selected}"
																					  width="160"
																					  textInputField="true"
																					  valueCommit="desiredCapacity_valueCommitHandler(event)"/>
															<mx:Label id="desiredCapacityAlert" text="{AlertMessage.INVALID}" color="red" visible="false"/>
														</s:HGroup>
													</s:VGroup>
												</s:HGroup>
											</s:VGroup>
										</s:HGroup>
									</s:VGroup>
									<s:VGroup height="100%" verticalAlign="middle">
										<mx:Text text="Cost: {computePrice}"/>
									</s:VGroup>
									<s:VGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
										<s:Image id="workspaceImage" source="{ImagePath.NEW_EC2}"/>
									</s:VGroup>
								</s:HGroup>
							</mx:Box>
							<mx:Box id="triggerSettings" 
									borderStyle="solid"
									paddingTop="10" paddingBottom="10" paddingLeft="10" paddingRight="10" 
									width="100%" height="100%" 
									enabled="{autoScaleRB.selected}">
								<s:HGroup width="200" height="16">
									<s:Label text="Scaling Trigger" fontWeight="bold"/>
									<s:RadioButton label="On" groupName="scalingTriggerOnOffGroup"/>
									<s:RadioButton label="Off" groupName="scalingTriggerOnOffGroup" selected="true"/>
								</s:HGroup>
								<s:Form width="100%" enabled="{scalingTriggerOnOffGroup.selectedValue == 'On'}">
									<s:FormItem label="Trigger Measurement">
										<s:HGroup>
											<mx:ComboBox id="triggerMeasurement" selectedIndex="0" change="triggerMeasurement_changeHandler(event)">
												<mx:dataProvider>
													<s:ArrayCollection>
														[CPUUtilization, NetworkIn, NetworkOut, DiskWriteOps, DiskReadBytes, DiskReadOps, DiskWriteBytes, Latency, RequestCount, HealthyHostCount, UnhealthyHostCount]
													</s:ArrayCollection>
												</mx:dataProvider>
											</mx:ComboBox>
											<s:Image width="16" height="16"
													 source="{ImagePath.HELPER_ICON}"
													 toolTip="Trigger Measurement&#xd;The measure used to determine when to trigger a scaling activity."/>
										</s:HGroup>
									</s:FormItem>
									<s:FormItem label="Trigger Statistic">
										<s:HGroup>
											<mx:ComboBox id="triggerStatistic" selectedIndex="3">
												<mx:dataProvider>
													<s:ArrayCollection>
														[Minimum, Maximum, Sum, Average]
													</s:ArrayCollection>
												</mx:dataProvider>
											</mx:ComboBox>
											<s:Image width="16" height="16"
													 source="{ImagePath.HELPER_ICON}"
													 toolTip="Trigger Statistic&#xd;The statistic used for a given measure to determine when to trigger a scaling activity."/>
										</s:HGroup>
									</s:FormItem>
									<s:FormItem label="Unit of Measurement">
										<s:HGroup>
											<mx:Text id="triggerUnit" text="Percent"/>
											<s:Image width="16" height="16"
													 source="{ImagePath.HELPER_ICON}"
													 toolTip="Unit of Measurement&#xd;Every measure has a unit attached, such as seconds or bytes."/>
										</s:HGroup>
									</s:FormItem>
									<s:FormItem label="Measure Period (minutes)">
										<s:HGroup>
											<s:TextInput id="triggerMeasurePeriod" text="5" widthInChars="3"/>
											<mx:Text text="(1-600)"/>
											<s:Image width="16" height="16"
													 source="{ImagePath.HELPER_ICON}"
													 toolTip="Measure Period&#xd;The period in minutes of the measure statistic over which a breach is determined."/>
										</s:HGroup>
									</s:FormItem>
									<s:FormItem label="Breach Duration (minutes)">
										<s:HGroup>
											<s:TextInput id="triggerBreachDuration" text="5" widthInChars="3"/>
											<mx:Text text="(1-600)"/>
											<s:Image width="16" height="16"
													 source="{ImagePath.HELPER_ICON}"
													 toolTip="Breach Duration&#xd;The amount of time to wait while the tigger is firing before performing scaling activites in response to the breach."/>
										</s:HGroup>
									</s:FormItem>
									<s:FormItem label="Upper Threshold">
										<s:HGroup>
											<s:TextInput id="triggerUpperThreshold" text="80" widthInChars="8"/>
											<mx:Text id="upperThresholdLbl" text="(0-100)"/>
											<s:Image width="16" height="16"
													 source="{ImagePath.HELPER_ICON}"
													 toolTip="Upper Threshold&#xd;The upper limit of the metric used."/>
										</s:HGroup>
									</s:FormItem>
									<s:FormItem label="Upper Breach Scale Increment">
										<s:HGroup>
											<s:TextInput id="triggerUpperBreachScale" text="1" widthInChars="3"/>
											<s:Image width="16" height="16"
													 source="{ImagePath.HELPER_ICON}"
													 toolTip="Upper Breach Scale Increment&#xd;The incremental number of EC2 instances to add when performing an upper triggered scaling activity."/>
										</s:HGroup>
									</s:FormItem>
									<s:FormItem label="Lower Threshold">
										<s:HGroup>
											<s:TextInput id="triggerLowerThreshold" text="20" widthInChars="8"/>
											<mx:Text id="lowerThresholdLbl" text="(0-100)"/>
											<s:Image width="16" height="16"
													 source="{ImagePath.HELPER_ICON}"
													 toolTip="Lower Threshold&#xd;The lower limit of the metric used."/>
										</s:HGroup>
									</s:FormItem>
									<s:FormItem label="Lower Breach Scale Decrement">
										<s:HGroup>
											<s:TextInput id="triggerLowerBreachScale" text="-1" widthInChars="3"/>
											<s:Image width="16" height="16"
													 source="{ImagePath.HELPER_ICON}"
													 toolTip="Lower Breach Scale Decrement&#xd;The decremental number of EC2 instances to terminate when performing a lower triggered scaling activity."/>
										</s:HGroup>
									</s:FormItem>
								</s:Form>
							</mx:Box>
						</mx:Form>
					</s:Group>
				</s:Scroller>
			</s:NavigatorContent>
			<s:NavigatorContent id="instanceReviewContent"
							    label="Review"
								height="100%" width="100%">
				<s:VGroup id="instanceReviewVG"
						  paddingLeft="20" paddingTop="10" 
						  height="100%" width="100%">
					<s:Label text="Please Review Your Instance" 
							 y="20" 
							 fontWeight="bold"/>
					<s:HGroup width="100%" height="177">
						<s:Form width="392">
							<s:layout>
								<s:FormLayout gap="-7"/>
							</s:layout>
							<s:FormItem label="Name:">
								<s:Label text="{instanceRepresenter.name}"/>
							</s:FormItem>
							<s:FormItem label="Image Source:">
								<s:Label width="100%" text="{instanceRepresenter.imageDisplay}"/>
							</s:FormItem>
							<s:FormItem label="Machine Size:">
								<s:Label text="{machineSize.text}"/>
							</s:FormItem>
							<s:FormItem label="Key Pair:">
								<s:Label text="{keyPair.text}"/>
							</s:FormItem>
							<s:FormItem label="Security Group(s):">
								<mx:Text text="{instanceRepresenter.securityGroupsDisplay}"
										 width="238"/>
							</s:FormItem>				
						</s:Form>
						<s:Form width="50%">
							<s:layout>
								<s:FormLayout gap="-7"/>
							</s:layout>
							<s:FormItem label="Elasticity:">
								<s:Label text="{String(scaleTypeGroup.selectedValue)}"/>
							</s:FormItem>
							<s:FormItem id="elasticIpItem" 
										label="Elastic IP:" 
										visible="{noScaleRB.selected}" 
										includeInLayout="{noScaleRB.selected}">
								<s:Label id="eipReviewLabel"/>
							</s:FormItem>
							<s:FormItem id="monitoringFormItem" 
										label="Detailed Monitoring:"
										visible="{noScaleRB.selected}" 
										includeInLayout="{noScaleRB.selected}">
								<s:Label text="{instanceRepresenter.monitoringEnabled}"/>
							</s:FormItem>
							<s:FormItem id="terminationProtectionFormItem" 
										label="Termination Protection:"
										visible="{noScaleRB.selected}" 
										includeInLayout="{noScaleRB.selected}">
								<s:Label text="{instanceRepresenter.disableApiTermination}"/>
							</s:FormItem>	
						</s:Form>
					</s:HGroup>
					<s:Label text="Cost: {computePrice}" 
							 y="20" 
							 fontWeight="bold"/>
				</s:VGroup>
			</s:NavigatorContent>
		</mx:ViewStack>
		<wizard:WizardButtonGroup id="computeButtonGroup"
								  wizardStack="{instanceWizardViewStack}"
								  nextButtonClick="nextButton_clickHandler(event)"
								  previousButtonClick="previousButton_clickHandler(event)"
								  finishButtonClick="finishButton_clickHandler(event)"/>
	</s:VGroup>
</wizard:WizardWindow>