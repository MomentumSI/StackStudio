<?xml version="1.0" encoding="utf-8"?>
<wizard:WizardWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:diagrammer="fr.kapit.diagrammer.base.uicomponent.*"
		 xmlns:components="com.momentumsi.c9.components.*"
		 wizardType="{ResourceTypeLabel.DNS}"
		 initialize="init(event)"
		 width="550" height="525" 
		 xmlns:services="com.momentumsi.c9.services.*"
		 xmlns:wizard="com.momentumsi.c9.components.wizard.*">
	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.constants.AlertMessage;
			import com.momentumsi.c9.constants.ImagePath;
			import com.momentumsi.c9.constants.ResourceType;
			import com.momentumsi.c9.constants.ResourceTypeLabel;
			import com.momentumsi.c9.utils.Helpers;
			
			import fr.kapit.diagrammer.Diagrammer;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;

			[Bindable]
			private var typeCollection:ArrayCollection = new ArrayCollection([{label: "A - IPv4 address", value: "A"},
																			{label: "CNAME - Canonical name", value: "CNAME"},
																			{label: "MX - Mail exchange", value: "MX"},
																			{label: "AAAA - IPv6 address", value: "AAAA"},
																			{label: "TXT - Text", value: "TXT"},
																			{label: "PTR - Pointer", value: "PTR"},
																			{label: "SRV - Service locator", value: "SRV"},
																			{label: "SPF - Sender Policy Framework", value: "SPF"},
																			{label: "NS - Name server", value: "NS"}]);
			[Bindable]
			private var timePeriod:ArrayCollection = new ArrayCollection([{label: "Second(s)", value: 1},
																		{label: "Minute(s)", value: 60},
																		{label: "Hour(s)", value: 3600},
																		{label: "Day(s)", value: 86400}]);
			[Bindable]
			private var resourceTypes:ArrayCollection = new ArrayCollection([{label: "Compute Cloud", value: "EC2"},
																			{label: "Load Balancer", value: "ELB"}]);
			[Bindable]
			private var attributes:ArrayCollection = new ArrayCollection([{label: "Public IP", value: "PublicIp"},
																		{label: "Public DNS Name", value: "PublicDnsName"}]);
			[Bindable]
			private var resourceListCollection:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var hostedZoneNameFinal:String = "";
			[Bindable]
			private var hostedZoneIdFinal:String = "";
			[Bindable]
			private var recordNameFinal:String = "";
			[Bindable]
			private var recordTypeFinal:String = "";
			[Bindable]
			private var ttlFinal:int = 0;
			[Bindable]
			private var resourcesFinal:String = "";
			[Bindable]
			private var weightFinal:String = "";

			public var dnsRecordObject:Object;
			private var currentDnsRecordName:String;
			
			[Bindable]
			private var hostedZoneCollection:ArrayCollection = new ArrayCollection();
			
			protected function init(event:FlexEvent):void
			{
				getResourcesSvc.send();
			}
			
			override public function applyConfigurations():void
			{
				if(element.id == null)
				{
					return;
				}
				currentDnsRecordName = element.name;
				recordName.text = currentDnsRecordName;
				var recordProperties:Object = element.properties["Properties"];
				hostedZone.selectedItem.name = recordProperties['HostedZoneName'];
				hostedZoneIdFinal = hostedZone.selectedItem.zoneId;
				recordName.text = recordProperties['Name']; 
				recordType.selectedItem.value = recordProperties['Type'];
				recordProperties['TTL'] = ttlFinal;
				recordProperties['ResourceRecords'] = [];
				for each(var r:Object in resourceListCollection)
				{
					if(r.type == "template")
					{
						recordProperties['ResourceRecords'].push({"Fn::GetAtt":[r.label, r.attribute]});
					}else
					{
						recordProperties['ResourceRecords'].push(r.label);
					}
				}
				
				if(weightCheck.selected)
				{
					recordProperties['Weight'] = weightValue.text;
					recordProperties['SetIdentifier'] = setIdValue.text;
				}				
			}
			
			protected function nextButton_clickHandler(event:MouseEvent):void
			{
				var alert:Boolean = false;
				switch(dns53Wizard.selectedChild)
				{
					case recordDetails:
						if(resourceName.text != "")
						{
							if(Helpers.validateAlphanumeric(resourceName.text))
							{
								if(projectVersion.validateUniqueName(resourceName.text, element))
								{
									resourceNameAlert.visible = false;
								}else
								{
									resourceNameAlert.text = AlertMessage.NOT_UNIQUE;
									resourceNameAlert.visible = true;
									alert = true;
								}
							}else
							{
								resourceNameAlert.text = AlertMessage.NOTALPHANUMERIC;
								resourceNameAlert.visible = true;
								alert = true;
							}
						}else
						{
							resourceNameAlert.text = AlertMessage.INVALID;
							resourceNameAlert.visible = true;
							alert = true;
						}
						
						if(hostedZone.selectedIndex != -1)
						{
							hostedZoneAlert.visible = false;
							hostedZoneNameFinal = hostedZone.selectedItem.Name;
							hostedZoneIdFinal = hostedZone.selectedItem.zoneId;
						}else
						{
							hostedZoneAlert.visible = true;
							alert = true;
						}
						
						if(recordName.text.replace(" ", "") != "")
						{	
							recordNameFinal = recordName.text;
							if(recordNameFinal.substr(-1, 1) != '.')
							{
								recordNameFinal = recordNameFinal + "." + hostedZoneNameFinal;
							}
							recordNameAlert.visible = false;
						}else
						{
							recordNameAlert.visible = true;
							alert = true;
						}
						
						recordTypeFinal = recordType.selectedItem.value;
						
						if(ttl.text.replace(" ", "") != "")
						{
							try
							{
								var ttlInt:int = parseInt(ttl.text);
								if(ttlInt >= 0)
								{
									ttlAlert.visible = false;
									ttlFinal = ttlInt * ttlPeriod.selectedItem.value;
								}else
								{
									ttlAlert.visible = true;
									alert = true;
								}
							}catch(e:Error)
							{
								ttlAlert.visible = true;
								alert = true;
							}
						}else
						{
							ttlAlert.visible = true;
							alert = true;
						}
						
						if(!alert)
						{
							hostedZoneAlert.visible = false;
							recordNameAlert.visible = false;
							ttlAlert.visible = false;
						}
						break;
					case resourceConfig:
						if(resourceListCollection.length > 0)
						{
							resourcesFinal = "[ ";
							for each(var r:Object in resourceListCollection)
							{
								resourcesFinal = resourcesFinal + r.label + ", ";
							}
							resourcesFinal = resourcesFinal.substr(0, -2) + " ]";
						}else
						{
							Alert.show("Please provide at least one resource.");
							alert = true;
						}
						
						if(weightCheck.selected)
						{
							if(weightValue.text.replace(" ", "") != "" && setIdValue.text.replace(" ", "") != "")
							{
								try
								{
									var weightInt:int = parseInt(weightValue.text);
									if(weightInt >= 0 && weightInt < 256)
									{
										weightFinal = weightValue.text + " : " + setIdValue.text;
										weightAlert.visible = false;
									}else
									{
										weightAlert.visible = true;
										alert = true;
									}
								}catch(e:Error)
								{
									weightAlert.visible = true;
									alert = true;
								}
							}else
							{
								weightAlert.visible = true;
								alert = true;
							}
						}else
						{
							weightFinal = "N/A";
						}
						
						if(!alert)
						{
							weightAlert.visible = false;
						}
						break;
				}
				
				if(!alert)
				{
					dns53Wizard.selectedIndex++;
				}
			}
			
			protected function submitButton_clickHandler(event:MouseEvent):void
			{
				submitButton.enabled = false;
				if(!weightCheck.selected)
				{
					weightValue.text = "";
					setIdValue.text = "";
				}
					var recordAttributes:Object = new Object();
					recordAttributes['Type'] = ResourceType.RECORD_SET;
					recordAttributes['Properties'] = getPropertiesObject();
					
					saveElement(resourceName.text, recordAttributes);
					//createVariants(resourceName.text, statesToApply.ignoredEnvironments);
			}
			
			private function getPropertiesObject():Object
			{
				var recordProperties:Object = new Object();	
				recordProperties['HostedZoneName'] = hostedZoneNameFinal;
				recordProperties['Name'] = recordNameFinal;
				recordProperties['Type'] = recordTypeFinal;
				recordProperties['TTL'] = ttlFinal;
				recordProperties['ResourceRecords'] = [];
				for each(var r:Object in resourceListCollection)
				{
					if(r.type == "template")
					{
						recordProperties['ResourceRecords'].push({"Fn::GetAtt":[r.label, r.attribute]});
					}else
					{
						recordProperties['ResourceRecords'].push(r.label);
					}
				}
				
				if(weightCheck.selected)
				{
					recordProperties['Weight'] = weightValue.text;
					recordProperties['SetIdentifier'] = setIdValue.text;
				}
				
				return recordProperties;
			}
			
			protected function resourcetype_changeHandler(event:ListEvent):void
			{
				attributes.removeAll();
				var ec2Attributes:ArrayCollection = new ArrayCollection([{label: "Public IP", value: "PublicIp"}, {label: "Public DNS Name", value: "PublicDnsName"}]);
				var elbAttributes:ArrayCollection = new ArrayCollection([{label: "DNS Name", value: "DNSName"}]);
				switch(resourceType.selectedItem.value)
				{
					case "EC2":
						attributes.addAll(ec2Attributes);
						break;
					case "ELB":
						attributes.addAll(elbAttributes);
						break;
				}
			}
			
			protected function addTemplateResourceButton_clickHandler(event:MouseEvent):void
			{
				if(templateResourceValue.text.replace(" ", "") != "")
				{
					resourceListCollection.addItem({label: templateResourceValue.text, type: "template", attribute: attribute.selectedItem.value});
				}else
				{
					Alert.show(AlertMessage.INVALID);
				}
			}
			
			protected function addExternalResourceButton_clickHandler(event:MouseEvent):void
			{
				if(externalResourceValue.text.replace(" ", "") != "")
				{
					resourceListCollection.addItem({label: externalResourceValue.text, type: "external"});
				}else
				{
					Alert.show(AlertMessage.INVALID);
				}
			}
			
			protected function removeResourceButton_clickHandler(event:MouseEvent):void
			{
				if(resourceList.selectedIndex != -1)
				{
					resourceListCollection.removeItemAt(resourceList.selectedIndex);
				}
			}
			
			protected function getResourcesSvc_resultHandler(event:ResultEvent):void
			{
				hostedZoneCollection = new ArrayCollection(getResourcesSvc.result["HostedZones"] as Array);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:RadioButtonGroup id="hostedZoneGroup"/>
		<s:RadioButtonGroup id="resourceRecordsGroup"/>
		
		<services:CloudApiService id="getResourcesSvc"
								  action="list_hosted_zones"
								  cloudAccountId="{cloudAccount.id}"
								  serviceType="DNS"
								  result="getResourcesSvc_resultHandler(event)"/>	

	</fx:Declarations>
	
	<s:VGroup gap="0" width="100%">
		<wizard:WizardWindowTitle id="dnsWizardWindowTitle"
								  resourceImage="{ImagePath.NEW_DNS}"
								  resourceLabel="{wizardDisplayName}"
								  wizardStack="{dns53Wizard}"/>
		<wizard:CookieTrail wizardStack="{dns53Wizard}"/>
		<mx:ViewStack id="dns53Wizard" paddingTop="10" paddingLeft="20" width="100%" height="100%" creationPolicy="all">
			<s:NavigatorContent id="recordDetails" label="Record Details">
				<s:VGroup height="100%" width="100%">
					<s:Form textAlign="right">
						<s:FormItem label="Name*: ">
							<s:HGroup>
								<s:TextInput id="resourceName" textAlign="left"/>
								<mx:Text id="resourceNameAlert" text="{AlertMessage.INVALID}" color="red" visible="false"/>
							</s:HGroup>
						</s:FormItem>
						<s:FormItem label="Hosted Zone*: ">
							<s:HGroup>
								<mx:ComboBox id="hostedZone" 
											 dataProvider="{hostedZoneCollection}" 
											 prompt="Select Zone"
											 labelField="Name"
											 enabled="{hostedZoneCollection.length > 0}" 
											 width="200" textAlign="left"/>
								<mx:Text id="hostedZoneAlert" text="{AlertMessage.INVALID}" color="red" visible="false"/>
							</s:HGroup>
						</s:FormItem>
						<s:FormItem label="Record Name*: ">
							<s:HGroup>
								<s:TextInput id="recordName" textAlign="left" width="200"/>
								<mx:Text id="recordNameAlert" text="{AlertMessage.INVALID}" color="red" visible="false"/>
							</s:HGroup>
						</s:FormItem>
						<s:FormItem label="Record Type*: ">
							<mx:ComboBox id="recordType" textAlign="left" dataProvider="{typeCollection}" width="200"/>
						</s:FormItem>
						<s:FormItem label="TTL*: ">
							<s:HGroup>
								<s:TextInput id="ttl" textAlign="left" text="900"/>
								<mx:ComboBox id="ttlPeriod" textAlign="left" dataProvider="{timePeriod}" width="100"/>
								<mx:Text id="ttlAlert" text="{AlertMessage.INVALID}" color="red" visible="false"/>
							</s:HGroup>
						</s:FormItem>
					</s:Form>
				</s:VGroup>
			</s:NavigatorContent>
			<s:NavigatorContent id="resourceConfig" label="Resource Configuration">
				<s:Form>
					<s:FormItem label="Resources*: ">
						<s:VGroup>
							<s:RadioButton id="externalResource" label="Non-Template Resource" group="{resourceRecordsGroup}" selected="true"/>
							<s:HGroup paddingLeft="20" enabled="{externalResource.selected}">
								<s:TextInput id="externalResourceValue" width="202"/>
								<s:Image width="16" height="16"
										 source="{ImagePath.HELPER_ICON}"
										 toolTip="(e.g. www.example.com)"/>
								<s:Button id="addExternalResourceButton" label="Add" click="addExternalResourceButton_clickHandler(event)"/>
							</s:HGroup>
							<s:RadioButton id="templateResource" label="Template Resource" group="{resourceRecordsGroup}"/>
							<s:HGroup paddingLeft="20" enabled="{templateResource.selected}">
								<mx:Text text="Name: " textAlign="right" width="70"/>
								<s:TextInput id="templateResourceValue"/>
								<s:Image width="16" height="16"
										 source="{ImagePath.HELPER_ICON}"
										 toolTip="(e.g. &quot;MyEc2Instance&quot;)"/>
								<s:Button id="addTemplateResourceButton" label="Add" click="addTemplateResourceButton_clickHandler(event)"/>
							</s:HGroup>
							<s:HGroup paddingLeft="20" enabled="{templateResource.selected}">
								<mx:Text text="Type: " textAlign="right" width="70"/>
								<mx:ComboBox id="resourceType" dataProvider="{resourceTypes}" change="resourcetype_changeHandler(event)"/>
							</s:HGroup>
							<s:HGroup paddingLeft="20" enabled="{templateResource.selected}">
								<mx:Text text="Attribute: " textAlign="right" width="70"/>
								<mx:ComboBox id="attribute" dataProvider="{attributes}"/>
							</s:HGroup>
						</s:VGroup>
					</s:FormItem>
					<s:FormItem width="100%" height="100%">
						<s:List id="resourceList" width="350" height="60" dataProvider="{resourceListCollection}" />
						<s:Button id="RemoveResourceButton" label="Remove" click="removeResourceButton_clickHandler(event)"/>
					</s:FormItem>
					<s:FormItem label="Weight: " textAlign="right">
						<s:CheckBox id="weightCheck" label="Enable" selected="false"/>
						<s:HGroup enabled="{weightCheck.selected}">
							<mx:Text text="Weight: "/>
							<s:TextInput id="weightValue" textAlign="left" widthInChars="3"/>
							<mx:Text text="Set ID: "/>
							<s:TextInput id="setIdValue" textAlign="left"/>
							<mx:Text id="weightAlert" text="{AlertMessage.INVALID}" color="red" visible="false"/>
						</s:HGroup>
					</s:FormItem>
				</s:Form>
			</s:NavigatorContent>
			<s:NavigatorContent id="review" label="Review">
				<s:VGroup>
					<mx:Text text="Please Review Your Record Set" y="20" fontWeight="bold"/>
					<s:VGroup paddingLeft="20">
						<mx:Text text="Name: {resourceName.text}"/>
						<mx:Text text="Hosted Zone: {hostedZoneNameFinal}"/>
						<mx:Text text="Record Name: {recordName.text}"/>
						<mx:Text text="Record Type: {recordTypeFinal}"/>
						<s:HGroup>
							<mx:Text text="Record TTL: {ttl.text}"/>
							<mx:Text text="{ttlPeriod.selectedItem.label}"/>
						</s:HGroup>
						<mx:Text text="Resources: {resourcesFinal}" width="450"/>
						<mx:Text text="Weight: {weightFinal}"/>
					</s:VGroup>
				</s:VGroup>
			</s:NavigatorContent>
		</mx:ViewStack>
	</s:VGroup>
	<s:Button id="previousButton" x="10" y="461" label="Previous" click="dns53Wizard.selectedIndex--" enabled="{dns53Wizard.selectedChild != recordDetails}"/>
	<s:Button id="nextButton" x="92" y="461" label="Next" click="nextButton_clickHandler(event)" enabled="{dns53Wizard.selectedChild != review}"/>
	<s:Button id="submitButton" x="169" y="461" label="Finish" click="submitButton_clickHandler(event)" enabled="{dns53Wizard.selectedChild == review}"/>
	<s:Button id="cancelButton" x="469" y="461" label="Cancel" click="PopUpManager.removePopUp(this)"/>
</wizard:WizardWindow>