<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"
		 creationComplete="creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.utils.Helpers;
			
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.StringUtil;
			
			import spark.events.GridSelectionEvent;
			
			[Bindable]
			private var hostedZoneCollection:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var recordSetCollection:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var deleteRecordEnable:Boolean = false;
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				accountId = Helpers.currentAccount(this);
				refreshHostedZones();
			}
			
			public function refreshHostedZones():void
			{
				loader.visible = true;
				hostedZone.visible = false;
				deleteRecordEnable = false;
				recordSetCollection.removeAll();
				getHostedZonesSvc.send();
			}
			
			protected function createHostedZone_clickHandler(event:MouseEvent):void
			{
				var createHostZone:DnsCreateHostedZonePopUp = DnsCreateHostedZonePopUp(PopUpManager.createPopUp(UIComponent(this.parentApplication), DnsCreateHostedZonePopUp , true));
				//createHostZone.dns53 = this;
			}
			
			protected function deleteHostedZone_clickHandler(event:MouseEvent):void
			{
				var deleteHostZone:DnsDeleteHostedZonePopUp = DnsDeleteHostedZonePopUp(PopUpManager.createPopUp(UIComponent(this.parentApplication), DnsDeleteHostedZonePopUp , true));
				deleteHostZone.dns53 = this;
				deleteHostZone.domainName = hostedZone.selectedItem.name;
				deleteHostZone.zoneId = hostedZone.selectedItem.zoneId;
			}
			
			
			protected function hostedZone_selectionChangeHandler(event:GridSelectionEvent):void
			{
				recordSetCollection.removeAll();
				getRecordSetSvc.send({zone_id: hostedZone.selectedItem.zoneId});
			}
			
			protected function editRecord_clickHandler(event:MouseEvent):void
			{
				var editRecordSet:DnsCreateRecordSetPopUp = DnsCreateRecordSetPopUp(PopUpManager.createPopUp(UIComponent(this.parentApplication), DnsCreateRecordSetPopUp , true));
				editRecordSet.dns53 = this;
				editRecordSet.domainName = hostedZone.selectedItem.name;
				editRecordSet.zoneId = hostedZone.selectedItem.zoneId;
				editRecordSet.previousRecord = recordSet.selectedItem;
				editRecordSet.configure = true;
			}
			
			protected function createRecordSet_clickHandler(event:MouseEvent):void
			{
				var createRecordSet:DnsCreateRecordSetPopUp = DnsCreateRecordSetPopUp(PopUpManager.createPopUp(UIComponent(this.parentApplication), DnsCreateRecordSetPopUp , true));
				createRecordSet.dns53 = this;
				createRecordSet.domainName = hostedZone.selectedItem.name;
				createRecordSet.zoneId = hostedZone.selectedItem.zoneId;
			}
			
			
			protected function deleteRecordSet_clickHandler(event:MouseEvent):void
			{
				var deleteRecordSet:DnsDeleteRecordSetPopUp = DnsDeleteRecordSetPopUp(PopUpManager.createPopUp(UIComponent(this.parentApplication), DnsDeleteRecordSetPopUp , true));
				deleteRecordSet.dns53 = this;
				deleteRecordSet.zoneId = hostedZone.selectedItem.zoneId;
				deleteRecordSet.recordSet = recordSet.selectedItem;
			}
			
			protected function getHostedZonesSvc_resultHandler(event:ResultEvent):void
			{
				var result:XMLList = Helpers.xmlChildrenFromEvent(event);
				hostedZoneCollection.removeAll();
				for each(var zone:XML in result.children())
				{
					if(zone.name() == "HostedZone")
					{
						hostedZoneCollection.addItem({name: zone.child('Name'), zoneId: zone.child('Id'), comment: zone.child('Comment')});
					}
				}
				
				hostedZone.visible = true;
				loader.visible = false;
			}
			
			protected function faultHandler(event:FaultEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function getRecordSetSvc_resultHandler(event:ResultEvent):void
			{
				var result:XMLList = Helpers.xmlChildrenFromEvent(event);
				for each(var record:XML in result.children())
				{
					if(record.name() == "ResourceRecordSet")
					{
						var valueString:String = "";
						for each(var value:XML in record.child('ResourceRecords').children())
						{
							if(value.toString() != "null")
							{
								valueString = valueString + value.toString() + "\n";
							}
						}
						valueString = StringUtil.trim(valueString);
						if(record.child('Name').toString() == hostedZone.selectedItem.name && (record.child('Type').toString() == "NS" || record.child('Type').toString() == "SOA"))
						{
							recordSetCollection.addItem({name: record.child('Name'), type: record.child('Type'), value: valueString, ttl: record.child('TTL'), removable: false});
						}else
						{
							recordSetCollection.addItem({name: record.child('Name'), type: record.child('Type'), value: valueString, ttl: record.child('TTL'), removable: true});
						}
					}
				}
			}
			
			protected function recordSet_selectionChangeHandler(event:GridSelectionEvent):void
			{
				if(recordSet.selectedIndex != -1 && recordSet.selectedItem.removable)
				{
					deleteRecordEnable = true;
				}else
				{
					deleteRecordEnable = false;
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<fx:int id="accountId"/>
		
		<s:HTTPService id="getHostedZonesSvc"
					   url="{Helpers.getHost()}/ec2_accounts/get_dns_hosted_zones/{accountId}.xml"
					   resultFormat="e4x"
					   method="GET"
					   showBusyCursor="true"
					   result="getHostedZonesSvc_resultHandler(event)"
					   fault="faultHandler(event)"/>
		
		<s:HTTPService id="getRecordSetSvc"
					   url="{Helpers.getHost()}/ec2_accounts/get_dns_record_set/{accountId}.xml"
					   resultFormat="e4x"
					   method="GET"
					   showBusyCursor="true"
					   result="getRecordSetSvc_resultHandler(event)"
					   fault="faultHandler(event)"/>
	</fx:Declarations>
	
	<s:VGroup height="100%" width="100%">
		<s:HGroup paddingTop="5" paddingBottom="5" paddingLeft="5">
			<s:Button id="createHostedZone" label="Create Hosted Zone" click="createHostedZone_clickHandler(event)"/>
			<s:Button id="deleteHostedZone" label="Delete Hosted Zone" click="deleteHostedZone_clickHandler(event)" enabled="{hostedZone.selectedIndex!=-1}"/>
			<s:Button label="Refresh" click="refreshHostedZones()"/>
		</s:HGroup>
		<mx:VDividedBox width="100%" height="100%" color="black">
			<s:BorderContainer width="100%" height="100%">
				<s:Group height="100%" width="100%">
					<s:HGroup height="100%" width="100%" horizontalAlign="center" verticalAlign="middle">
						<s:BusyIndicator id="loader" height="150" width="150" visible="true"/>
					</s:HGroup>
					<s:DataGrid id="hostedZone" height="100%" width="100%" selectionMode="singleRow" dataProvider="{hostedZoneCollection}" visible="false" selectionChange="hostedZone_selectionChangeHandler(event)">
						<s:columns>
							<s:ArrayList id="hostedZoneColumns">
								<s:GridColumn headerText="Domain Name" dataField="name"/>
								<s:GridColumn headerText="Hosted Zone ID" dataField="zoneId"/>
								<s:GridColumn headerText="Comment" dataField="comment"/>
							</s:ArrayList>
						</s:columns>
					</s:DataGrid>
				</s:Group>
			</s:BorderContainer>
			<s:BorderContainer height="100%" width="100%">
				<s:VGroup height="100%" width="100%">
					<s:HGroup paddingTop="5" paddingBottom="5" paddingLeft="5">
						<s:Button id="createRecordSet" label="Create Record Set" click="createRecordSet_clickHandler(event)" enabled="{hostedZone.selectedIndex!=-1}"/>
						<s:Button id="editRecord" label="Edit Record Set" click="editRecord_clickHandler(event)" enabled="{recordSet.selectedIndex!=-1}"/>
						<s:Button id="deleteRecordSet" label="Delete Record Set" click="deleteRecordSet_clickHandler(event)" enabled="{deleteRecordEnable}"/>
					</s:HGroup>
					<s:DataGrid id="recordSet" height="100%" width="100%" selectionMode="singleRow" dataProvider="{recordSetCollection}" selectionChange="recordSet_selectionChangeHandler(event)" variableRowHeight="true">
						<s:columns>
							<s:ArrayList id="recordSetColumns">
								<s:GridColumn headerText="Name" dataField="name" width="300"/>
								<s:GridColumn headerText="Type" dataField="type" width="60"/>
								<s:GridColumn headerText="Value" dataField="value"/>
								<s:GridColumn headerText="TTL" dataField="ttl" width="100"/>
							</s:ArrayList>
						</s:columns>
					</s:DataGrid>
				</s:VGroup>
			</s:BorderContainer>
		</mx:VDividedBox>
	</s:VGroup>
</s:Group>
