<?xml version="1.0" encoding="utf-8"?>
<s:ComboBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%" 
		 height="100%"
		 fontWeight="normal"
		 skinClass="com.momentumsi.c9.skins.InputComboBoxSkin"
		 initialize="init(event)"
		 creationComplete="creationCompleteHandler(event)"
		 textInput="textInputHandler(event)"
		 keyDown="deleteKeyHandler(event)"
		 valueCommit="valueCommitHandler(event)">
	
	<fx:Metadata>
		
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.constants.Color;
			import com.momentumsi.c9.models.ProjectVersion;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.skins.spark.PopUpButtonSkin;
			
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			public var projectVersion:ProjectVersion;
			[Bindable]
			public var defaultDataProvider:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var defaultLabelField:String;
			[Bindable]
			public var textInputField:Boolean = false;
			private var _passwordDisplay:Boolean = false;
			private var _parameter:Boolean = false;
			private var setInitialText:Boolean = false;
			private var _text:String = "";
			
			[Bindable("passwordUpdated")]
			public function get passwordDisplay():Boolean 
			{ 
				return  _passwordDisplay;
			}
			public function set passwordDisplay(value:Boolean):void
			{
				_passwordDisplay = value;
				textInput.displayAsPassword = value;
				dispatchEvent(new Event("passwordUpdated"));
			}
			
			[Bindable("textUpdated")]
			public function get text():String
			{
				var textStr:String = "";
				if(textInput != null)
				{
					textStr = textInput.text;
				}
				return textStr;
			}
			public function set text(value:String):void 
			{ 
				if(textInput != null)
				{
					textInput.text = value;
					dispatchEvent(new Event("textUpdated"));
				}else
				{
					_text = value;
					setInitialText = true;
				}
			}
			
			protected function init(event:FlexEvent):void
			{
				if(setInitialText && textInput != null)
				{
					textInput.text = _text;
					dispatchEvent(new Event("textUpdated"));
				}
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				isTextInput();
			}

			public function isParameter():Boolean 
			{
				var parameter:Boolean = false;
				if(textInput.text.length > 0 && textInput.text.charAt(0) == "@")
				{
					parameter = true;
				}else if(selectedItem != null && selectedItem.hasOwnProperty("elementType") && selectedItem.elementType == "Parameter")
				{
					parameter = true;
				}
				return parameter;
			}
			
			public function isMapping():Boolean 
			{
				var mapping:Boolean = false;
				if(textInput.text.length > 0 && textInput.text.charAt(0) == "#")
				{
					mapping = true;
				}else if(selectedItem != null && selectedItem.hasOwnProperty("elementType") && selectedItem.elementType == "Mapping")
				{
					mapping = true;
				}
				return mapping;
			}
			
			protected function deleteKeyHandler(event:KeyboardEvent):void
			{
				if(event.keyCode == Keyboard.BACKSPACE || event.keyCode == Keyboard.DELETE)
				{
					dispatchEvent(new TextEvent(TextEvent.TEXT_INPUT));
				}
			}
			
			protected function textInputHandler(event:TextEvent):void
			{	
				updateInputComboBox();
			}
			
			protected function updateInputComboBox():void
			{
				if(textInput.text.length == 0)
				{
					dataProvider = defaultDataProvider;
					labelFunction = regular_labelFunction;
					isTextInput();
				}else if(textInput.text.length == 1)
				{
					if(textInput.text.charAt(0) == "@")
					{
						if(projectVersion != null)
						{
							displayComboBox();
							dataProvider = projectVersion.getParameters();
							labelFunction = parameter_labelFunction;
						}
					}else if(textInput.text.charAt(0) == "#")
					{
						if(projectVersion != null)
						{
							displayComboBox();
							dataProvider = projectVersion.getMappings();
							labelFunction = mapping_labelFunction;
						}
					}else
					{
						dataProvider = defaultDataProvider;
						labelFunction = regular_labelFunction;
						isTextInput();
					}
				}else if(textInput.text.length > 0 && projectVersion != null)
				{
					if(textInput.text.charAt(0) == "@")
					{
						dataProvider = projectVersion.getParameters();
					}else if(textInput.text.charAt(0) == "#")
					{
						dataProvider = projectVersion.getMappings();
					}else
					{
						dataProvider = defaultDataProvider;
					}
				}
				dispatchEvent(new Event("textUpdated"));
			}
			
			private function displayComboBox():void
			{
				openButton.includeInLayout = true;
				openButton.visible = true;
				openOnInput = true;
				openDropDown();
			}
			
			private function isTextInput():void
			{
				if(textInputField)
				{
					openButton.includeInLayout = false;
					openButton.visible = false;
					openOnInput = false;
					closeDropDown(true);
				}
			}
			
			protected function parameter_labelFunction(item:Object):String
			{
				if(item != null && item.hasOwnProperty("name"))
					return "@" + item.name;
				else
					return "";
			}
			
			protected function mapping_labelFunction(item:Object):String
			{
				if(item != null && item.hasOwnProperty("name"))
					return "#" + item.name;
				else
					return "";
			}
			
			protected function regular_labelFunction(item:Object):String
			{
				if(defaultLabelField != null && item != null && item.hasOwnProperty(defaultLabelField))
				{
					return item[defaultLabelField];
				}else
				{
					if(item == null)
					{
						return "";
					}else
					{
						return item.toString();	
					}
				}
			}
			
			protected function valueCommitHandler(event:FlexEvent):void
			{
				if(selectedItem != null && selectedItem != -1)
				{
					if(isParameter())
					{
						if(selectedItem.hasOwnProperty("name"))
							textInput.text = "@" + selectedItem.name.toString();
						else
							textInput.text = "";
					}else if(isMapping())
					{
						if(selectedItem.hasOwnProperty("name"))
							textInput.text = "#" + selectedItem.name.toString();
						else
							textInput.text = "";	
					}else
					{
						if(selectedItem is String || selectedItem is Number)
						{
							textInput.text = selectedItem.toString();
						}else if(labelField != null)
						{
							textInput.text = selectedItem[labelField].toString();
						}else if(defaultLabelField != null)
						{
							textInput.text = selectedItem[defaultLabelField].toString();
						}
					}
				}
				dispatchEvent(new Event("textUpdated"));
			}
			
			public function setRegularLabelFunction():void
			{
				labelFunction = regular_labelFunction;
			}
			
			public function setParameterLabelFunction():void
			{
				labelFunction = parameter_labelFunction;
			}
			
			public function setMappingLabelFunction():void
			{
				labelFunction = mapping_labelFunction;	
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
</s:ComboBox>
