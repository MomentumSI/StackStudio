<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   width="500" height="400"
			   title="Manage Project Groups"
			   creationComplete="creationCompleteHandler(event)"
			   move="Helpers.doMove(this)"
			   close="closeHandler(event)" xmlns:services="com.momentumsi.c9.services.*">
	
	<fx:Metadata>
		[Event(name="groupsSet", type="flash.events.Event")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.events.ProjectEvent;
			import com.momentumsi.c9.models.Account;
			import com.momentumsi.c9.models.Group;
			import com.momentumsi.c9.models.Project;
			import com.momentumsi.c9.models.User;
			import com.momentumsi.c9.utils.Helpers;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]
			public var user:User;
			[Bindable]
			public var project:Project;
			[Bindable]
			public var nonProjectGroupsCollection:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var projectGroupsCollection:ArrayCollection = new ArrayCollection();
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				PopUpManager.centerPopUp(this);
				if(user != null && user.org_id != null)
				{
					orgService.getOrgDetails(user.org_id);
				}
			}
			
			protected function orgService_resultHandler(event:ResultEvent):void
			{
				refreshGroupLists();
			}
			
			protected function refreshGroupLists():void
			{
				if(project != null && project.members != null)
				{
					var groups:Array = new Array();
					if(orgService.result.org.accounts != null)
					{
						groups = orgService.result.org.groups;
					}
					nonProjectGroupsCollection.removeAll();
					projectGroupsCollection.removeAll();
					var group:Group;
					for each(var g:Object in groups)
					{
						if(project.hasGroup(g.group.id))
						{
							projectGroupsCollection.addItem(g.group);
						}else
						{
							nonProjectGroupsCollection.addItem(g.group);
						}
					}
				}
			}
			
			protected function addGroupsToProject_clickHandler(event:MouseEvent):void
			{
				if(nonProjectGroupsList.selectedIndex != -1 && nonProjectGroupsList.selectedItem.id != null)
				{
					project.addEventListener(ProjectEvent.PROJECT_RESULT, changeGroups_resultHandler);
					project.addNewGroup(nonProjectGroupsList.selectedItem.id);
				}
			}
			
			protected function changeGroups_resultHandler(event:Event=null):void
			{
				project.removeEventListener(ProjectEvent.PROJECT_RESULT, changeGroups_resultHandler);
				refreshGroupLists();
			}
			
			protected function removeGroupsFromProject_clickHandler(event:MouseEvent):void
			{
				if(projectGroupsList.selectedIndex != -1)
				{
					project.addEventListener(ProjectEvent.PROJECT_RESULT, changeGroups_resultHandler);
					project.removeGroup(projectGroupsList.selectedItem.id);
				}
			}
			
			
			protected function closeHandler(event:CloseEvent=null):void
			{
				dispatchEvent(new Event("groupsSet"));
				PopUpManager.removePopUp(this);
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<services:OrgService id="orgService"
							 result="orgService_resultHandler(event)"/>
	</fx:Declarations>
	
	<s:VGroup width="100%" height="90%" paddingTop="10" paddingLeft="20" paddingRight="20" paddingBottom="10">
		<s:HGroup width="100%" height="100%">
			<s:VGroup width="100%" height="100%">
				<mx:Text text="Non Project Groups" fontWeight="bold"/>
				<s:BorderContainer cornerRadius="4" height="100%" width="100%">
					<s:Rect width="100%" height="100%">
						<s:fill>
							<s:SolidColor>
								<s:color>0x330066</s:color>
							</s:SolidColor>
						</s:fill>
					</s:Rect>
					<s:List id="nonProjectGroupsList"
							labelField="name"
							dataProvider="{nonProjectGroupsCollection}"
							styleName="transparentList"
							height="100%" width="100%" 
							color="white"/>
				</s:BorderContainer>
			</s:VGroup>
			<s:VGroup height="100%" verticalAlign="middle">
				<s:Button id="addGroupsToProject" label="&gt;&gt;" width="38" click="addGroupsToProject_clickHandler(event)" toolTip="Add group to project."/>
				<s:Button id="removeGroupsFromProject" label="&lt;&lt;" width="38" click="removeGroupsFromProject_clickHandler(event)" toolTip="Remove group from project."/>
			</s:VGroup>
			<s:VGroup width="100%" height="100%">
				<mx:Text text="Project Groups" fontWeight="bold"/>
				<s:BorderContainer cornerRadius="4" height="100%" width="100%">
					<s:Rect width="100%" height="100%">
						<s:fill>
							<s:SolidColor>
								<s:color>0x330066</s:color>
							</s:SolidColor>
						</s:fill>
					</s:Rect>
					<s:List id="projectGroupsList"
							labelField="name"
							dataProvider="{projectGroupsCollection}"
							styleName="transparentList"
							height="100%" width="100%" 
							color="white"/>
				</s:BorderContainer>
			</s:VGroup>
		</s:HGroup>
	</s:VGroup>
	<s:Button id="closeButton" x="215" y="337" label="Close" click="closeHandler()"/>
</s:TitleWindow>
