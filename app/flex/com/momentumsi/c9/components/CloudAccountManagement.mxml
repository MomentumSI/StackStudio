<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   title="Cloud Accounts"
			   move="Helpers.doMove(this)"
			   closeButton="{acctMgmtCloseButton}"
			   creationComplete="creationCompleteHandler(event)"
			   initialize="editAccountsWindow_initializeHandler(event)"
			   width="800" height="650" xmlns:services="com.momentumsi.c9.services.*" 
			   xmlns:components="com.momentumsi.c9.components.*">
	
	<fx:Script>
		<![CDATA[
			import com.maccherone.json.JSON;
			import com.momentumsi.c9.components.accountForms.*;
			import com.momentumsi.c9.containers.CoverFlowContainer;
			import com.momentumsi.c9.events.apiIdentity.*;
			import com.momentumsi.c9.models.Cloud;
			import com.momentumsi.c9.models.CloudAccount;
			import com.momentumsi.c9.models.User;
			import com.momentumsi.c9.services.IdentityService;
			import com.momentumsi.c9.utils.Helpers;
			
			import mx.collections.ArrayCollection;
			import mx.containers.Panel;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.CollectionEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.mxml.HTTPService;
			
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			public var user:User;
			[Bindable]
			private var account:CloudAccount;
			[Bindable]
			private var identityService:IdentityService = new IdentityService();
			[Bindable]
			private var cloudList:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var cloudVersionList:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var selectedCloud:Cloud;
			private var previousSelectedIndex:int;
			private var saving:Boolean = false;
			
			protected function editAccountsWindow_initializeHandler(event:FlexEvent):void
			{
				getCloudsSvc = new CloudService();
				identityService.addEventListener(CreateCloudAccountFaultEvent.FAULT, saveCloudAccount_faultHandler);
				identityService.addEventListener(UpdateCloudAccountFaultEvent.FAULT, saveCloudAccount_faultHandler); 
				identityService.addEventListener(CreateCloudAccountResultEvent.RESULT, updateUserAccounts);
				identityService.addEventListener(DeleteCloudAccountResultEvent.RESULT, deleteAccountComplete);
			    identityService.addEventListener(UpdateCloudAccountResultEvent.RESULT, updateUserAccounts);
				getCloudsSvc.getClouds();
				getCloudsSvc.addEventListener(ResultEvent.RESULT, getCloudsSvc_resultHandler);
				cloudCoverFlow.coverflow.addEventListener(IndexChangedEvent.CHANGE, cloudCoverFlow_changeHandler);
			}
			
			protected function cloudCoverFlow_changeHandler(event:IndexChangedEvent):void
			{
				cloudCoverFlowChanged();
			}
			
			protected function cloudCoverFlowChanged():void
			{
				cloudVersionList.removeAll();
				var selectedCloudProvider:String = determineSelectedCloudProvider();
				if(selectedCloudProvider != "")
				{	
					for each(var c:Cloud in cloudList)
					{
						if(selectedCloudProvider == c.cloudProvider)
						{
							cloudVersionList.addItem(c);
							selectedCloud = c;
						}
					}
					setCloudAccountForm(selectedCloud);
				}
			}
			
			protected function getCloudsSvc_resultHandler(event:ResultEvent):void
			{
				cloudList = getCloudsSvc.cloudCollection;
				for each(var c:Cloud in cloudList)
				{
					cloudCoverFlow.addPanel(c.cloudProvider, c.coverFlow);
				}
				user.addEventListener("cloudAccountsUpdated", userCloudAccounts_changeHandler);
				if(user.cloud_accounts.length == 0)
				{
					newButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
				}else{
					accountsList.selectedIndex = 0;
				}
			}
			
			protected function userCloudAccounts_changeHandler(event:Event=null):void
			{
				if(saving)
				{
					if(previousSelectedIndex == -1)
					{
						if(accountsList.dataProvider.length > 0)
						{
							accountsList.selectedIndex = accountsList.dataProvider.length - 1;
						}
					}else
					{
						accountsList.selectedIndex = previousSelectedIndex;
					}
				}else
				{
					accountsList.selectedIndex = 0;
				}
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				PopUpManager.centerPopUp(this);
			}
			
			protected function accountsList_changeHandler(event:FlexEvent):void
			{
				if(List(event.currentTarget).selectedItems.length != 0)
				{
					account = CloudAccount(event.currentTarget.selectedItems[0]);
					if(account.id != null)
					{
						cloudCoverFlow.coverflow.enabled = false;
					}else
					{
						cloudCoverFlow.coverflow.enabled = true;
					}
					for each(var cloud:Cloud in cloudList)
					{
						if(cloud.id == account.cloud_id)
						{
							var container:CoverFlowContainer = cloudCoverFlow.coverflow;
							var panelsArray:Array = container.getChildren();
							for(var index:int=0; index < panelsArray.length; index++)
							{
								if(panelsArray[index].id == cloud.cloudProvider)
								{
									container.selectedChild = panelsArray[index];
									break;
								}
							}
							break;
						}
					}
					cloudCoverFlowChanged();
				}
			}
			
			private function setCloudAccountForm(cloud:Cloud=null):void
			{
				if(account == null || cloud == null)
				{
					return;
				}
				if(account.id == null)
				{
					account.cloud_provider = cloud.cloudProvider;
				}
				accountFormVG.removeAllElements();				
				var cloudForm:CloudFormBase;					
				switch(account.cloud_provider)
				{
					case CloudAccount.AMAZON:
						cloudForm = new AmazonAccountForm();
						cloudForm.cloud = cloud;
						break;
					case CloudAccount.RACKSPACE:
						cloudForm = new RackspaceAccountForm();
						cloudForm.cloud = cloud;
						break;
					case CloudAccount.CLOUDSTACK:
						cloudForm = new CloudStackAccountForm();
						break;
					case CloudAccount.EUCALYPTUS:
						cloudForm = new EucalyptusAccountForm();
						break;
					case CloudAccount.HP:
						cloudForm = new HPAccountForm();
						cloudForm.cloud = cloud;
						break;
					case CloudAccount.JOYENT:
						cloudForm = new JoyentAccountForm();
						cloudForm.cloud = cloud;
						break;
					case CloudAccount.OPENSTACK:
						cloudForm = new OpenstackAccountForm();
						break;
				}
				if(cloudForm != null)
				{
					cloudForm.user = user;
					cloudForm.account = account;
					cloudForm.identityService = identityService;
					cloudForm.cloudVersionCollection.source = cloudVersionList.source;
					accountFormVG.addElement(cloudForm);
				}
			}
			
			protected function deleteButton_clickHandler(event:MouseEvent):void
			{
				if(accountsList.selectedItem == null)
				{
					Alert.show("Select an account from the Existing Accounts list first.");
				}else{
					Alert.show("Are you sure you want to delete " + CloudAccount(accountsList.selectedItem).name + "?", "Delete Account", Alert.YES | Alert.CANCEL, this, deleteAccountHandler);
				}
			}
			
			protected function saveButton_clickHandler(event:MouseEvent):void
			{
				saving = true;
				previousSelectedIndex = accountsList.selectedIndex;
				var accountForm:CloudFormBase = accountFormVG.getElementAt(0) as CloudFormBase;
				accountForm.saveAccount();
				setSavingState(true);
			}
			
			private function saveCloudAccount_faultHandler(event:FaultEvent):void
			{
				Alert.show("Unable to save account because of internal error.", "Internal Error");
				saving = false;
				setSavingState(false);
			}
			
			private function updateUserAccounts(event:ResultEvent):void
			{
				refreshUser();
			}
			
			private function refreshUser():void
			{
				identityService.user = user;
				identityService.addEventListener(ResultEvent.RESULT, updateUserComplete);
				identityService.updateUser();
			}
			
			protected function updateUserComplete(event:ResultEvent):void
			{
				identityService.removeEventListener(ResultEvent.RESULT, updateUserComplete);
				Alert.show("Account has been updated.");
				setSavingState(false);
			}
			
			private function deleteAccountHandler(event:CloseEvent):void
			{
				if(event.detail == Alert.YES)
				{
					saving = false;
					setDeletingState(true);
					var account:CloudAccount = accountsList.selectedItem as CloudAccount;
					if(account.id != null)
					{
						identityService.user = user;
						identityService.addEventListener(DeleteCloudAccountResultEvent.RESULT, deleteAccountComplete);
						identityService.addEventListener(DeleteCloudAccountFaultEvent.FAULT, deleteAccount_faultHandler);
						identityService.deleteCloudAccount(user.id, CloudAccount(accountsList.selectedItem));
					}
				}
			}
			
			private function deleteAccountComplete(event:DeleteCloudAccountResultEvent):void
			{
				identityService.removeEventListener(DeleteCloudAccountResultEvent.RESULT, deleteAccountComplete);
				accountFormVG.removeAllElements();
				setDeletingState(false);
			}
			
			private function deleteAccount_faultHandler(event:DeleteCloudAccountFaultEvent):void
			{
				Alert.show("Error deleting account.");
				identityService.removeEventListener(DeleteCloudAccountFaultEvent.FAULT, deleteAccount_faultHandler);
				setDeletingState(false);
			}
			
			protected function newButton_clickHandler(event:MouseEvent):void
			{
				accountsList.selectedIndex = -1;
				account = new CloudAccount();
				if(selectedCloud == null)
				{
					cloudCoverFlowChanged();
				}
				setCloudAccountForm(selectedCloud);
				cloudCoverFlow.coverflow.enabled = true;
			}
			
			protected function imageServicesButton_clickHandler(event:MouseEvent):void
			{
				Alert.show("Managing cloud images is coming soon!");
			}
			
			protected function determineSelectedCloudProvider():String
			{
				var cloudProvider:String;
				var selectedPanel:Panel = cloudCoverFlow.coverflow.selectedChild as Panel;
				if(selectedPanel != null)
				{
					cloudProvider = selectedPanel.id;
					return cloudProvider;
				}else
				{
					return new String();
				}
			}
			
			private function setDeletingState(isDeleting:Boolean):void
			{
				if(isDeleting)
				{
					deleteButton.label = "Deleting";
				}else{
					deleteButton.label = "Delete";
				}
				setButtonsState(isDeleting);
			}
			
			private function setSavingState(isSaving:Boolean):void
			{
				if(isSaving)
				{
					saveButton.label = "Saving";
				}else{
					saveButton.label = "Save";
				}
				setButtonsState(isSaving);
			}
			
			private function setButtonsState(isChanging:Boolean):void
			{
				var isEnabled:Boolean = !isChanging;
				deleteButton.enabled = isEnabled;
				saveButton.enabled = isEnabled;
				accountFormVG.enabled = isEnabled;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<services:CloudService id="getCloudsSvc"/>
	</fx:Declarations>
	
	<s:VGroup height="100%" width="100%" paddingTop="5" paddingLeft="15" paddingRight="15" paddingBottom="10">
		<mx:Text text="Select an account to edit."
				 fontWeight="bold"/>
		<s:HGroup width="100%" height="100%" gap="5">
			<s:VGroup width="219" height="100%">
				<mx:Text text="Existing Accounts" fontWeight="bold" color="black"/>
				<s:BorderContainer cornerRadius="4" height="100%" width="100%">
					<s:Rect width="100%" height="100%">
						<s:fill>
							<s:SolidColor>
								<s:color>0x330066</s:color>
							</s:SolidColor>
						</s:fill>
					</s:Rect>
					<s:List id="accountsList" labelField="account-name"
						    styleName="transparentList"
							dataProvider="{user.cloud_accounts}" 
							height="100%" width="100%" 
							color="white"
						    valueCommit="accountsList_changeHandler(event)"/>
				</s:BorderContainer>
			</s:VGroup>
			<s:VGroup width="100%" height="100%">
				<mx:Text text="Account Details" fontWeight="bold" color="black"/>
				<components:CloudAccountsHorizontalCoverFlow id="cloudCoverFlow" width="100%" height="175"/>
				<s:BorderContainer cornerRadius="4" 
								   height="100%" width="100%">
					<s:Scroller height="100%" width="100%">
						<s:viewport>
							<s:VGroup id="accountFormVG"
									  height="100%" width="100%"/>
						</s:viewport>
					</s:Scroller>
				</s:BorderContainer>
			</s:VGroup>
		</s:HGroup>
		<s:HGroup width="100%" paddingTop="20">
			<s:HGroup horizontalAlign="left" width="100%">
				<s:Button label="New" id="newButton" click="newButton_clickHandler(event)"/>
				<s:Button label="Delete" id="deleteButton" click="deleteButton_clickHandler(event)"/>
				<s:Button label="Save" id="saveButton" click="saveButton_clickHandler(event)"/>
			</s:HGroup>
			<s:HGroup horizontalAlign="right" width="100%">
				<s:Button id="acctMgmtCloseButton"
						  label="Close" 
						  click="dispatchEvent(new CloseEvent(CloseEvent.CLOSE))"/>
			</s:HGroup>			
		</s:HGroup>
	</s:VGroup>
</s:TitleWindow>
