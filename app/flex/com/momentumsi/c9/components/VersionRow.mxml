<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="com.momentumsi.c9.components.*"
		  horizontalAlign="center">
	<fx:Metadata>
		[Event(name="promoteEnvironment", type="flash.events.Event")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.models.Environment;
			import com.momentumsi.c9.models.ProvisionedVersion;
			
			import mx.collections.ArrayCollection;
			
			import spark.components.RadioButton;
			import spark.components.RadioButtonGroup;
			[Bindable]
			public var version:String;
			private var _environments:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var radioButtonGroup:RadioButtonGroup;
			public var promoteEnvironment:String;
			public var currentEnvironment:String;
			
			public function setRunningEnvironment(environment:String):void
			{
				for(var index:int=0; index < numElements; index++)
				{
					var item:Object = getElementAt(index);
					if(item is StateRadioButton)
					{
						if((item as StateRadioButton).environment == environment)
						{
							(item as StateRadioButton).running = true;
							return;
						}
					}
				}
			}
			
			public function set selectedEnvironment(value:String):void
			{
				for(var index:int=0; index < rbHG.numElements; index++)
				{
					var item:Object = rbHG.getElementAt(index);
					if(item is StateRadioButton)
					{
						if((item as StateRadioButton).environment == value)
						{
							(item as StateRadioButton).selected = true;
							return;
						}
					}
				}
			}
			
			public function set environments(value:ArrayCollection):void
			{
				_environments = value;
				var srb:StateRadioButton;
				for each(var env:Environment in value)
				{
					srb = new StateRadioButton();
					srb.group = radioButtonGroup;
					srb.environment = env.name;
					srb.container = this;
					rbHG.addElement(srb);
				}
				
				if(_environments.length < 4)
				{
					rbHG.addElement(promoteButton);
				}
			}
			
			public function get environments():ArrayCollection 
			{
				return _environments;
			}
			
			protected function promoteButton_clickHandler(event:MouseEvent):void
			{
				var promoteIndex:int = rbHG.getElementIndex(promoteButton);
				switch(promoteIndex)
				{
					case 1:
						currentEnvironment = Environment.DEVELOPMENT;
						promoteEnvironment = Environment.TEST;
						break;
					case 2:
						currentEnvironment = Environment.TEST;
						promoteEnvironment = Environment.STAGING;
						break;
					case 3:
						currentEnvironment = Environment.STAGING;
						promoteEnvironment = Environment.PRODUCTION;
						break;
				}
				
				dispatchEvent(new Event("promoteEnvironment"));
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		
		<!--These buttons were used for testing (so viewing in design mode would be easier)-->
		<components:StateRadioButton id="devSelection"
									 group="{radioButtonGroup}"
									 environment="Dev"
									 container="{this}"/>
		<components:StateRadioButton id="testSelection"
									 group="{radioButtonGroup}"
									 environment="Test"
									 container="{this}"/>
		<components:StateRadioButton id="stageSelection"
									 group="{radioButtonGroup}"
									 environment="Stage"
									 container="{this}"/>
		<components:StateRadioButton id="prodSelection"
									 group="{radioButtonGroup}"
									 environment="Production"
									 container="{this}"/>
		
		<s:Button id="promoteButton"
				  skinClass="spark.skins.spark.ButtonSkin"
				  label="+"
				  width="31"
				  color="black"
				  click="promoteButton_clickHandler(event)"
				  fontWeight="bold"/>
	</fx:Declarations>
	<s:Label id="versionLabel"
			 width="60"
			 color="black" 
			 fontSize="13" fontWeight="bold"
			 text="{version}"/>
	<s:HGroup id="rbHG">
	</s:HGroup>
</s:HGroup>
