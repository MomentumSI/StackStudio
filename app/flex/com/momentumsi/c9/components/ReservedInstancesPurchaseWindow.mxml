<?xml version="1.0" encoding="utf-8"?>
<wizard:WizardWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
					 xmlns:s="library://ns.adobe.com/flex/spark" 
					 xmlns:mx="library://ns.adobe.com/flex/mx" 
					 xmlns:components="com.momentumsi.c9.components.*"
					 xmlns:services="com.momentumsi.c9.services.*"
					 xmlns:wizard="com.momentumsi.c9.components.wizard.*"
					 width="948" height="582"
					 creationComplete="customtitlewindow1_creationCompleteHandler(event)"
					 title="Purchase Reserved Instances">
	
	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.constants.AvailabilityZones;
			import com.momentumsi.c9.constants.ImagePath;
			import com.momentumsi.c9.constants.InstanceTypes;
			import com.momentumsi.c9.constants.PlatformConstants;
			import com.momentumsi.c9.constants.Region;
			import com.momentumsi.c9.constants.ResourceTypeLabel;
			import com.momentumsi.c9.events.CloudResourceCreateEvent;
			import com.momentumsi.c9.events.DataGridButtonClickEvent;
			import com.momentumsi.c9.events.compute.ComputeServiceFaultEvent;
			import com.momentumsi.c9.events.compute.DescribeReservedInstancesOfferingsResultEvent;
			import com.momentumsi.c9.events.compute.PurchaseReservedInstancesOfferingResultEvent;
			import com.momentumsi.c9.itemRenderers.DataGridButton;
			import com.momentumsi.c9.models.CloudAccount;
			import com.momentumsi.c9.representers.ReservedInstanceOfferingRepresenter;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			
			import spark.components.gridClasses.GridItemRenderer;
			
			[Bindable]
			private var availabilityZonesCollection:ArrayCollection = new ArrayCollection([
				AvailabilityZones.ANY
			]);
			[Bindable]
			private var cart:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var priceDisplay:String = "0.00";
			
			protected function customtitlewindow1_creationCompleteHandler(event:FlexEvent):void
			{
				reservedInstancesOfferingsDG.addEventListener(DataGridButtonClickEvent.CLICK, addToCart_clickHandler);
				switch(region)
				{
					case Region.US_EAST_1:
						availabilityZonesCollection.addAll(AvailabilityZones.US_EAST_1_ZONES);
						break;
					//TODO Add all other regions
				}
				
			}
			
			protected function searchButton_clickHandler(event:MouseEvent):void
			{
				var filters:Object = new Object();
				filters["product-description"] = platformDDL.selectedItem;
				filters["instance-type"] = instanceTypeDDL.selectedItem;
				
				if(availabiltyZoneDDL.selectedIndex != 0)
				{
					filters["availability-zone"] = availabiltyZoneDDL.selectedItem;
				}
				//filters["offering-type"] = offeringTypeDDL.selectedItem;
				if(durationDDL.selectedIndex == 1)
				{
					filters["duration"] = 31536000; 
				}else if(durationDDL.selectedIndex == 2)
				{
					filters["duration"] = 94608000;
				}
				dataViewStack.selectedChild = loadingContent;
				computeService.addEventListener(DescribeReservedInstancesOfferingsResultEvent.RESULT, search_resultHandler);
				computeService.addEventListener(ComputeServiceFaultEvent.FAULT, search_faultHandler);
				computeService.describeOfferings(filters);
			}
			
			private function search_resultHandler(event:DescribeReservedInstancesOfferingsResultEvent):void
			{
				dataViewStack.selectedChild = reservedInstancesOfferingsContent;
				reservedInstancesOfferingsDG.dataProvider = computeService.reservedInstanceOfferings;
			}
			
			private function search_faultHandler(event:ComputeServiceFaultEvent):void
			{
				dataViewStack.selectedChild = alertContent;
			}
			
			private function addToCart_clickHandler(event:DataGridButtonClickEvent):void
			{
				var offering:ReservedInstanceOfferingRepresenter = event.data as ReservedInstanceOfferingRepresenter;
				cart.addItem(offering);
				
				var totalPrice:Number = 0;
				for each(var inst:ReservedInstanceOfferingRepresenter in cart)
				{
					totalPrice = totalPrice + inst.fixedPrice;
				}
				
				priceDisplay = totalPrice.toFixed(2);
				
				nextButton.enabled = true;
			}
			
			protected function reservedInstanceStack_changeHandler(event:IndexChangedEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function previousButton_clickHandler(event:MouseEvent):void
			{
				reservedInstanceStack.selectedIndex = reservedInstanceStack.selectedIndex - 1;
				if(cart.length > 0)
				{
					nextButton.enabled = true;
				}
			}
			
			protected function nextButton_clickHandler(event:MouseEvent):void
			{
				if(cart.length > 0)
				{
					reservedInstanceStack.selectedIndex++;
					nextButton.enabled = false;
				}else{
					Alert.show("Must add at least one offering to your cart.");
				}
			}
			
			protected function finishButton_clickHandler(event:MouseEvent):void
			{
				finishButton.label = "Processing";
				finishButton.enabled = false;
				computeService.addEventListener(PurchaseReservedInstancesOfferingResultEvent.RESULT, offeringsPurchase_resultHandler);
				computeService.addEventListener(ComputeServiceFaultEvent.FAULT, offeringsPurchase_faultHandler);
				
				var offeringsObj:Object = new Object();
				for each(var offering:ReservedInstanceOfferingRepresenter in cart)
				{
					if(offeringsObj[offering.reservedInstancesOfferingId] == null)
					{
						offeringsObj[offering.reservedInstancesOfferingId] = 1;
					}else{
						offeringsObj[offering.reservedInstancesOfferingId]++;
					}
				}
				
				computeService.purchaseOfferings(offeringsObj);
			}
			
			private function cartItem_descriptionRenderer(item:Object, column:GridColumn):String
			{
				var resInst:ReservedInstanceOfferingRepresenter = item as ReservedInstanceOfferingRepresenter;
				if(resInst.offeringType != null)
				{
					return resInst.offeringType + " " + resInst.productDescription + " " + resInst.instanceType + " in " + resInst.availabilityZone + " for " + resInst.term;
				}else{
					return resInst.productDescription + " " + resInst.instanceType + " in " + resInst.availabilityZone + " for " + resInst.term;
				}
			}
			
			protected function cartDG_creationCompleteHandler(event:FlexEvent):void
			{
				cartDG.addEventListener(DataGridButtonClickEvent.CLICK, removeFromCart_clickHandler);
			}
			
			private function removeFromCart_clickHandler(event:DataGridButtonClickEvent):void
			{
				var itemIndex:int = cart.getItemIndex(event.data);
				cart.removeItemAt(itemIndex);
			}
			
			private function offeringsPurchase_resultHandler(event:PurchaseReservedInstancesOfferingResultEvent):void
			{
				computeService.removeEventListener(PurchaseReservedInstancesOfferingResultEvent.RESULT, offeringsPurchase_resultHandler);
				computeService.removeEventListener(ComputeServiceFaultEvent.FAULT, offeringsPurchase_faultHandler);
				dispatchEvent(new CloudResourceCreateEvent(event.result));
			}
			
			private function offeringsPurchase_faultHandler(event:FaultEvent):void
			{
				computeService.removeEventListener(PurchaseReservedInstancesOfferingResultEvent.RESULT, offeringsPurchase_resultHandler);
				computeService.removeEventListener(ComputeServiceFaultEvent.FAULT, offeringsPurchase_faultHandler);
				finishButton.label = "Finish";
				finishButton.enabled = true;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<services:Ec2Service id="computeService"
							 cloudAccountId="{cloudAccount.id}"
							 region="{region}"/>
	</fx:Declarations>
	<s:VGroup id="wizardVGContainer"
			  height="100%" width="100%">
		<wizard:CookieTrail id="reservedInstanceCookieTrail"
							wizardStack="{reservedInstanceStack}"/>
		<mx:ViewStack id="reservedInstanceStack" width="100%" height="443"
					  change="reservedInstanceStack_changeHandler(event)">
			<s:NavigatorContent id="searchContent"
								label="Search Offerings"
								height="100%" width="100%">
				<s:HGroup width="100%"
						  gap="-40">
					<s:Form>
						<s:layout>
							<s:FormLayout gap="-10"/>
						</s:layout>
						<s:FormItem label="Platform:">
							<s:DropDownList id="platformDDL"
											width="205" 
											dataProvider="{PlatformConstants.RESERVED_INSTANCE_PLATFORMS}"
											selectedIndex="0">
							</s:DropDownList>
						</s:FormItem>
						<s:FormItem label="Instance Type:">
							<s:DropDownList id="instanceTypeDDL"
											width="205"
											dataProvider="{InstanceTypes.AWS_SUPPORTED_TYPES}"
											selectedIndex="0"/>
						</s:FormItem>
						<s:FormItem label="Availability Zone:">
							<s:DropDownList id="availabiltyZoneDDL"
											dataProvider="{availabilityZonesCollection}"
											width="205"
											selectedIndex="0"/>
						</s:FormItem>
					</s:Form>
					<s:Form>
						<s:layout>
							<s:FormLayout gap="-10"/>
						</s:layout>
						<s:FormItem label="Term:">
							<s:DropDownList id="durationDDL"
											width="205"
											selectedIndex="0">
								<s:dataProvider>
									<s:ArrayCollection>
										<fx:String>Any</fx:String>
										<fx:String>1 year</fx:String>
										<fx:String>3 years</fx:String>
									</s:ArrayCollection>
								</s:dataProvider>
							</s:DropDownList>
						</s:FormItem>
						<s:FormItem label="Tenancy:"
									visible="false">
							<s:DropDownList id="tenancyDDL"
											enabled="{String(platformDDL.selectedItem).search('VPC') != -1}"
											selectedIndex="0"
											width="205">
								<s:dataProvider>
									<s:ArrayCollection>
										<fx:String>Default</fx:String>
										<fx:String>Dedicated</fx:String>
									</s:ArrayCollection>
								</s:dataProvider>
							</s:DropDownList>
						</s:FormItem>
						<s:FormItem label="Offering Type:"
									visible="false">
							<s:DropDownList id="offeringTypeDDL"
											width="205"
											selectedIndex="0">
								<s:dataProvider>
									<s:ArrayCollection>
										<fx:String>Any</fx:String>
										<fx:String>Light Utilization</fx:String>
										<fx:String>Medium Utilization</fx:String>
										<fx:String>Heavy Utilization</fx:String>
									</s:ArrayCollection>
								</s:dataProvider>
							</s:DropDownList>
						</s:FormItem>
					</s:Form>
				</s:HGroup>
				<mx:ViewStack id="dataViewStack"
							  creationPolicy="all"
							  x="8" y="149"
							  width="928" height="295">
					<s:NavigatorContent id="descriptionContent">
						<s:Label x="9" y="110" height="22" text="Note: Additional taxes may apply."/>
						<s:Label x="10" y="42" width="926"
								 text="Reserved Instances help cut down your computing costs.  You pay a low, one-time fee, then a discounted hourly rate so that you know what you're paying and that you're instance is available when you need it.  Reserved instances are available for terms of 12 or 36 months, and when your term is up, there will be no interruption to your compute instance, the price will just be adjusted to the current on-demand price."/>
					</s:NavigatorContent>
					<s:NavigatorContent id="loadingContent">
						<s:HGroup verticalAlign="middle" horizontalAlign="center"
								  height="100%" width="100%">
							<s:BusyIndicator height="30" width="30"/>
							<s:Label text="Loading..."/>
						</s:HGroup>
					</s:NavigatorContent>
					<s:NavigatorContent id="alertContent">
						<s:HGroup verticalAlign="middle" horizontalAlign="center"
								  height="100%" width="100%">
							<s:Label text="There were no Reserved Instances that matched your search criteria.  Please try again."/>
						</s:HGroup>
					</s:NavigatorContent>
					<s:NavigatorContent id="reservedInstancesOfferingsContent">
						<s:DataGrid id="reservedInstancesOfferingsDG"
									rowHeight="25"
									height="100%" width="100%">
							<s:columns>
								<s:ArrayCollection>
									<s:GridColumn dataField="term" headerText="Term"/>
									<s:GridColumn dataField="upfrontPrice" headerText="Upfront Price"/>
									<s:GridColumn dataField="hourlyRate" headerText="Hourly Rate"/>
									<s:GridColumn dataField="availabilityZone" headerText="Availability Zone"/>
									<s:GridColumn dataField="offeringType" headerText="Offering Type"/>
									<s:GridColumn itemRenderer="com.momentumsi.c9.itemRenderers.DataGridButton"/>
								</s:ArrayCollection>
							</s:columns>
						</s:DataGrid>
					</s:NavigatorContent>
				</mx:ViewStack>
				<s:Button id="searchButton" x="439" y="120" label="Search"
						  click="searchButton_clickHandler(event)"/>
			</s:NavigatorContent>
			<s:NavigatorContent id="cartContent"
								height="100%" width="100%"
								label="Review Cart">
				<s:VGroup height="100%" width="100%"
						  horizontalAlign="center">
					<s:HGroup width="100%" horizontalAlign="left" paddingLeft="20">
						<s:FormHeading label="Review your cart then click Finish to complete your purchase."/>
					</s:HGroup>
					<s:DataGrid id="cartDG" width="907" height="100%"
								creationComplete="cartDG_creationCompleteHandler(event)"
								dataProvider="{cart}">
						<s:columns>
							<s:ArrayCollection>
								<s:GridColumn labelFunction="cartItem_descriptionRenderer" headerText="Description"/>
								<s:GridColumn dataField="upfrontPrice" headerText="Upfront Price"/>
								<s:GridColumn dataField="hourlyRate" headerText="Hourly Rate"/>
								<s:GridColumn itemRenderer="com.momentumsi.c9.itemRenderers.DataGridRemoveButton"/>
							</s:ArrayCollection>
						</s:columns>
					</s:DataGrid>
				</s:VGroup>
			</s:NavigatorContent>
		</mx:ViewStack>
		<s:HGroup width="100%" gap="100" horizontalAlign="center" paddingLeft="5" paddingRight="5"
				  verticalAlign="middle">
			<s:HGroup>
				<s:Button id="previousButton" 
						  enabled="{reservedInstanceStack.selectedIndex != 0}"
						  label="Previous"
						  click="previousButton_clickHandler(event)"/>
				<s:Button id="nextButton"
						  enabled="false"
						  label="Next"
						  click="nextButton_clickHandler(event)"/>
				<s:Button id="finishButton"
						  enabled="{reservedInstanceStack.selectedIndex == (reservedInstanceStack.length - 1)}"
						  label="Finish"
						  click="finishButton_clickHandler(event)"/>
			</s:HGroup>
			<s:Label text="You currently have {cart.length} items in your cart.  Total Due Now: ${priceDisplay}"/>
			<s:Button id="cancelButton"
					  click="dispatchEvent(new CloseEvent(CloseEvent.CLOSE))"
					  label="Cancel"/>
		</s:HGroup>
	</s:VGroup>
</wizard:WizardWindow>