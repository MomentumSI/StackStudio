<?xml version="1.0" encoding="utf-8"?>
<wizard:WizardWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   wizardType="{ResourceTypeLabel.EBS}"
			   initialize="init(event)"
			   width="622" height="525"
			   creationComplete="createVolumeWindow_creationCompleteHandler(event)"
			   xmlns:diagrammer="fr.kapit.diagrammer.base.uicomponent.*"
			   xmlns:components="com.momentumsi.c9.components.*"
			   xmlns:wizard="com.momentumsi.c9.components.wizard.*"
			   xmlns:services="com.momentumsi.c9.services.*">
	<fx:Script>
		<![CDATA[
			import com.hurlant.util.der.Integer;
			import com.maccherone.json.JSON;
			import com.momentumsi.c9.constants.AlertMessage;
			import com.momentumsi.c9.constants.ImagePath;
			import com.momentumsi.c9.constants.ResourceType;
			import com.momentumsi.c9.constants.ResourceTypeLabel;
			import com.momentumsi.c9.models.CloudAccount;
			import com.momentumsi.c9.models.Element;
			import com.momentumsi.c9.utils.Helpers;
			
			import mx.collections.*;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.INavigatorContent;
			import mx.effects.easing.Elastic;
			import mx.events.*;
			import mx.managers.PopUpManager;
			import mx.rpc.events.*;
			import mx.validators.Validator;
			
			import spark.events.TextOperationEvent;

			private var volumeSize:int;
			[Bindable]
			private var snapshotId:String;
			[Bindable]
			private var availabilityZone:String;
			[Bindable]
			private var reviewDescription:String = "";
			[Bindable]
			private var reviewSnapshot:String = "";
			[Bindable]
			private var reviewSize:String = "";
			[Bindable]
			private var reviewAZ:String = "";
			[Bindable]
			private var snapshotsList:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var volumeTypeCollection:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var zonesList:ArrayCollection = new ArrayCollection();
			
			public var volumeObject:Object;
			[Bindable]
			public var volumeXML:XML;
			private var currentVolumeName:String;
			[Bindable]
			private var availabilityZoneVisible:Boolean = true;
			[Bindable]
			private var consumptionCost:String = "N/A";
			[Bindable]
			private var actualCost:String = "N/A";
			
			protected function init(event:FlexEvent):void
			{
				ebsService.getEbsResources();
				ebsService.addEventListener(ResultEvent.RESULT, getResourcesSvc_resultHandler);
				if(cloudAccount.cloud_provider == CloudAccount.AMAZON)
				{
					volumeTypeCollection = new ArrayCollection([{label:"Standard", value:"standard"}, {label:"Provisioned Iops", value:"io1"}]);
				}else
				{
					volumeTypeCollection = new ArrayCollection([{label:"Standard", value:"standard"}]);
				}
			}
			
			override public function applyConfigurations():void
			{
				if(element.id == null)
				{
					return;
				}
				currentVolumeName = element.name;
				volumeName.text = currentVolumeName;
				volumeObject = element.properties;
				try{
					description.text = volumeObject['Properties']['Metadata']['Comment'];
				}catch(error:Error)
				{
					//No description available
				}
				size.text = volumeObject['Properties']['Size'];
				
				setAvailabilityZone();
				if(snapshotsList.length != 0)
				{
					setSnapshotId();
				}
				
				if(volumeObject['Properties'].hasOwnProperty("VolumeType") && volumeObject['Properties']['VolumeType'] == "io1")
				{
					volumeTypeSelection.selectedIndex = 1;
					if(volumeObject['Properties'].hasOwnProperty("Iops"))
					{
						iopsInput.text = volumeObject['Properties']['Iops'];
					}
				}
				
			}
			
			private function setConsumptionCost():void
			{
				if(cloudAccount.cloud_provider == CloudAccount.AMAZON)
				{
					if(ebsService.result != null && ebsService.result.hasOwnProperty('prices'))
					{
						var found:Boolean = false;
						for each(var price:Object in ebsService.result.prices)
						{
							price = price.price;
							if(!found)
							{
								if(volumeTypeSelection.selectedIndex == 0 && "block_storage" == price.name)
								{
									found = true;
									consumptionCost = "$" + (price.effective_price as Number).toFixed(2) + "/" + price.properties.denominator;
								}else if(volumeTypeSelection.selectedIndex == 1 && "iops_storage" == price.name)
								{
									found = true;
									for each(var p:Object in ebsService.result.prices)
									{
										p = p.price;
										if("iops" == p.name)
										{
											consumptionCost = "$" + (price.effective_price as Number).toFixed(2) + "/" + price.properties.denominator + " + " + "$" + (p.effective_price as Number).toFixed(2) + "/" + p.properties.denominator
										}
									}
								}
							}
						}
						if(!found)
						{
							consumptionCost = "N/A";
						}
					}else
					{
						consumptionCost = "N/A";
					}
				}
			}
			
			private function setActualCost():void
			{
				if(cloudAccount.cloud_provider == CloudAccount.AMAZON)
				{
					if(validSize() && ebsService.result.hasOwnProperty('prices'))
					{
						var found:Boolean = false;
						for each(var price:Object in ebsService.result.prices)
						{
							price = price.price;
							if(!found)
							{
								var sizeInt:int = parseInt(size.text);
								var priceNumber:Number
								if(volumeTypeSelection.selectedIndex == 0 && "block_storage" == price.name)
								{
									found = true;
									priceNumber = (price.effective_price as Number) * sizeInt;
									actualCost = "$" + priceNumber.toFixed(2) + "/month";
								}else if(volumeTypeSelection.selectedIndex == 1 && "iops_storage" == price.name)
								{
									for each(var p:Object in ebsService.result.prices)
									{
										p = p.price;
										if("iops" == p.name)
										{
											found = true;
											var iopsInt:int = parseInt(iopsInput.text);
											priceNumber = (price.effective_price as Number) * sizeInt + (p.effective_price as Number) * iopsInt;
											actualCost = "$" + priceNumber.toFixed(2) + "/month";
										}
									}
								}
							}
						}
						if(!found)
						{
							actualCost = "N/A";
						}
					}else
					{
						actualCost = "N/A";
					}
				}
			}
			
			private function resetSnapshotList():void
			{
				snapshotsList = new ArrayCollection();
				snapshotsList.addItem({id: "No Snapshot"});
				snapshotsComboBox.selectedIndex = 0;
			}
			
			private function validSize():Boolean
			{
				var valid:Boolean = false;
				try
				{
					if(size.text != "")
					{
						var sizeInt:int = parseInt(size.text);
						if(cloudAccount.cloud_provider == CloudAccount.AMAZON && volumeTypeSelection.selectedIndex == 1)
						{
							//Iops require the volume to be >= 10 GB
							if(sizeInt > 9 && sizeInt <= 1024)
							{
								valid = true;
							}else
							{
								valid = false
							}
						}else
						{
							if(sizeInt > 0 && sizeInt <= 1024)
							{
								valid = true;
							}else
							{
								valid = false
							}
						}
					}else
					{
						valid = false;
					}
				}catch(e:Error)
				{
					valid = false;
				}
				return valid;
			}
			
			private function validIops():Boolean
			{
				var valid:Boolean = false;
				try
				{
					if(iopsInput.text != "")
					{
						var iopsInt:int = parseInt(iopsInput.text);
						if(iopsInt > 99 && iopsInt <= 2000)
						{
							valid = true;
						}else
						{
							valid = false
						}
					}else
					{
						valid = false;
					}
				}catch(e:Error)
				{
					valid = false;
				}
				return valid;
			}
			
			private function setAvailabilityZone():void
			{
				if(volumeObject != null)
				{
					if(volumeObject.hasOwnProperty("Properties") && volumeObject.Properties.hasOwnProperty("AvailabilityZone"))
					{
						for each(var az:Object in ebsService.availabilityZones)
						{
							if(volumeObject.Properties.AvailabilityZone == az.zoneName)
							{
								zones.selectedItem = az;
							}
						}
					}
				}	
			}
			
			private function setSnapshotId():void
			{
				if(volumeObject != null)
				{
					if(volumeObject.hasOwnProperty("Properties") && volumeObject.Properties.hasOwnProperty("SnapshotId"))
					{
						//Index starts at one because 0 is "No Snapshot" option
						var i:int = 1;
						for each(var snapshot:Object in ebsService.snapshots)
						{
							if(volumeObject.Properties.SnapshotId == snapshot.id)
							{
								snapshotsComboBox.selectedIndex = i;
							}
							i++;
						}
					}else
					{
						snapshotsComboBox.selectedIndex = 0;
					}
				}
			}
			
			protected function createButton_clickHandler(event:MouseEvent):void
			{
				createButton.enabled = false;
				createButton.label = "Saving";
				var alert:Boolean = false;
				
				if(!alert)
				{
					if(objectManagementCreate)
					{
						var parameters:Object = {
							name: volumeName.text,
								description: description.text,
								snapshot_id: snapshotId,
								size: size.text,
								availability_zone: availabilityZone
						};
						
						var iops:String = null;
						if(volumeTypeFI.visible)
						{
							parameters["type"] = volumeTypeSelection.selectedItem.value;
							if(volumeTypeSelection.selectedIndex == 1)
							{
								iops = iopsInput.text;
								parameters["iops"] = iops;
							}
						}

						if(cloudAccount.cloud_provider == CloudAccount.CLOUDSTACK)
						{
							if(snapshotsComboBox.selectedIndex == 0)
							{
								parameters['disk_offering_id'] = diskOffering.selectedItem.id;
							}
						}else
						{
							parameters['size'] = size.text;
						}
						
						ebsService.addEventListener(ResultEvent.RESULT, objectManagementLaunchSvc_resultHandler);
						ebsService.createVolume(parameters);
					}else{
						var volumeAttributes:Object = new Object();					
						volumeAttributes['Type'] = ResourceType.EBS_VOLUME;
						volumeAttributes['Properties'] = getPropertiesObject();
						saveElement(volumeName.text, volumeAttributes);
						//createVariants(volumeName.text, statesToApply.ignoredEnvironments);
					}
				}				
			}
			
			protected function createVolumeWindow_creationCompleteHandler(event:FlexEvent):void
			{
				nextButton.enabled = false;
				resetSnapshotList();
				if(zones.dataProvider.length > 0)
				{
					availabilityZoneVisible = true;
				}else
				{
					availabilityZoneVisible = false;
				}
			}
			
			protected function ebsWizard_changeHandler(event:IndexChangedEvent):void
			{
				if(ebsWizard.selectedChild == review)
				{
					if(snapshotsComboBox.selectedIndex != -1 && snapshotsComboBox.selectedIndex != 0)
					{
						var selectedItem:Object = snapshotsComboBox.selectedItem;
						snapshotId  = selectedItem.id;
						reviewSnapshot = snapshotId;
					}
					if(cloudAccount.cloud_provider == CloudAccount.CLOUDSTACK)
					{
						reviewSize = diskOffering.selectedLabel;
					}else
					{
						reviewSize = size.text;
					}
					reviewAZ = zones.selectedLabel;
					if(description.text.replace(/\s/g, "") != "")
					{
						reviewDescription = description.text;
					}else
					{
						reviewDescription = "N/A";
					}
				}
			}
			
			public function getPropertiesObject():Object
			{
				var volumeProperties:Object = new Object();
				
				if(snapshotsComboBox.selectedIndex != 0)
				{
					volumeProperties['SnapshotId'] = snapshotsComboBox.selectedItem.id;
				}else
				{
					reviewSnapshot = "None";
				}
				volumeProperties['VolumeType'] = volumeTypeSelection.selectedItem.value;
				if(cloudAccount.cloud_provider == CloudAccount.AMAZON &&  volumeTypeSelection.selectedIndex == 1)
				{
					volumeProperties['Iops'] = iopsInput.text;
				}
				volumeProperties['Size'] = size.text;
				volumeProperties['AvailabilityZone'] = zones.selectedItem.zoneName;
				
				if(description.text.replace(/\s/g, "") != "")
				{
					volumeProperties['Metadata'] = new Object();
					volumeProperties['Metadata']['Comment'] = description.text;
				}
				return volumeProperties;
			}
			
			protected function nextButton_clickHandler(event:MouseEvent):void
			{
				var alert:Boolean = false;
				
				if(ebsWizard.selectedIndex < 1)
				{
					if(volumeName.text != "")
					{
						if(Helpers.validateAlphanumeric(volumeName.text))
						{
							if(objectManagementCreate)
							{
								nameAlert.visible = false;						
							}else
							{
								if(projectVersion.validateUniqueName(volumeName.text, element))
								{
									nameAlert.visible = false;
								}else
								{
									nameAlert.text = AlertMessage.NOT_UNIQUE;
									nameAlert.visible = true;
									alert = true;
								}
							}
						}else
						{
							nameAlert.text = AlertMessage.NOTALPHANUMERIC;
							nameAlert.visible = true;
							alert = true;
						}
					}else{
						nameAlert.text = AlertMessage.INVALID;
						nameAlert.visible = true;
						alert = true;
					}
					
					if(snapshotsComboBox.selectedIndex != -1)
					{
						snapshotAlert.visible = false;
					}else
					{
						snapshotAlert.visible = true;
						alert = true;
					}

					if(cloudAccount.cloud_provider == CloudAccount.CLOUDSTACK)
					{
						if(snapshotsComboBox.selectedIndex != 0)
						{
							if(diskOffering.selectedIndex != -1)
							{
								diskOfferingAlert.visible = false;	
							}else
							{
								alert = true;
								diskOfferingAlert.visible = true;
							}
						}else
						{
							diskOfferingAlert.visible = true;
						}
					}else
					{
						if(validSize())
						{
							sizeAlert.visible = false;
						}else
						{
							alert = true;
							sizeAlert.visible = true;
						}
						
						if(cloudAccount.cloud_provider == CloudAccount.AMAZON && volumeTypeSelection.selectedIndex == 1)
						{
							if(validIops())
							{
								iopsAlert.visible = false;
							}else
							{
								alert = true;
								iopsAlert.visible = true;
							}
						}else
						{
							iopsAlert.visible = false;
						}
						
						setActualCost();
					}
					
					if(zones.dataProvider.length > 0){
						if(zones.selectedIndex != -1)
						{
							if(cloudAccount.cloud_provider == CloudAccount.CLOUDSTACK)
							{
								availabilityZone = zones.selectedItem.id;	
							}else
							{
								availabilityZone = zones.selectedItem.zoneName;
							}
							zoneAlert.visible = false;
						}else
						{
							zoneAlert.visible = true;
							alert = true;
						}
					}
					
					if(!alert)
					{
						ebsWizard.selectedIndex++;
					}
				}
			}
			
			protected function objectManagementLaunchSvc_resultHandler(event:ResultEvent):void
			{
				Helpers.getObjectManagement(this).refreshResourceList();
				PopUpManager.removePopUp(this);
			}
			
			private function getResourcesSvc_resultHandler(event:ResultEvent):void
			{
				ebsService.removeEventListener(ResultEvent.RESULT, getResourcesSvc_resultHandler);
				resetSnapshotList();
				for each(var ss:Object in ebsService.snapshots)
				{
					snapshotsList.addItem(ss);
				}
				setAvailabilityZone();
				setSnapshotId();
				setConsumptionCost();
				nextButton.enabled = true;
			}
			
			private function snapshotLabelFunction(value:Object):String
			{
				var label:String = value.id
				if(value.name != null)
				{
					label = label + " " + value.name;
				}
				return label;
			}
			
			protected function snapshotsComboBox_changeHandler(event:ListEvent):void
			{
				if(cloudAccount.cloud_provider == CloudAccount.AMAZON && snapshotsComboBox.selectedIndex != 0)
				{
					size.text = snapshotsComboBox.selectedItem.volume_size;
				}
			}
			
			protected function volumeTypeSelection_changeHandler(event:ListEvent):void
			{
				if(cloudAccount.cloud_provider == CloudAccount.AMAZON)
				{
					setConsumptionCost();
					switch(volumeTypeSelection.selectedIndex)
					{
						case 0:
							sideRangeLabel.text = "GB (1 to 1024)";
							break;
						case 1:
							sideRangeLabel.text = "GB (10 to 1024)";
							break;
					}
				}
				
				if(size.text != "")
				{
					var sizeInt:int = parseInt(size.text);
					if(sizeInt < 10)
					{
						size.text = "10";
					}
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<services:Ec2Service id="ebsService"
							 cloudAccountId="{cloudAccount.id}"
							 region="{region}"/>		
	</fx:Declarations>
	<s:VGroup width="100%" height="100%" gap="0">
		<wizard:WizardWindowTitle id="ebsWizardTitle" includeInLayout="false"
								  width="100%"
								  resourceImage="{ImagePath.NEW_EBS}"
								  resourceLabel="{wizardDisplayName}"
								  wizardStack="{ebsWizard}"/>
		<wizard:CookieTrail id="ebsCookieTrail"
							wizardStack="{ebsWizard}"
							width="100%"/>
		<s:VGroup height="100%" width="100%">
			<mx:ViewStack id="ebsWizard" width="100%" height="100%" change="ebsWizard_changeHandler(event)" creationPolicy="all" paddingLeft="20" paddingTop="10">
				<s:NavigatorContent id="ebsConfigure" label="Configure Volume" height="100%" width="100%">
					<s:VGroup height="100%" width="100%">
						<s:Form height="100%" textAlign="right">
							<s:FormItem label="Name:*">
								<s:HGroup>
									<s:TextInput id="volumeName" width="175" textAlign="left"/>
									<mx:Text color="red" text="This is a required field." visible="false" id="nameAlert"/>
								</s:HGroup>
							</s:FormItem>
							<s:FormItem label="Description:">
								<s:TextInput id="description" prompt="optional" width="370" textAlign="left"/>
							</s:FormItem>
							<s:FormItem label="Snapshot:">
								<s:HGroup>
										<mx:ComboBox id="snapshotsComboBox" color="black" width="350" 
													 labelFunction="snapshotLabelFunction"
													 textAlign="left" prompt="Select Snapshot" 
													 dataProvider="{snapshotsList}"
													 selectedIndex="0"
													 change="snapshotsComboBox_changeHandler(event)"/>
										<mx:Text color="red" text="Invalid Input." visible="false" id="snapshotAlert"/>
								</s:HGroup>
							</s:FormItem>
							<s:FormItem label="Size" visible="{cloudAccount.cloud_provider != CloudAccount.CLOUDSTACK}" includeInLayout="{cloudAccount.cloud_provider != CloudAccount.CLOUDSTACK}">
								<s:HGroup>
									<s:TextInput id="size" text="5" width="46" textAlign="left"/>
									<mx:Text id="sideRangeLabel" text="GB (1 to 1024)"/>
									<mx:Text text="Cost: {consumptionCost}" visible="{cloudAccount.cloud_provider == CloudAccount.AMAZON}" includeInLayout="{cloudAccount.cloud_provider == CloudAccount.AMAZON}"/>
									<mx:Text color="red" text="Invalid." visible="false" id="sizeAlert"/>
								</s:HGroup>
							</s:FormItem>
							<s:FormItem id="volumeTypeFI" label="Volume Type:"
										visible="{cloudAccount.cloud_provider == CloudAccount.AMAZON}"
										includeInLayout="{cloudAccount.cloud_provider == CloudAccount.AMAZON}">
								<s:HGroup gap="20" textAlign="left" verticalAlign="middle">
									<mx:ComboBox id="volumeTypeSelection"
												 dataProvider="{volumeTypeCollection}"
												 change="volumeTypeSelection_changeHandler(event)"/>
									<s:HGroup enabled="{volumeTypeSelection.selectedIndex == 1}" visible="{cloudAccount.cloud_provider == CloudAccount.AMAZON}" includeInLayout="{cloudAccount.cloud_provider == CloudAccount.AMAZON}">
										<mx:Text text="IOPS:"/>
										<s:TextInput id="iopsInput" widthInChars="4" text="100"/>
									</s:HGroup>
									<s:Image source="{ImagePath.HELPER_ICON}" toolTip="The requested number of I/O operations per second that the volume can support. Range is 100 to 2000."/>
									<mx:Text id="iopsAlert" text="{AlertMessage.INVALID}" visible="false" color="red"/>
								</s:HGroup>	
							</s:FormItem>
							<s:FormItem label="Disk Offering:" visible="{cloudAccount.cloud_provider == CloudAccount.CLOUDSTACK}" includeInLayout="{cloudAccount.cloud_provider == CloudAccount.CLOUDSTACK}">
								<s:HGroup textAlign="left">
									<mx:ComboBox id="diskOffering"
												 labelField="displaytext"
												 prompt="Select Size"
												 dataProvider="{ebsService.diskOfferings}"
												 enabled="{snapshotsComboBox.selectedIndex != 0}"/>
									<mx:Text color="red" text="A disk offering must be selected." visible="false" id="diskOfferingAlert"/>
								</s:HGroup>
							</s:FormItem>
							<s:FormItem label="Availability Zone:" visible="{availabilityZoneVisible}" includeInLayout="{availabilityZoneVisible}">
								<s:HGroup textAlign="left">
									<mx:ComboBox id="zones"
												 labelField="zoneName"
												 prompt="Select Zone"
												 enabled="{ebsService.availabilityZones.length > 0}"
												 dataProvider="{ebsService.availabilityZones}"/>
									<mx:Text color="red" text="An availability zone must be selected." visible="false" id="zoneAlert"/>
								</s:HGroup>
							</s:FormItem>
						</s:Form>
					</s:VGroup>
				</s:NavigatorContent>
				<s:NavigatorContent id="review" label="Review">
					<s:VGroup>
						<mx:Text text="Please Review Your Volume" y="20" fontWeight="bold"/>
						<s:VGroup x="25" y="60" paddingLeft="20">
							<mx:Text text="Name: {volumeName.text}"/>
							<mx:Text text="Description: {reviewDescription}"/>
							<mx:Text text="Snapshot: {reviewSnapshot}"/>
							<mx:Text text="Size: {reviewSize}"/>
							<mx:Text text="Type: {volumeTypeSelection.selectedItem.value}"/>
							<mx:Text text="IOPS: {iopsInput.text}" 
									 visible="{cloudAccount.cloud_provider == CloudAccount.AMAZON &amp;&amp; volumeTypeSelection.selectedIndex == 1}"
									 includeInLayout="{cloudAccount.cloud_provider == CloudAccount.AMAZON &amp;&amp; volumeTypeSelection.selectedIndex == 1}"/>
							<mx:Text text="Availability Zone: {reviewAZ}" visible="{availabilityZoneVisible}"/>
						</s:VGroup>
						<mx:Text text="Cost: {actualCost}" y="20" fontWeight="bold" visible="{cloudAccount.cloud_provider == CloudAccount.AMAZON}" includeInLayout="{cloudAccount.cloud_provider == CloudAccount.AMAZON}"/>
					</s:VGroup>
				</s:NavigatorContent>
			</mx:ViewStack>
			<s:HGroup width="100%" paddingLeft="10" paddingRight="10" paddingBottom="10">
				<s:HGroup horizontalAlign="left" width="100%">
					<s:Button id="previousButton" label="Previous" click="ebsWizard.selectedIndex--" enabled="{ebsWizard.selectedIndex==1}"/>
					<s:Button id="nextButton" label="Next" click="nextButton_clickHandler(event)" enabled="{ebsWizard.selectedIndex==0}"/> 
					<s:Button id="createButton" label="Finish" click="createButton_clickHandler(event)" enabled="{ebsWizard.selectedChild == review}"/>
				</s:HGroup>
				<s:HGroup horizontalAlign="right" width="100%">
					<s:Button id="cancelButton" x="541" y="354" label="Cancel" click="{PopUpManager.removePopUp(this);}"/>
				</s:HGroup>
			</s:HGroup>
		</s:VGroup>
	</s:VGroup>
</wizard:WizardWindow>
