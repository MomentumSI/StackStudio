package com.momentumsi.c9.models.resources
{
	import com.momentumsi.c9.constants.ResourceType;
	import com.momentumsi.c9.models.Element;
	import com.momentumsi.c9.models.ProjectVersion;
	
	import mx.collections.ArrayCollection;
	
	[Bindable]
	public class EmbeddedStack extends Element
	{
		public var templateURL:Object;
		public var parameters:Object;
		public var timeoutInMinutes:String;
		
		public var metadata:Object;
		public var deletionPolicy:String;
		public var dependsOn:Object;
		
		public function EmbeddedStack(element:Element)
		{
			super(element.id, element.name, element.elementType, element.projectId);
			properties = element.properties;
			elementGroup = ELEMENT_GROUP_RESOURCE;
			elementType = ResourceType.EMBEDDED_STACK;
		}
		private var _properties:Object;
		override public function get properties():Object
		{
			_properties = new Object();
			if(templateURL != null)
			{
				_properties["TemplateURL"] = templateURL;
			}
			if(parameters != null)
			{
				_properties["Parameters"] = parameters;
			}
			if(timeoutInMinutes != null)
			{
				_properties['TimeoutInMinutes'] = timeoutInMinutes;
			}
			
			var props:Object = _properties;
			_properties = new Object();
			_properties["Properties"] = props;
			
			if(metadata != null)
			{
				_properties["Metadata"] = metadata;
			}
			if(deletionPolicy != null)
			{
				_properties["DeletionPolicy"] = deletionPolicy;
			}
			if(dependsOn != null)
			{
				_properties["DependsOn"] = dependsOn;
			}
			_properties["Type"] = elementType;
			return _properties;
		}
		
		override public function set properties(value:Object):void
		{
			_properties = value;
			
			metadata = value["Metadata"];
			deletionPolicy = value["DeletionPolicy"];
			dependsOn = value["DependsOn"];
			
			value = value["Properties"];
			if(value != null)
			{
				templateURL = value["TemplateURL"];
				parameters = value["Parameters"];
				timeoutInMinutes = value["TimeoutInMinutes"];
			}
		}
		
		public function isStackStudioProject():Boolean
		{
			var studioProject:Boolean = false;
			if(templateURL != null)
			{
				try
				{
					var urlSplit:Array = templateURL.split(".com/");
					var afterDomain:String = urlSplit[1];
					var afterDomainSplit:Array = afterDomain.split("/");
					var bucketName:String = afterDomainSplit[0];
					var bucketNameSplit:Array = bucketName.split("-");
					//Checks if the url is generated by StackStudio
					if(bucketNameSplit[0] == "StackStudio")
					{
						studioProject = true;
					}else
					{
						studioProject = false;
					}
				}catch(e:Error)
				{
					trace(e.message);
					studioProject = false;
				}
			}else
			{
				studioProject = false;
			}
			return studioProject;
		}
		
		public function getStackStudioProjectName():String
		{
			var studioProjectName:String = null;
			if(templateURL != null)
			{
				try
				{
					var bucketName:String = getBucketName();
					var bucketNameSplit:Array = bucketName.split("-");
					//Checks if the url is generated by StackStudio
					if(bucketNameSplit[0] == "StackStudio")
					{
						studioProjectName = bucketNameSplit[1];
					}
				}catch(e:Error)
				{
					trace(e.message);
					studioProjectName = null;
				}
			}else
			{
				studioProjectName = null;
			}
			return studioProjectName;
		}
		
		public function getBucketName():String
		{
			var bucketName:String = null;
			if(templateURL != null)
			{
				try
				{
					var urlSplit:Array = templateURL.split(".com/");
					var afterDomain:String = urlSplit[1];
					var afterDomainSplit:Array = afterDomain.split("/");
					bucketName = afterDomainSplit[0];
				}catch(e:Error)
				{
					trace(e.message);
					bucketName = null;
				}
			}else
			{
				bucketName = null;
			}
			return bucketName;
		}
	}
}