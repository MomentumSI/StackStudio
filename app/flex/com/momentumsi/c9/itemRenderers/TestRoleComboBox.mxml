<?xml version="1.0" encoding="utf-8"?>
<s:GridItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx"
					clipAndEnableScrolling="true" 
					width="100%" xmlns:services="com.momentumsi.c9.services.*">
	
	<fx:Script>
		<![CDATA[
			import com.momentumsi.c9.components.ProjectManagePermissions;
			import com.momentumsi.c9.constants.PermissionType;
			import com.momentumsi.c9.events.ProjectEvent;
			import com.momentumsi.c9.models.Member;
			import com.momentumsi.c9.models.Permission;
			import com.momentumsi.c9.models.Project;
			
			import mx.events.ListEvent;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]
			private var project:Project;
			private var member:Member;
			
			override public function set data(value:Object):void
			{
				if(value!=null)
				{
					super.data = value;
					project = Project(value.project);
					member = project.findUserAsMember(value.member.account.id);
					var found:Boolean = false;
					for(var i:int = 0; i < value.testCollection.length; i++)
					{
						if(!found && value.testSelection == value.testCollection[i])
						{
							found = true;
							testComboBox.selectedIndex = i;
						}
					}
					
					if(!found)
					{
						testComboBox.selectedIndex = 0;
					}
				}
			}
			
			protected function testComboBox_changeHandler(event:ListEvent):void
			{
				if(member != null)
				{
					ProjectManagePermissions(super.data.projectManagePermissions).projectUsersDataGrid.enabled = false;
					//remove all permissions in the correct environment
					deleteService.removeMemberPermissionsByEnv(member.id, PermissionType.TEST);
				}
			}
			
			protected function deleteService_resultHandler(event:ResultEvent):void
			{
				//add only the appropriate permissions for the correct environment
				var permission:Permission = new Permission();
				var roleArray:Array = new Array();
				switch(testComboBox.selectedLabel)
				{
					case PermissionType.NONE_ROLE:
						roleArray = PermissionType.NONE_ARRAY;
						break;
					case PermissionType.FULL_ROLE:
						roleArray = PermissionType.FULL_ARRAY;
						break;
					case PermissionType.AUTHOR_ROLE:
						roleArray = PermissionType.AUTHOR_ARRAY;
						break;
					case PermissionType.PROVISION_ROLE:
						roleArray = PermissionType.PROVISION_ARRAY;
						break;
					case PermissionType.MONITOR_ROLE:
						roleArray = PermissionType.MONITOR_ARRAY;
						break;
				}
				var permissions:Array = new Array();
				for each(var role:String in roleArray)
				{
					permission.name = role;
					permission.environment = PermissionType.TEST;
					permissions.push(permission.toObject());
				}
				if(permissions.length > 0)
				{
					project.addEventListener(ProjectEvent.PROJECT_RESULT, project_resultHandler);
					project.addMemberPermissionBulk(member.id, {permissions: permissions});
				}else
				{
					super.data.devSelection = testComboBox.selectedLabel;
					ProjectManagePermissions(super.data.projectManagePermissions).projectUsersDataGrid.enabled = true;
				}
			}
			
			protected function project_resultHandler(event:ProjectEvent):void
			{
				project.removeEventListener(ProjectEvent.PROJECT_RESULT, project_resultHandler);
				super.data.testSelection = testComboBox.selectedLabel;
				ProjectManagePermissions(super.data.projectManagePermissions).projectUsersDataGrid.enabled = true;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<services:ProjectService id="deleteService"
								 project="{project}"
								 result="deleteService_resultHandler(event)"/>
	</fx:Declarations>
	
	<mx:ComboBox id="testComboBox" change="testComboBox_changeHandler(event)" dataProvider="{data.testCollection}" width="100%" enabled="{data.enabled}"/>
</s:GridItemRenderer>
